<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>svgToPng</title>
    <link href="/dylan/2022/04/14/svgToPng/"/>
    <url>/dylan/2022/04/14/svgToPng/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>工作遇见的需求，需要将 svg 代码转为 png 格式，一般用户复制的svg代码来自<a href="https://www.iconfont.cn/">阿里巴巴矢量库 </a>。</p><h2 id="二、剪切板"><a href="#二、剪切板" class="headerlink" title="二、剪切板"></a>二、剪切板</h2><p>先获取系统剪切板的内容，自定义一个粘贴板</p><p>html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;big&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;big&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span> &#123;<br>   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.big</span> &#123;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.Event)<br>    <span class="hljs-built_in">document</span>.captureEvents(Event.MOUSEUP);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nocontextmenu</span>(<span class="hljs-params"></span>) </span>&#123;<br>    event.cancelBubble = <span class="hljs-literal">true</span><br>    event.returnValue = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">norightclick</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.Event) &#123;<br>        <span class="hljs-keyword">if</span> (e.which == <span class="hljs-number">2</span> || e.which == <span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.button == <span class="hljs-number">2</span> || event.button == <span class="hljs-number">3</span>) &#123;<br>        event.cancelBubble = <span class="hljs-literal">true</span><br>        event.returnValue = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.oncontextmenu = nocontextmenu;  <span class="hljs-comment">// for IE5+</span><br><span class="hljs-built_in">document</span>.onmousedown = norightclick;  <span class="hljs-comment">//for all others</span><br><span class="hljs-keyword">var</span> big = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;big&#x27;</span>);<br><span class="hljs-keyword">var</span> preview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);<br>big.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> &#123; clientX, clientY &#125; = event<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;paste&#x27;</span>))&#123;<br>        big.removeChild(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;paste&#x27;</span>))<br>    &#125;<br>    cteatDom(clientX, clientY)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cteatDom</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> pasteDom = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    pasteDom.innerText = <span class="hljs-string">&#x27;点我粘贴svg&#x27;</span><br>    pasteDom.id = <span class="hljs-string">&#x27;paste&#x27;</span><br>    pasteDom.style.cssText = <span class="hljs-string">`width:100px;height:50px;line-height:50px;text-align:center;position:absolute;background:#708090;color:white;left:<span class="hljs-subst">$&#123;x&#125;</span>px;top:<span class="hljs-subst">$&#123;y&#125;</span>px;`</span><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;big&quot;</span>).appendChild(pasteDom)<br>    pasteDom.onclick = pasteSvg<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pasteSvg</span>(<span class="hljs-params"></span>) </span>&#123;<br>    big.removeChild(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;paste&#x27;</span>))<br>    navigator.clipboard.readText().then(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(text)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>上诉代码目的是禁用浏览器右键面板，自定义粘贴面板，获取系统剪切板内容</p><h2 id="三、防XSS攻击"><a href="#三、防XSS攻击" class="headerlink" title="三、防XSS攻击"></a>三、防XSS攻击</h2><p>在实际工作中，由于不知道用户粘贴的内容是否为svg代码，所以需要对粘贴内容进行效验，总结出两种方式：</p><ol><li>正则效验：判断粘贴内容是否为“&lt;svg”开头，这种方式不够灵活，会存在粘贴富文本情况，且无法效验复杂情况，不考虑</li><li>Element效验：将粘贴内容放入dom元素，通过innerHTML判断是否存在svgElement，这时需要 <a href="https://github.com/apostrophecms/sanitize-html">sanitize-html</a> 过滤恶意标签，sanitize-html也有原生方法，不过兼容性不好，还是采用sanitize-html的npm包，主要是将script、a等标签过滤，以及一些事件属性。</li></ol><p>XSS攻击例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;svg t=<span class="hljs-string">&quot;1648864960646&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;icon&quot;</span> viewBox=<span class="hljs-string">&quot;0 0 1024 1024&quot;</span> version=<span class="hljs-string">&quot;1.1&quot;</span><br>    xmlns=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> p-id=<span class="hljs-string">&quot;1544&quot;</span> width=<span class="hljs-string">&quot;200&quot;</span> height=<span class="hljs-string">&quot;200&quot;</span>&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">path</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M314.624 121.44L33.056 896h124.32l59.488-173.184h293.792L570.688 896h123.776L412.896 121.44H314.624zM250.88 618.688l112.096-338.4h2.112l112.096 338.4H250.88zM848 672L704 896h288zM774.496 249.472a334.24 334.24 0 0 0-73.472 80.064c-19.36 29.888-29.024 60.992-29.024 93.312h288v-80.096h-158.688c5.888-10.784 22.784-27.168 50.688-49.216 39.168-30.848 65.632-55.968 79.36-75.296 13.728-19.328 20.576-41.76 20.576-67.232 0-35.744-11.872-64.512-35.648-86.336S860.576 32 820.416 32c-77.376 0-124.896 34.272-142.528 102.848l95.52 15.424c5.888-25.472 19.584-38.208 41.152-38.208 10.784 0 19.712 3.424 26.816 10.304 7.104 6.848 10.656 15.904 10.656 27.168 0 14.688-5.504 29.152-16.544 43.36-11.04 14.208-31.36 33.056-60.992 56.576z&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">p-id</span>=<span class="hljs-string">&quot;1545&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(23333)&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><h2 id="四、svgToCanvas"><a href="#四、svgToCanvas" class="headerlink" title="四、svgToCanvas"></a>四、svgToCanvas</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">svgTextToCanvas</span>(<span class="hljs-params">svgStr</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> base64 = <span class="hljs-string">&#x27;data:image/svg+xml;base64,&#x27;</span> + <span class="hljs-built_in">window</span>.btoa(<span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">encodeURIComponent</span>(svgStr)));<br>    <span class="hljs-keyword">return</span> imgUrlToCanvas(base64);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">imgUrlToCanvas</span>(<span class="hljs-params">url</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//新建Image对象</span><br>        <span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> Image();<br>        <span class="hljs-comment">//svg编码成base64</span><br>        img.src = url; <span class="hljs-comment">//svg内容中可以有中文字符</span><br>        img.crossOrigin = <span class="hljs-string">&#x27;*&#x27;</span>;<br>        <span class="hljs-comment">//图片初始化完成后调用</span><br>        img.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>            canvas.height = img.height;<br>            canvas.width = img.width;<br>            <span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>            <span class="hljs-comment">//canvas画图片</span><br>            <span class="hljs-keyword">if</span> (context) &#123;<br>                context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                resolve(canvas);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                reject();<br>            &#125;<br>            img.remove();<br>        &#125;;<br>        img.onerror = <span class="hljs-function">() =&gt;</span> &#123;<br>            reject();<br>            img.remove();<br>        &#125;;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过构建svgbase64将svg图像置入canvas生成canvas图像</p><h2 id="五、svgToBase64"><a href="#五、svgToBase64" class="headerlink" title="五、svgToBase64"></a>五、svgToBase64</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">svgTextToImgBase64</span>(<span class="hljs-params">svgStr, type</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        svgTextToCanvas(svgStr)<br>            .then(<span class="hljs-function">(<span class="hljs-params">canvas</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> fileType = <span class="hljs-string">&#x27;image/&#x27;</span> + type;<br>                <span class="hljs-keyword">const</span> base64Url = canvas.toDataURL(fileType);<br>                resolve(base64Url);<br>            &#125;)<br>            .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> reject(e));<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过toDataURL方法将绘制出来的canvas转为base64格式，这一步就可以展示图片了，但一般上传服务器为file格式。</p><h2 id="六、blobToFile"><a href="#六、blobToFile" class="headerlink" title="六、blobToFile"></a>六、blobToFile</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">blobToFile</span>(<span class="hljs-params">newBlob, fileName, type = <span class="hljs-string">&#x27;image/png&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> File([newBlob], fileName, &#123; type &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>转为File格式方便后台上传</p><h2 id="七、svgToPng"><a href="#七、svgToPng" class="headerlink" title="七、svgToPng"></a>七、svgToPng</h2><p>完整js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.Event)<br>    <span class="hljs-built_in">document</span>.captureEvents(Event.MOUSEUP);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nocontextmenu</span>(<span class="hljs-params"></span>) </span>&#123;<br>    event.cancelBubble = <span class="hljs-literal">true</span><br>    event.returnValue = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">norightclick</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.Event) &#123;<br>        <span class="hljs-keyword">if</span> (e.which == <span class="hljs-number">2</span> || e.which == <span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.button == <span class="hljs-number">2</span> || event.button == <span class="hljs-number">3</span>) &#123;<br>        event.cancelBubble = <span class="hljs-literal">true</span><br>        event.returnValue = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.oncontextmenu = nocontextmenu;  <span class="hljs-comment">// for IE5+</span><br><span class="hljs-built_in">document</span>.onmousedown = norightclick;  <span class="hljs-comment">//for all others</span><br><span class="hljs-keyword">var</span> big = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;big&#x27;</span>);<br><span class="hljs-keyword">var</span> preview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);<br>big.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> &#123; clientX, clientY &#125; = event<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;paste&#x27;</span>))&#123;<br>        big.removeChild(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;paste&#x27;</span>))<br>    &#125;<br>    cteatDom(clientX, clientY)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cteatDom</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> pasteDom = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    pasteDom.innerText = <span class="hljs-string">&#x27;点我粘贴svg&#x27;</span><br>    pasteDom.id = <span class="hljs-string">&#x27;paste&#x27;</span><br>    pasteDom.style.cssText = <span class="hljs-string">`width:100px;height:50px;line-height:50px;text-align:center;position:absolute;background:#708090;color:white;left:<span class="hljs-subst">$&#123;x&#125;</span>px;top:<span class="hljs-subst">$&#123;y&#125;</span>px;`</span><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;big&quot;</span>).appendChild(myDom)<br>    myDom.onclick = pasteSvg<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pasteSvg</span>(<span class="hljs-params"></span>) </span>&#123;<br>    big.removeChild(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;paste&#x27;</span>))<br>    navigator.clipboard.readText().then(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> &#123;<br>        svgTextToImgBase64(text, <span class="hljs-string">&#x27;svg+xml&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            preview.src = res<br>        &#125;)<br>    &#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">blobToFile</span>(<span class="hljs-params">newBlob, fileName, type = <span class="hljs-string">&#x27;image/png&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> File([newBlob], fileName, &#123; type &#125;);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* svg字符串转base64</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">svgTextToImgBase64</span>(<span class="hljs-params">svgStr, type</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        svgTextToCanvas(svgStr)<br>            .then(<span class="hljs-function">(<span class="hljs-params">canvas</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> fileType = <span class="hljs-string">&#x27;image/&#x27;</span> + type;<br>                <span class="hljs-keyword">const</span> base64Url = canvas.toDataURL(fileType);<br>                resolve(base64Url);<br>            &#125;)<br>            .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> reject(e));<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * svg字符串转canvas</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">svgTextToCanvas</span>(<span class="hljs-params">svgStr</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> base64 = <span class="hljs-string">&#x27;data:image/svg+xml;base64,&#x27;</span> + <span class="hljs-built_in">window</span>.btoa(<span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">encodeURIComponent</span>(svgStr)));<br>    <span class="hljs-keyword">return</span> imgUrlToCanvas(base64);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">imgUrlToCanvas</span>(<span class="hljs-params">url</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//新建Image对象</span><br>        <span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> Image();<br>        <span class="hljs-comment">//svg编码成base64</span><br>        img.src = url; <span class="hljs-comment">//svg内容中可以有中文字符</span><br>        img.crossOrigin = <span class="hljs-string">&#x27;*&#x27;</span>;<br>        <span class="hljs-comment">//图片初始化完成后调用</span><br>        img.onload = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>            canvas.height = img.height;<br>            canvas.width = img.width;<br>            <span class="hljs-keyword">const</span> context = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>            <span class="hljs-comment">//canvas画图片</span><br>            <span class="hljs-keyword">if</span> (context) &#123;<br>                context.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                resolve(canvas);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                reject();<br>            &#125;<br>            img.remove();<br>        &#125;;<br>        img.onerror = <span class="hljs-function">() =&gt;</span> &#123;<br>            reject();<br>            img.remove();<br>        &#125;;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>websocket原理浅析与使用</title>
    <link href="/dylan/2022/03/29/websocket/"/>
    <url>/dylan/2022/03/29/websocket/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>websocket可以实现客户端和服务端双向通信。比起HTTP1.x协议服务端可以主动给客户端发送信息，比如即时通讯、即使报价等。</p><h2 id="短轮询"><a href="#短轮询" class="headerlink" title="短轮询"></a>短轮询</h2><p>短轮询的实现思路就是客户端每隔几秒向服务端发送HTTP请求，服务端在收到请求后，不论是否有数据更新，都直接进行响应，主要通过setInterval实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  fetch(url).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// success code</span><br>  &#125;)<br>&#125;, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>优点：实现简单</p><p>缺点：会造成大量无效的请求，浪费资源，安全性差</p><h2 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h2><p>客户端发送请求后服务端不会立即返回数据，服务端会阻塞请求连接不会立即断开，直到服务器有数据更新或连接超时才返回，客户端才再次发出请求。客户端代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async</span>(<span class="hljs-params"></span>) </span>&#123;<br>    fetch(url).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">async</span>();<br>    <span class="hljs-comment">// success code</span><br>&#125;).catch(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 超时</span><br>        <span class="hljs-keyword">async</span>();<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：对比短轮询做了优化，有较好的时效性</p><p>缺点：保持连接挂起会消耗资源，服务器没有返回有效数据，程序超市</p><h2 id="通信原理"><a href="#通信原理" class="headerlink" title="通信原理"></a>通信原理</h2><p>当客户端要和服务端建立 WebSocket 连接时，在客户端和服务器的握手过程中，客户端首先会向服务端发送一个 HTTP 请求，包含一个 Upgrade 请求头来告知服务端客户端想要建立一个 WebSocket 连接。</p><p>在客户端建立一个websocket连接灰常简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ws = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&#x27;ws://localhost:9000&#x27;</span>);<br></code></pre></td></tr></table></figure><p>类似HTTP和HTTPS，ws相应的有wss用以建立安全连接，请求头如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><br>Cache-Control: no-cache<br><span class="hljs-attr">Connection</span>: Upgrade<span class="hljs-comment">// 表示该连接要升级协议</span><br><span class="hljs-attr">Cookie</span>: _hjMinimizedPolls=<span class="hljs-number">358479</span>; ts_uid=<span class="hljs-number">7852621249</span>; CNZZDATA1259303436=<span class="hljs-number">1218855313</span>-<span class="hljs-number">1548914234</span>-%7C1564625892; csrfToken=DPb4RhmGQfPCZnYzUCCOOade; JSESSIONID=67376239124B4355F75F1FC87C059F8D; _hjid=3f7157b6-1aa0-4d5c-ab9a-45eab1e6941e; acw_tc=76b20ff415689655672128006e178b964c640d5a7952f7cb3c18ddf0064264<br><span class="hljs-attr">Host</span>: localhost:<span class="hljs-number">9000</span><br><span class="hljs-attr">Origin</span>: http:<span class="hljs-comment">//localhost:9000</span><br>Pragma: no-cache<br>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits<br>Sec-WebSocket-Key: 5fTJ1LTuh3RKjSJxydyifQ==<span class="hljs-comment">// 与响应头 Sec-WebSocket-Accept 相对应</span><br>Sec-WebSocket-Version: <span class="hljs-number">13</span><span class="hljs-comment">// 表示 websocket 协议的版本</span><br><span class="hljs-attr">Upgrade</span>: websocket<span class="hljs-comment">// 表示要升级到 websocket 协议</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10_14_0</span>) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">76.0</span><span class="hljs-number">.3809</span><span class="hljs-number">.132</span> Safari/<span class="hljs-number">537.36</span><br></code></pre></td></tr></table></figure><p>响应头如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">Connection: Upgrade<br>Sec-WebSocket-Accept: ZUip34t+bCjhkvxxwhmdEOyx9hE=<br>Upgrade: websocket<br></code></pre></td></tr></table></figure><p>相应行的状态码 status code是101，表示该连接已经从HTTP协议转换为websocket通信协议。转换成功之后，该连接并没有中断，而是建立了一个全双工通信，后续发送和接收消息都会走这个连接通道。</p><p>其中请求头<code>Sec-WebSocket-Key</code>与相应头中<code>Sec-WebSocket-Accept</code>是配套对应的</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>客户端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connectWebsocket</span>(<span class="hljs-params"></span>) </span>&#123;<br>    ws = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&#x27;ws://localhost:9000&#x27;</span>);<br>    <span class="hljs-comment">// 监听连接成功</span><br>    ws.onopen = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;连接服务端WebSocket成功&#x27;</span>);<br>        ws.send(<span class="hljs-built_in">JSON</span>.stringify(msgData));<span class="hljs-comment">// send 方法给服务端发送消息</span><br>    &#125;;<br><br>    <span class="hljs-comment">// 监听服务端消息(接收消息)</span><br>    ws.onmessage = <span class="hljs-function">(<span class="hljs-params">msg</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> message = <span class="hljs-built_in">JSON</span>.parse(msg.data);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;收到的消息：&#x27;</span>, message)<br>        elUl.innerHTML += <span class="hljs-string">`&lt;li class=&quot;b&quot;&gt;小秋：<span class="hljs-subst">$&#123;message.content&#125;</span>&lt;/li&gt;`</span>;<br>    &#125;;<br><br>    <span class="hljs-comment">// 监听连接失败</span><br>    ws.onerror = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;连接失败，正在重连...&#x27;</span>);<br>        connectWebsocket();<br>    &#125;;<br><br>    <span class="hljs-comment">// 监听连接关闭</span><br>    ws.onclose = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;连接关闭&#x27;</span>);<br>    &#125;;<br>&#125;;<br>connectWebsocket();<br></code></pre></td></tr></table></figure><p>服务端（node）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-keyword">const</span> server = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>).Server(app);<br><span class="hljs-keyword">const</span> WebSocket = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ws&#x27;</span>);<br><br><span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> WebSocket.Server(&#123; <span class="hljs-attr">server</span>: server &#125;);<br><br>wss.on(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">ws</span>) =&gt;</span> &#123; <br><br>  <span class="hljs-comment">// 监听客户端发来的消息</span><br>  ws.on(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(wss.clients.size);<br>    <span class="hljs-keyword">let</span> msgData = <span class="hljs-built_in">JSON</span>.parse(message);   <br>    <span class="hljs-keyword">if</span> (msgData.type === <span class="hljs-string">&#x27;open&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 初始连接时标识会话</span><br>      ws.sessionId = <span class="hljs-string">`<span class="hljs-subst">$&#123;msgData.fromUserId&#125;</span>-<span class="hljs-subst">$&#123;msgData.toUserId&#125;</span>`</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">let</span> sessionId = <span class="hljs-string">`<span class="hljs-subst">$&#123;msgData.toUserId&#125;</span>-<span class="hljs-subst">$&#123;msgData.fromUserId&#125;</span>`</span>;<br>      wss.clients.forEach(<span class="hljs-function"><span class="hljs-params">client</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (client.sessionId === sessionId) &#123;<br>          client.send(message); <span class="hljs-comment">// 给对应的客户端连接发送消息</span><br>        &#125;<br>      &#125;)  <br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-comment">// 连接关闭</span><br>  ws.on(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;连接关闭&#x27;</span>);  <br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="心跳保活"><a href="#心跳保活" class="headerlink" title="心跳保活"></a>心跳保活</h2><p>在实际使用 WebSocket 中，长时间不通消息可能会出现一些连接不稳定的情况，这些未知情况导致的连接中断会影响客户端与服务端之前的通信，</p><p>为了防止这种的情况的出现，有一种心跳保活的方法：客户端就像心跳一样每隔固定的时间发送一次 ping ，来告诉服务器，我还活着，而服务器也会返回 pong ，来告诉客户端，服务器还活着。ping/pong 其实是一条与业务无关的假消息，也称为心跳包。</p><p>可以在连接成功后，每隔一段时间发送心跳包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    ws.send(<span class="hljs-string">&#x27;这是一条心跳包消息&#x27;</span>);<br>&#125;, <span class="hljs-number">60000</span>)<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当创建 WebSocket 实例的时候，会发一个 HTTP 请求，请求报文中有个特殊的字段 Upgrade ，然后这个连接会由 HTTP 协议转换为 WebSocket 协议，这样客户端和服务端建立了全双工通信，通过 WebSocket 的 send 方法和 onmessage 事件就可以通过这条通信连接交换信息。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React中context的使用</title>
    <link href="/dylan/2022/03/28/react-context/"/>
    <url>/dylan/2022/03/28/react-context/</url>
    
    <content type="html"><![CDATA[<h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><p><code>context</code>提供了一种方式，能够让数据在组件中传递时不必一级一级的手动传递</p><p>一般情况下，数据在组件中，要一级一级的传递，单向数据流，比如Parent组件中的theme值，需要在Item组件中使用，就需要我们从Parent中向下传递， 但当我们有了<code>Context</code>后，我们就不需要一级一级传递了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">Parent(theme=red)<br>    List(theme=red)<br>        Item(theme=red)<br>        <br>ThemeContext.Provider value=&#123;<span class="hljs-string">&#x27;red&#x27;</span>&#125;<br>    List<br>        ThemeContext.Customer  (theme) =&gt; &#123; theme &#125;<br></code></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// 创建Context的唯一方法</span><br><span class="hljs-keyword">const</span> ThemeContext = createContext()<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// 使用 Context.Provider 包裹后续组件，value 指定值 </span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;</span>&#x27;<span class="hljs-attr">red</span>&#x27;&#125;&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Middle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Middle</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bottom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// Context.Consumer Consumer消费者使用Context得值</span><br>      <span class="hljs-comment">// 但子组件不能是其他组件，必须渲染一个函数，函数的参数就是Context得值</span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="xml">        &#123;</span><br><span class="xml">          theme =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>ThemeContext 的 值为 &#123;theme&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">        &#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Middle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Bottom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Bottom</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>当<code>Provider</code>提供的值更改时，<code>Consumer</code>必须重新渲染：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// 创建Context的唯一方法</span><br><span class="hljs-keyword">const</span> ThemeContext = createContext()<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>  &#125;<br>  render () &#123;<br>    <span class="hljs-keyword">const</span> &#123; theme &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// 使用 Context.Provider 包裹后续组件，value 指定值 </span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="xml">        &#123;/* 当Context的Provider值更改时，Consumer 的值必须重新渲染 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">            this.setState(&#123; theme: &#x27;yellow&#x27;&#125;)&#125;&#125;</span><br><span class="xml">        &gt;按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Middle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Middle</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bottom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// Context.Consumer Consumer消费者使用Context得值</span><br>      <span class="hljs-comment">// 但子组件不能是其他组件，必须渲染一个函数，函数的参数就是Context得值</span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="xml">        &#123;</span><br><span class="xml">          theme =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>ThemeContext 的 值为 &#123;theme&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">        &#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Middle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Bottom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Bottom</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>当出现多个<code>Context</code>的时候：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// 创建Context的唯一方法</span><br><span class="hljs-keyword">const</span> ThemeContext = createContext()<br><span class="hljs-keyword">const</span> SizeContext = createContext()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>    <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;small&#x27;</span><br>  &#125;<br>  render () &#123;<br>    <span class="hljs-keyword">const</span> &#123; theme, size &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// 使用 Context.Provider 包裹后续组件，value 指定值 </span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="xml">        &#123;/* 当出现多个Context的时候，只需要将Context.Provider 嵌套即可 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SizeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;size&#125;</span>&gt;</span></span><br><span class="xml">          &#123;/* 当Context的Provider值更改时，Consumer 的值必须重新渲染 */&#125;</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            () =&gt;</span> &#123;</span><br><span class="xml">                this.setState(&#123; theme: &#x27;yellow&#x27;, size: &#x27;big&#x27;&#125;)</span><br><span class="xml">            &#125;</span><br><span class="xml">          &#125;&gt;按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Middle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Middle</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">SizeContext.Provider</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bottom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// Context.Consumer Consumer消费者使用Context得值</span><br>      <span class="hljs-comment">// 但子组件不能是其他组件，必须渲染一个函数，函数的参数就是Context得值</span><br>      <span class="hljs-comment">// 当出现 多个Consumer的时候，进行嵌套，每个Consumer</span><br>      <span class="hljs-comment">// 的子组件必须是一个函数，即可</span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="xml">        &#123;</span><br><span class="xml">          theme =&gt; (</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">SizeContext.Consumer</span>&gt;</span></span><br><span class="xml">              &#123;</span><br><span class="xml">                size =&gt; (</span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                        ThemeContext 的 值为 &#123;theme&#125;; </span><br><span class="xml">                        SizeContext 的值为 &#123;size&#125;</span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                )</span><br><span class="xml">              &#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">SizeContext.Consumer</span>&gt;</span></span><br><span class="xml">          )</span><br><span class="xml">        &#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Middle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Bottom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Bottom</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>如果<code>Consumer</code>向上找不到<code>Provider</code>是，react不会报错，可以通过<code>createContext</code>传入默认值，找不到时会显示默认值</p><p>注意：<code>context</code>类似于全局变量做法，会让组件失去独立性、复用起来更困难，不能滥用、但本身它一定有适合使用的场景，具体看情况使用</p><h2 id="contextType"><a href="#contextType" class="headerlink" title="contextType"></a>contextType</h2><p><code>contextType</code> 可以简化 <code>context</code> 的使用，不使用 <code>consumer</code> 也可以共享变量：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// 创建Context的唯一方法</span><br><span class="hljs-keyword">const</span> ThemeContext = createContext()<br><span class="hljs-keyword">const</span> SizeContext = createContext()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>    <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;small&#x27;</span><br>  &#125;<br>  render () &#123;<br>    <span class="hljs-keyword">const</span> &#123; theme, size &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// 使用 Context.Provider 包裹后续组件，value 指定值 </span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="xml">        &#123;/* 当出现多个Context的时候，只需要将Context.Provider 嵌套即可 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">SizeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;size&#125;</span>&gt;</span></span><br><span class="xml">          &#123;/* 当Context的Provider值更改时，Consumer 的值必须重新渲染 */&#125;</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;this.setState(&#123; theme: &#x27;yellow&#x27;, size: &#x27;big&#x27;&#125;)&#125;&#125;&gt;按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Middle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Middle</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">SizeContext.Provider</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bottom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-comment">// 申明静态变量、contextType 将 context 直接赋值于 contextType</span><br>  <span class="hljs-keyword">static</span> contextType = ThemeContext<br>  <br>  render () &#123;<br>    <span class="hljs-comment">// 在 render 函数中 可以直接 访问 this.context 获取共享变量、这样就可以不使用 consumer</span><br>    <span class="hljs-keyword">const</span> theme = <span class="hljs-built_in">this</span>.context<br>    <span class="hljs-keyword">return</span> (<br>      <span class="hljs-comment">// Context.Consumer Consumer消费者使用Context得值</span><br>      <span class="hljs-comment">// 但子组件不能是其他组件，必须渲染一个函数，函数的参数就是Context得值</span><br>      <span class="hljs-comment">// 当出现 多个Consumer的时候，进行嵌套，每个Consumer 的子组件必须是一个函数，即可</span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>ThemeContext 的 值为 &#123;theme&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Middle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Bottom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Bottom</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p><code>contextType</code>只能在类组件中使用</p><p>一个组件如果有多个<code>consumer</code>，<code>contextType</code>只对其中一个有效，所以<code>contextType</code>只能有一个</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios源码理解</title>
    <link href="/dylan/2022/03/26/axios/"/>
    <url>/dylan/2022/03/26/axios/</url>
    
    <content type="html"><![CDATA[<h2 id="一、axios简介"><a href="#一、axios简介" class="headerlink" title="一、axios简介"></a>一、axios简介</h2><ul><li>支持 Promise API；</li><li>能够拦截请求和响应；</li><li>能够转换请求和响应数据；</li><li>客户端支持防御 <a href="https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF</a> 攻击；</li><li>同时支持浏览器和 Node.js 环境；</li><li>能够取消请求及自动转换 JSON 数据。</li></ul><p>axios源码目录：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 📁 lib</span><br><span class="hljs-meta"># |——  📁 adapters // axios主要使用的请求方法</span><br><span class="hljs-meta"># |——  |——  📃 http.js  // axios中node端使用的请求函数</span><br><span class="hljs-meta"># |——  |——  📃 xhr.js  // axios中浏览器端使用的请求函数</span><br><span class="hljs-meta"># |——  📁 cancel</span><br><span class="hljs-meta"># |——  |——  📃 Cancel.js // 定义了，取消请求返回的信息结构</span><br><span class="hljs-meta"># |——  |——  📃 CancelToken.js // 定义了用于取消请求的主要方法</span><br><span class="hljs-meta"># |——  |——  📃 isCancel.js // 判断是否是取消请求的信息</span><br><span class="hljs-meta"># |——  📁 core</span><br><span class="hljs-meta"># |——  |——  📃 Axios.js // Axios类</span><br><span class="hljs-meta"># |——  |——  📃 dispatchRequest.js // 发起请求的地方 </span><br><span class="hljs-meta"># |——  |——  📃 InterceptorManager.js // InterceptorManager类，拦截器类</span><br><span class="hljs-meta"># |——  |——  📃 mergeConfig.js // 合并配置项</span><br><span class="hljs-meta"># |——  |——  📃 settle.js // 根据请求状态，处理Promise</span><br><span class="hljs-meta"># |——  |——  📃 createError.js // 生成指定的error</span><br><span class="hljs-meta"># |——  |——  📃 enhanceError.js // 指定error对象的toJSON方法</span><br><span class="hljs-meta"># |——  |——  📃 transformData.js // 使用default.js中transformRequest和transformResponse对响应以及请求进行格式化</span><br><span class="hljs-meta"># |——  📁 helpers</span><br><span class="hljs-meta"># |——  |——  📃 bind.js // 工具函数</span><br><span class="hljs-meta"># |——  |——  📃 parseHeaders.js // 将getAllResponseHeaders返回的header信息转化为对象</span><br><span class="hljs-meta"># |——  |——  📃 buildURL.js // 将params参数</span><br><span class="hljs-meta"># |——  |——  📃 cookies.js // 封装了读取，写入，删除cookies的方法</span><br><span class="hljs-meta"># |——  |——  📃 isURLSameOrigin.js // 检测当前的url与请求的url是否同源</span><br><span class="hljs-meta"># |——  |——  📃 normalizeHeaderName.js // 对对象属性名的进行格式化，删除，新建符合大小写规范的属性</span><br><span class="hljs-meta"># |——  |——  📃 combineURLs.js // 组合baseurl</span><br><span class="hljs-meta"># |——  |——  📃 isAbsoluteURL.js // 判断是否为绝对路径（指的://或//开头的为绝对路径）</span><br><span class="hljs-meta"># |——  📃 axios.js</span><br><span class="hljs-meta"># |——  📃 defaults.js // axios中默认配置</span><br><span class="hljs-meta"># |——  📃 utils.js // 一些工具方法</span><br><span class="hljs-meta"># |——  |——  ⏹ isFormData // 判断是否是formData对象</span><br><span class="hljs-meta"># |——  |——  ⏹ isStandardBrowserEnv // 判断当前环境是否为标准浏览器环境</span><br><span class="hljs-meta"># |——  |——  ⏹ isUndefined // 判断是否为undefined</span><br><span class="hljs-meta"># |——  |——  ⏹ merge</span><br><span class="hljs-meta"># |——  |——  ⏹ isURLSearchParams // 判断是否为URLSearchParams对象</span><br></code></pre></td></tr></table></figure><h2 id="二、拦截器"><a href="#二、拦截器" class="headerlink" title="二、拦截器"></a>二、拦截器</h2><p>axios中设置拦截器很简单， 通过<code>axios.interceptors.request</code> 和 <code>axios.interceptors.response</code> 对象提供的 <code>use</code> 方法，就可以分别设置请求拦截器和响应拦截器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加请求拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>&#123;<br>  config.headers.token = <span class="hljs-string">&#x27;added by interceptor&#x27;</span>;<br>  <span class="hljs-keyword">return</span> config;<br>&#125;);<br><br><span class="hljs-comment">// 添加响应拦截器</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>  data.data = data.data + <span class="hljs-string">&#x27; - modified by interceptor&#x27;</span>;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="三、任务注册"><a href="#三、任务注册" class="headerlink" title="三、任务注册"></a>三、任务注册</h2><p>axios和axios.interceptors对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/axios.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createInstance</span>(<span class="hljs-params">defaultConfig</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> context = <span class="hljs-keyword">new</span> Axios(defaultConfig);<br>  <span class="hljs-keyword">var</span> instance = bind(Axios.prototype.request, context);<br><br>  <span class="hljs-comment">// Copy axios.prototype to instance</span><br>  utils.extend(instance, Axios.prototype, context);<br>  <span class="hljs-comment">// Copy context to instance</span><br>  utils.extend(instance, context);<br>  <span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-comment">// Create the default instance to be exported</span><br><span class="hljs-keyword">var</span> axios = createInstance(defaults);<br></code></pre></td></tr></table></figure><p>在axios的源码中，axios实例是通过<code>createInstance</code>方法创建的，该方法最终返回的是<code>axios.prototype.request</code>函数对象，同时axios的构造函数是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/core/Axios.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Axios</span>(<span class="hljs-params">instanceConfig</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.defaults = instanceConfig;<br>  <span class="hljs-built_in">this</span>.interceptors = &#123;<br>    <span class="hljs-attr">request</span>: <span class="hljs-keyword">new</span> InterceptorManager(),<br>    <span class="hljs-attr">response</span>: <span class="hljs-keyword">new</span> InterceptorManager()<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>在构造函数中，找到了<code>axios.interceptors</code>对象的定义，也知道了<code>interceptors.request</code>和<code>interceptors.response</code>对象都是<code>InterceptorManager</code>类的实例。由<code>InterceptorsManager</code>构造函数及其<code>use</code>可知道任务注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/core/InterceptorManager.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">InterceptorManager</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.handlers = [];<br>&#125;<br><br>InterceptorManager.prototype.use = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">use</span>(<span class="hljs-params">fulfilled, rejected</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.handlers.push(&#123;<br>    <span class="hljs-attr">fulfilled</span>: fulfilled,<br>    <span class="hljs-attr">rejected</span>: rejected<br>  &#125;);<br>  <span class="hljs-comment">// 返回当前的索引，用于移除已注册的拦截器</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.handlers.length - <span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>通过<code>use</code>方法，可知注册的拦截器会被保存到<code>InterceptorManager</code>对象的<code>handlers</code>属性中。</p><h2 id="四、任务编排"><a href="#四、任务编排" class="headerlink" title="四、任务编排"></a>四、任务编排</h2><p>关于HTTP请求可分为处理请求配置对象、发起HTTP请求和处理响应对象3个阶段。</p><p>关于axios如何发送请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">axios(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/hello&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;axios res: &#x27;</span>, res)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;axios res.data: &#x27;</span>, res.data)<br>&#125;)<br></code></pre></td></tr></table></figure><p>关于<code>axios.prototype.request</code>具体实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/core/Axios.js</span><br>Axios.prototype.request = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>) </span>&#123;<br>  config = mergeConfig(<span class="hljs-built_in">this</span>.defaults, config);<br><br>  <span class="hljs-comment">// 省略部分代码</span><br>  <span class="hljs-keyword">var</span> chain = [dispatchRequest, <span class="hljs-literal">undefined</span>];<br>  <span class="hljs-keyword">var</span> promise = <span class="hljs-built_in">Promise</span>.resolve(config);<br><br>  <span class="hljs-comment">// 任务编排</span><br>  <span class="hljs-built_in">this</span>.interceptors.request.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unshiftRequestInterceptors</span>(<span class="hljs-params">interceptor</span>) </span>&#123;<br>    chain.unshift(interceptor.fulfilled, interceptor.rejected);<br>  &#125;);<br><br>  <span class="hljs-built_in">this</span>.interceptors.response.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pushResponseInterceptors</span>(<span class="hljs-params">interceptor</span>) </span>&#123;<br>    chain.push(interceptor.fulfilled, interceptor.rejected);<br>  &#125;);<br><br>  <span class="hljs-comment">// 任务调度</span><br>  <span class="hljs-keyword">while</span> (chain.length) &#123;<br>    promise = promise.then(chain.shift(), chain.shift());<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> promise;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="五、任务调度"><a href="#五、任务调度" class="headerlink" title="五、任务调度"></a>五、任务调度</h2><p>axios中具体的调度方式很简单，具体如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// lib/core/Axios.js</span><br>Axios.prototype.request = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>) </span>&#123;<br>  <span class="hljs-comment">// 省略部分代码</span><br>  <span class="hljs-keyword">var</span> promise = <span class="hljs-built_in">Promise</span>.resolve(config);<br>  <span class="hljs-keyword">while</span> (chain.length) &#123;<br>    promise = promise.then(chain.shift(), chain.shift());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为chain是数组，所以可以通过while语句不断地取出设置的任务，然后组装成Promise调用链从而实现任务调度。</p><p>Axios通过提供拦截器机制，让开发者可以很容易的在请求的生命周期中自定义不同的处理逻辑，比如Axios生态中列举的axios-response-logger和axios-debug-log这两个库。</p><h2 id="六、HTTP适配的设计与实现"><a href="#六、HTTP适配的设计与实现" class="headerlink" title="六、HTTP适配的设计与实现"></a>六、HTTP适配的设计与实现</h2><p>axios同时支持浏览器和Node.js环境，对于浏览器可以通过<code>XMLHttpRequest</code>或<code>fetch</code>API来发送HTTP请求，而对于Node.js环境来说，可以通过Node.js内置<code>http</code>或<code>https</code>模块来发送HTTP请求。</p><p>在HTTP拦截器设计部分，有<code>dispatchRequest</code>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/core/dispatchRequest.js</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatchRequest</span>(<span class="hljs-params">config</span>) </span>&#123;<br>  <span class="hljs-comment">// 省略部分代码</span><br>  <span class="hljs-keyword">var</span> adapter = config.adapter || defaults.adapter;<br>  <br>  <span class="hljs-keyword">return</span> adapter(config).then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onAdapterResolution</span>(<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-comment">// 省略部分代码</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onAdapterRejection</span>(<span class="hljs-params">reason</span>) </span>&#123;<br>    <span class="hljs-comment">// 省略部分代码</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(reason);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>默认的适配器就会包含浏览器和Node.js环境的适配代码，其具体的适配逻辑如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/defaults.js</span><br><span class="hljs-keyword">var</span> defaults = &#123;<br>  <span class="hljs-attr">adapter</span>: getDefaultAdapter(),<br>  <span class="hljs-attr">xsrfCookieName</span>: <span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>,<br>  <span class="hljs-attr">xsrfHeaderName</span>: <span class="hljs-string">&#x27;X-XSRF-TOKEN&#x27;</span>,<br>  <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDefaultAdapter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> adapter;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> XMLHttpRequest !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-comment">// For browsers use XHR adapter</span><br>    adapter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./adapters/xhr&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> process !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <br>    <span class="hljs-built_in">Object</span>.prototype.toString.call(process) === <span class="hljs-string">&#x27;[object process]&#x27;</span>) &#123;<br>    <span class="hljs-comment">// For node use HTTP adapter</span><br>    adapter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./adapters/http&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> adapter;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、Axios-CSRF防御"><a href="#七、Axios-CSRF防御" class="headerlink" title="七、Axios CSRF防御"></a>七、Axios CSRF防御</h2><p>Axios 提供了 <code>xsrfCookieName</code> 和 <code>xsrfHeaderName</code> 两个属性来分别设置 CSRF 的 Cookie 名称和 HTTP 请求头的名称，它们的默认值如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/defaults.js</span><br><span class="hljs-keyword">var</span> defaults = &#123;<br>  <span class="hljs-attr">adapter</span>: getDefaultAdapter(),<br><br>  <span class="hljs-comment">// 省略部分代码</span><br>  <span class="hljs-attr">xsrfCookieName</span>: <span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>,<br>  <span class="hljs-attr">xsrfHeaderName</span>: <span class="hljs-string">&#x27;X-XSRF-TOKEN&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在浏览器中，Axios防御CSRF攻击：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/adapters/xhr.js</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xhrAdapter</span>(<span class="hljs-params">config</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatchXhrRequest</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> requestHeaders = config.headers;<br>    <br>    <span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    <span class="hljs-comment">// 省略部分代码</span><br>    <br>    <span class="hljs-comment">// 添加xsrf头部</span><br>    <span class="hljs-keyword">if</span> (utils.isStandardBrowserEnv()) &#123;<br>      <span class="hljs-keyword">var</span> xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) &amp;&amp; config.xsrfCookieName ?<br>        cookies.read(config.xsrfCookieName) :<br>        <span class="hljs-literal">undefined</span>;<br><br>      <span class="hljs-keyword">if</span> (xsrfValue) &#123;<br>        requestHeaders[config.xsrfHeaderName] = xsrfValue;<br>      &#125;<br>    &#125;<br><br>    request.send(requestData);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="八、源码分析总结"><a href="#八、源码分析总结" class="headerlink" title="八、源码分析总结"></a>八、源码分析总结</h2><p>axios和Axios</p><p>1.从语法上说：axios不是Axios的实例</p><p>2.从功能上说：axios是Axios的实例</p><p>3.axios是Axios.prototype.request函数的bind（）返回的函数</p><p>4.axios作为对象有Axios原型对象上的所有方法， 有Axios对象上所有属性</p><p>instance与axios的区别</p><p>相同：</p><p>（1）都是一个能发任意请求的函数：request（config）</p><p>（2）都是发特定请求的各种方法：get()/post()/put()/delete()</p><p>（3）都是默认配置和拦截器的属性：defalts/interceptors</p><p>不同：</p><p>（1）默认配置很可能不一样</p><p>（2）instance没有axios后面添加的一些方法：create()/CancelToken()/all()</p><p> 请求拦截与响应拦截</p><p>如果设置了多个请求拦截器，后设置的先执行</p><p>如果设置了多个响应拦截器，先设置的先执行</p><p>dispatchRequest主要做了如下几件事：</p><p>1.如果已经取消，则 <code>throw</code> 原因报错，使<code>Promise</code>走向<code>rejected</code>。<br> 2.确保 <code>config.header</code> 存在。<br> 3.利用用户设置的和默认的请求转换器转换数据。<br> 4.拍平 <code>config.header</code>。<br> 5.删除一些 <code>config.header</code>。<br> 6.返回适配器<code>adapter</code>（<code>Promise</code>实例）执行后 <code>then</code>执行后的 <code>Promise</code>实例。返回结果传递给响应拦截器处理。</p><p>转换器做的事情完全可以由拦截器去做</p><p>取消流程调用栈：</p><p>1.source.cancel()<br>2.resolvePromise(token.reason);<br>3.config.cancelToken.promise.then(function onCanceled(cancel) {})</p><p>主要是通过传递配置参数cancelToken，取消时才会生成cancelToken，判断有，则抛出错误，时Promise走向rejected，让用户捕获到消息。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的 dom 操作</title>
    <link href="/dylan/2022/02/09/dom/"/>
    <url>/dylan/2022/02/09/dom/</url>
    
    <content type="html"><![CDATA[<h2 id="一、DOM"><a href="#一、DOM" class="headerlink" title="一、DOM"></a>一、DOM</h2><p>文档对象模型 (DOM) 是 <code>HTML</code> 和 <code>XML</code> 文档的编程接口</p><p>它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容</p><p>任何 <code>HTML </code>或<code>XML</code>文档都可以用 <code>DOM </code>表示为一个由节点构成的层级结构</p><p>节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!&lt;/p &gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>DOM</code>像原子包含着亚原子微粒那样，也有很多类型的<code>DOM</code>节点包含着其他类型的节点。接下来我们先看看其中的三种：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>        content<br>    &lt;/p &gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述结构中，<code>div</code>、<code>p</code>就是元素节点，<code>content</code>就是文本节点，<code>title</code>就是属性节点</p><h2 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h2><p>日常前端开发，我们都离不开<code>DOM</code>操作</p><p>在以前，我们使用<code>Jquery</code>，<code>zepto</code>等库来操作<code>DOM</code>，之后在<code>vue</code>，<code>Angular</code>，<code>React</code>等框架出现后，我们通过操作数据来控制<code>DOM</code>（绝大多数时候），越来越少的去直接操作<code>DOM</code></p><p>但这并不代表原生操作不重要。相反，<code>DOM</code>操作才能有助于我们理解框架深层的内容</p><p>下面就来分析<code>DOM</code>常见的操作，主要分为：</p><ul><li>创建节点</li><li>查询节点</li><li>更新节点</li><li>添加节点</li><li>删除节点</li></ul><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><h4 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h4><p>创建新元素，接受一个参数，即要创建元素的标签名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> divEl = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h4><p>创建一个文本节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> textEl = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;content&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h4><p>用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到<code>DOM</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fragment = <span class="hljs-built_in">document</span>.createDocumentFragment();<br></code></pre></td></tr></table></figure><p>当请求把一个<code>DocumentFragment</code> 节点插入文档树时，插入的不是 <code>DocumentFragment </code>自身，而是它的所有子孙节点</p><h4 id="createAttribute"><a href="#createAttribute" class="headerlink" title="createAttribute"></a>createAttribute</h4><p>创建属性节点，可以是自定义属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dataAttribute = <span class="hljs-built_in">document</span>.createAttribute(<span class="hljs-string">&#x27;custom&#x27;</span>);<br>consle.log(dataAttribute);<br></code></pre></td></tr></table></figure><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><h4 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h4><p>传入任何有效的<code> css</code> 选择器，即可选中单个 <code>DOM </code>元素（首个）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.element&#x27;</span>)<br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#element&#x27;</span>)<br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;[name=&quot;username&quot;]&#x27;</span>)<br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div + p &gt; span&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果页面上没有指定的元素时，返回 <code>null</code></p><h4 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h4><p>返回一个包含节点子树内所有与之相匹配的<code>Element</code>节点列表，如果没有相匹配的，则返回一个空节点列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> notLive = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;p&quot;</span>);<br></code></pre></td></tr></table></figure><p>需要注意的是，该方法返回的是一个 <code>NodeList </code>的静态实例，它是一个静态的“快照”，而非“实时”的查询</p><p>关于获取<code>DOM</code>元素的方法还有如下，就不一一述说</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;id属性值&#x27;</span>);返回拥有指定id的对象的引用<br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;class属性值&#x27;</span>);返回拥有指定<span class="hljs-class"><span class="hljs-keyword">class</span>的对象集合</span><br><span class="hljs-class"><span class="hljs-title">document</span>.<span class="hljs-title">getElementsByTagName</span>(&#x27;标签名&#x27;)</span>;返回拥有指定标签名的对象集合<br><span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&#x27;name属性值&#x27;</span>); 返回拥有指定名称的对象结合<br><span class="hljs-built_in">document</span>/element.querySelector(<span class="hljs-string">&#x27;CSS选择器&#x27;</span>);  仅返回第一个匹配的元素<br><span class="hljs-built_in">document</span>/element.querySelectorAll(<span class="hljs-string">&#x27;CSS选择器&#x27;</span>);   返回所有匹配的元素<br><span class="hljs-built_in">document</span>.documentElement;  获取页面中的HTML标签<br><span class="hljs-built_in">document</span>.body; 获取页面中的BODY标签<br><span class="hljs-built_in">document</span>.all[<span class="hljs-string">&#x27;&#x27;</span>];  获取页面中的所有元素节点的对象集合型<br></code></pre></td></tr></table></figure><p>除此之外，每个<code>DOM</code>元素还有<code>parentNode</code>、<code>childNodes</code>、<code>firstChild</code>、<code>lastChild</code>、<code>nextSibling</code>、<code>previousSibling</code>属性，关系图如下图所示</p><p><img src="/dylan/imgs/dom/1.png" alt="图1"></p><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>不但可以修改一个<code>DOM</code>节点的文本内容，还可以直接通过<code>HTML</code>片段修改<code>DOM</code>节点内部的子树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取&lt;p id=&quot;p&quot;&gt;...&lt;/p &gt;</span><br><span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-comment">// 设置文本为abc:</span><br>p.innerHTML = <span class="hljs-string">&#x27;ABC&#x27;</span>; <span class="hljs-comment">// &lt;p id=&quot;p&quot;&gt;ABC&lt;/p &gt;</span><br><span class="hljs-comment">// 设置HTML:</span><br>p.innerHTML = <span class="hljs-string">&#x27;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#x27;</span>;<br><span class="hljs-comment">// &lt;p&gt;...&lt;/p &gt;的内部结构已修改</span><br></code></pre></td></tr></table></figure><h4 id="innerText、textContent"><a href="#innerText、textContent" class="headerlink" title="innerText、textContent"></a>innerText、textContent</h4><p>自动对字符串进行<code>HTML</code>编码，保证无法设置任何<code>HTML</code>标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span><br><span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;p-id&#x27;</span>);<br><span class="hljs-comment">// 设置文本:</span><br>p.innerText = <span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;Hi&quot;)&lt;/script&gt;&#x27;</span>;<br><span class="hljs-comment">// HTML被自动编码，无法设置一个&lt;script&gt;节点:</span><br><span class="hljs-comment">// &lt;p id=&quot;p-id&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Hi&quot;)&amp;lt;/script&amp;gt;&lt;/p &gt;</span><br></code></pre></td></tr></table></figure><p>两者的区别在于读取属性时，<code>innerText</code>不返回隐藏元素的文本，而<code>textContent</code>返回所有文本</p><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p><code>DOM</code>节点的<code>style</code>属性对应所有的<code>CSS</code>，可以直接获取或设置。遇到<code>-</code>需要转化为驼峰命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;p-id&#x27;</span>);<br><span class="hljs-comment">// 设置CSS:</span><br>p.style.color = <span class="hljs-string">&#x27;#ff0000&#x27;</span>;<br>p.style.fontSize = <span class="hljs-string">&#x27;20px&#x27;</span>; <span class="hljs-comment">// 驼峰命名</span><br>p.style.paddingTop = <span class="hljs-string">&#x27;2em&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><h4 id="innerHTML-1"><a href="#innerHTML-1" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>如果这个DOM节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用<code>innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;</code>就可以修改<code>DOM</code>节点的内容，相当于添加了新的<code>DOM</code>节点</p><p>如果这个DOM节点不是空的，那就不能这么做，因为<code>innerHTML</code>会直接替换掉原来的所有子节点</p><h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h4><p>把一个子节点添加到父节点的最后一个子节点</p><p>举个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript&lt;/p &gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>Java&lt;/p &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;python&quot;</span>&gt;</span>Python&lt;/p &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scheme&quot;</span>&gt;</span>Scheme&lt;/p &gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加一个<code>p</code>元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> js = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;js&#x27;</span>)<br>js.innerHTML = <span class="hljs-string">&quot;JavaScript&quot;</span><br><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;list&#x27;</span>);<br>list.appendChild(js);<br></code></pre></td></tr></table></figure><p>现在<code>HTML</code>结构变成了下面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>Java&lt;/p &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;python&quot;</span>&gt;</span>Python&lt;/p &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scheme&quot;</span>&gt;</span>Scheme&lt;/p &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript&lt;/p &gt;  <span class="hljs-comment">&lt;!-- 添加元素 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述代码中，我们是获取<code>DOM</code>元素后再进行添加操作，这个<code>js</code>节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置</p><p>如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;list&#x27;</span>),<br><span class="hljs-keyword">const</span> haskell = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);<br>haskell.id = <span class="hljs-string">&#x27;haskell&#x27;</span>;<br>haskell.innerText = <span class="hljs-string">&#x27;Haskell&#x27;</span>;<br>list.appendChild(haskell);<br></code></pre></td></tr></table></figure><h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h4><p>把子节点插入到指定的位置，使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">parentElement.insertBefore(newElement, referenceElement)<br></code></pre></td></tr></table></figure><p>子节点会插入到<code>referenceElement</code>之前</p><h4 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h4><p>在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;id&#x27;</span>)<br>div.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;white&#x27;</span>);<span class="hljs-comment">//第一个参数属性名，第二个参数属性值。</span><br></code></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的<code>removeChild</code>把自己删掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 拿到待删除节点:</span><br><span class="hljs-keyword">const</span> self = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;to-be-removed&#x27;</span>);<br><span class="hljs-comment">// 拿到父节点:</span><br><span class="hljs-keyword">const</span> parent = self.parentElement;<br><span class="hljs-comment">// 删除:</span><br><span class="hljs-keyword">const</span> removed = parent.removeChild(self);<br>removed === self; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax的使用、axios二次封装、fetch封装</title>
    <link href="/dylan/2022/01/20/ajax/"/>
    <url>/dylan/2022/01/20/ajax/</url>
    
    <content type="html"><![CDATA[<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ol><li><p>ajax</p><p>（1）本身是针对MVC的编程,不符合现在前端MVVM的浪潮</p><p>（2）基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案</p><p>（3）JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务）</p></li><li><p>axios</p><p>（1）从 node.js 创建 http 请求</p><p>（2）支持 Promise API</p><p>（3）客户端支持防止CSRF</p><p>（4）提供了一些并发请求的接口（重要，方便了很多的操作）</p></li><li><p>fetch</p><p>（1）符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里<br>（2）更好更方便的写法<br>（3）更加底层，提供的API丰富（request, response）<br>（4）脱离了XHR，是ES规范里新的实现方式<br>（5）fetchtch只对网络请求报错，对400，500都当做成功的请求，需要封装去处理<br>（6）fetch默认不会带cookie，需要添加配置项<br>（7）fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了量的浪费<br>（8）fetch没有办法原生监测请求的进度，而XHR可以</p></li></ol><h2 id="简易node服务器"><a href="#简易node服务器" class="headerlink" title="简易node服务器"></a>简易node服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>) <span class="hljs-comment">//npm i express</span><br><span class="hljs-keyword">var</span> app = express()<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>) <span class="hljs-comment">// npm i body-parser</span><br>app.use(bodyParser.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;)) <span class="hljs-comment">// post请求解析body内容参数</span><br>app.use(bodyParser.json())<br>app.post(<span class="hljs-string">&#x27;/register&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;a,b&#125; = req.body<br>    res.header(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, req.headers.origin) <span class="hljs-comment">// 简单解决跨域</span><br>    res.send(&#123;<span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;注册成功&#x27;</span>,<span class="hljs-attr">data</span>:&#123;a,b&#125;&#125;)<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/login&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;a,b&#125; = req.query<br>    res.header(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, req.headers.origin)<br>    res.send(&#123;<span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;登录成功&#x27;</span>,<span class="hljs-attr">data</span>:&#123;a,b&#125;&#125;)<br>&#125;)<br>app.listen(<span class="hljs-number">8011</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;启动成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>启动一个简易node服务便于后边的http请求验证</p><p><img src="/dylan/imgs/ajax/1.jpg" alt="1"></p><p><img src="/dylan/imgs/ajax/2.jpg" alt="2"></p><h2 id="ajax使用"><a href="#ajax使用" class="headerlink" title="ajax使用"></a>ajax使用</h2><p>html:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>发送get请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>发送post请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn1.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 1. 创建对象</span><br>          <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>          <span class="hljs-comment">// 2. 初始化 设置请求方法和url</span><br>          xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8011/login?a=100&amp;b=200&#x27;</span>);<br>          <span class="hljs-comment">// 3. 发送</span><br>          xhr.send();<br>          <span class="hljs-comment">// 4.事件绑定 处理服务器返回的结果</span><br>          <span class="hljs-comment">// on when 当 ... 的时候</span><br>          <span class="hljs-comment">// readystate 是xhr对象中的属性，表示状态 0 1 2 3 4 </span><br>          <span class="hljs-comment">// 0 初始化的属性状态</span><br>          <span class="hljs-comment">// 1 open方法已经调用完毕</span><br>          <span class="hljs-comment">// 2 send方法调用完毕</span><br>          <span class="hljs-comment">// 3 服务端返回了部分结果</span><br>          <span class="hljs-comment">// 4 服务端返回了所有的结果</span><br>          <span class="hljs-comment">// change 改变的时候触发</span><br>          <span class="hljs-comment">// 下面的函数会被触发四次，状态每改变一次，就会触发一次</span><br>          xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-comment">// 判断（服务端返回了所有的结果）</span><br>              <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>                  <span class="hljs-comment">// 判断响应状态码</span><br>                  <span class="hljs-keyword">if</span> (xhr.state &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.state &lt; <span class="hljs-number">300</span>) &#123;<br>                      <span class="hljs-comment">// 处理结果</span><br>                      <span class="hljs-comment">// console.log(xhr.status); // 状态码</span><br>                      <span class="hljs-comment">// console.log(xhr.statusText); // 状态字符串</span><br>                      <span class="hljs-comment">// console.log(xhr.getAllResponseHeaders()); // 所有响应头</span><br>                      <span class="hljs-comment">// console.log(xhr.response); // 响应体</span><br>                      <span class="hljs-comment">// 设置result 的文本</span><br>                      result.innerHTML = xhr.response;<br>                  &#125;<br>              &#125;<br>          &#125;<br>      &#125;<br>      btn2.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>          xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:8011/register&#x27;</span>);<br>          xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br>          xhr.send(<span class="hljs-string">&#x27;a=100&amp;b=200&#x27;</span>);<br>          xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>                  <span class="hljs-keyword">if</span> (xhr.state &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.state &lt; <span class="hljs-number">300</span>) &#123;<br>                      result.innerHTML = xhr.response;<br>                  &#125;<br>              &#125;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="axios二次封装"><a href="#axios二次封装" class="headerlink" title="axios二次封装"></a>axios二次封装</h2><p>利用node环境判断请求地址，用来区分开发、生产环境</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&#x27;development&#x27;</span>) &#123;<br>  axios.defaults.baseURL = <span class="hljs-string">&#x27;http://dev.xxx.com&#x27;</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  axios.defaults.baseURL = <span class="hljs-string">&#x27;http://prod.xxx.com&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在本地调试中，在 vue.config.js 文件中配置 devServer 实现代理转发，从而解决跨域问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">devServer: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/proxyApi&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://dev.xxx.com&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-string">&#x27;/proxyApi&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>封装请求头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>    ...<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">30000</span>,  <span class="hljs-comment">// 请求 30s 超时</span><br>   <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-attr">get</span>: &#123;<br>          <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span><br>          <span class="hljs-comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span><br>        &#125;,<br>        <span class="hljs-attr">post</span>: &#123;<br>          <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span><br>          <span class="hljs-comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span><br>        &#125;<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>封装请求方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// get 请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">httpGet</span>(<span class="hljs-params">&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  url,</span></span><br><span class="hljs-params"><span class="hljs-function">  params = &#123;&#125;</span></span><br><span class="hljs-params"><span class="hljs-function">&#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios.get(url, &#123;<br>      params<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      resolve(res.data)<br>    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>      reject(err)<br>    &#125;)<br>  &#125;)<br>&#125;<br> <br><span class="hljs-comment">// post</span><br><span class="hljs-comment">// post请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">httpPost</span>(<span class="hljs-params">&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  url,</span></span><br><span class="hljs-params"><span class="hljs-function">  data = &#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function">  params = &#123;&#125;</span></span><br><span class="hljs-params"><span class="hljs-function">&#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios(&#123;<br>      url,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>      <span class="hljs-attr">transformRequest</span>: [<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> ret = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> it <span class="hljs-keyword">in</span> data) &#123;<br>          ret += <span class="hljs-built_in">encodeURIComponent</span>(it) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[it]) + <span class="hljs-string">&#x27;&amp;&#x27;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ret<br>      &#125;],<br>      <span class="hljs-comment">// 发送的数据</span><br>      data,<br>      <span class="hljs-comment">// url参数</span><br>      params<br> <br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      resolve(res.data)<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>把封装的方法放在一个 api.js 文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; httpGet, httpPost &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./http&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getorglist = <span class="hljs-function">(<span class="hljs-params">params = &#123;&#125;</span>) =&gt;</span> httpGet(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;apps/api/org/list&#x27;</span>, params &#125;)<br></code></pre></td></tr></table></figure><p>页面中就能直接调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// .vue</span><br><span class="hljs-keyword">import</span> &#123; getorglist &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/assets/js/api&#x27;</span><br> <br>getorglist(&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">200</span> &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(res)<br>&#125;)<br></code></pre></td></tr></table></figure><p>请求拦截器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 请求拦截器</span><br>axios.interceptors.request.use(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 每次发送请求之前判断是否存在token</span><br>    <span class="hljs-comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的</span><br>    token &amp;&amp; (config.headers.Authorization = token)<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.error(error)<br>  &#125;)<br></code></pre></td></tr></table></figure><p>响应拦截器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 响应拦截器</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span><br>  <span class="hljs-comment">// 否则的话抛出错误</span><br>  <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-keyword">if</span> (response.data.code === <span class="hljs-number">511</span>) &#123;<br>      <span class="hljs-comment">// 未授权调取授权接口</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (response.data.code === <span class="hljs-number">510</span>) &#123;<br>      <span class="hljs-comment">// 未登录跳转登录页</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(response)<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(response)<br>  &#125;<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 我们可以在这里对异常状态作统一处理</span><br>  <span class="hljs-keyword">if</span> (error.response.status) &#123;<br>    <span class="hljs-comment">// 处理请求失败的情况</span><br>    <span class="hljs-comment">// 对不同返回码对相应处理</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error.response)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>请求头、请求方法、拦截可以放在 axios.js 一个文件中</p><h2 id="fetch封装"><a href="#fetch封装" class="headerlink" title="fetch封装"></a>fetch封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> TIME_OUT = <span class="hljs-number">6000</span>; <span class="hljs-comment">// 超时时间</span><br><span class="hljs-keyword">const</span> TOKEN = <span class="hljs-string">&#x27;token&#x27;</span>; <span class="hljs-comment">// 自定义token</span><br><span class="hljs-keyword">const</span> ContentType = &#123; <span class="hljs-comment">// ContentType 映射表</span><br>  <span class="hljs-attr">json</span>:<span class="hljs-string">&#x27;application/json;charset=UTF-8&#x27;</span>, <span class="hljs-comment">// json数据格式</span><br>  <span class="hljs-attr">form</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>, <span class="hljs-comment">// 表单数据格式</span><br>  <span class="hljs-attr">download</span>: <span class="hljs-string">&#x27;application/octet-stream&#x27;</span> <span class="hljs-comment">// 二进制文件流格式，用于download</span><br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@name </span>基础fetch</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>url 请求path</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>options feich请求配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">baseFetch</span>(<span class="hljs-params">url, options</span>) </span>&#123;<br><br>  <span class="hljs-comment">// 基础配置</span><br>  <span class="hljs-keyword">const</span> baseOptions = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-comment">// 默认GET请求</span><br>    <span class="hljs-attr">headers</span>: &#123; <span class="hljs-comment">// 默认请求头</span><br>      <span class="hljs-string">&quot;Content-type&quot;</span>: ContentType.json <span class="hljs-comment">// 默认json数据格式</span><br>    &#125;,<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * include:</span><br><span class="hljs-comment">     * 默认不论是不是跨域的请求</span><br><span class="hljs-comment">     * 总是发送请求资源域在本地的 cookies、HTTP Basic authentication 等验证信息</span><br><span class="hljs-comment">     * omit: 从不发送cookies</span><br><span class="hljs-comment">     * same-origin: 同源发送cookies</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span><br>  &#125;;<br><br>  <span class="hljs-comment">// merge options</span><br>  options = <span class="hljs-built_in">Object</span>.assign(baseOptions, options);<br><br>  <span class="hljs-keyword">const</span> &#123;method, body&#125; = options;<br><br>  <span class="hljs-comment">// get请求没有请求体，需要将参数拼接到url上</span><br>  <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;GET&#x27;</span> &amp;&amp; <span class="hljs-built_in">Object</span>.isObject(body)) &#123;<br>    <span class="hljs-keyword">const</span> paramsArray = [];<br>    <span class="hljs-built_in">Object</span>.keys(body).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span><br>        paramsArray.push(key + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(body[key]))<br>    );<br>    <span class="hljs-keyword">if</span> (url.search(<span class="hljs-regexp">/\?/</span>) === -<span class="hljs-number">1</span>) &#123;<br>        url += <span class="hljs-string">&quot;?&quot;</span> + paramsArray.join(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        url += <span class="hljs-string">&quot;&amp;&quot;</span> + paramsArray.join(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 删除请求体属性</span><br>    <span class="hljs-keyword">delete</span> options.body;<br>  &#125;<br><br>  <span class="hljs-comment">// request interceptors</span><br>  <span class="hljs-comment">// 查看当前本地是否有token, 如果有，设置自定义headers中TOKEN</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-built_in">localStorage</span>.getItem(TOKEN);<br>  <span class="hljs-keyword">if</span> (token) options.headers[<span class="hljs-string">&quot;TOKEN&quot;</span>] = token;<br><br>  <span class="hljs-comment">// 利用 Promise.race 实现超时拦截</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.race([<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;request timeout&#x27;</span>));<br>      &#125;, TIME_OUT);<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">window</span>.fetch(url, options)<br>        .then(<span class="hljs-keyword">async</span> res =&gt; &#123;<br><br>          <span class="hljs-comment">// response interceptors 状态码拦截，对应异常状态吗do something</span><br>          <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/^(2|3)\d&#123;2&#125;$/</span>.test(res.status)) &#123;<br>              <span class="hljs-keyword">switch</span>(res.status) &#123;<br>                  <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:     <span class="hljs-comment">//当前用户需要验证（一般是未登陆）</span><br>                      <span class="hljs-keyword">break</span>    <span class="hljs-comment">//一般可以弹出遮盖层，或者回到登陆页面</span><br>                  <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:     <span class="hljs-comment">// 服务器理解请求，但是拒绝执行，一般是token，session过期</span><br>                      <span class="hljs-built_in">localStorage</span>.removeItem(TOKEN) <br>                      <span class="hljs-keyword">break</span><br>                  <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:     <span class="hljs-comment">// 找不到页面(请求失败，资源在服务器上未找到)，可以给一个友好的提示</span><br>                      <span class="hljs-keyword">break</span>     <br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(res)<br>          &#125;<br>          <span class="hljs-comment">// response interceptors cookies拦截器，存入token</span><br>          <span class="hljs-keyword">if</span> (res.headers[<span class="hljs-string">&#x27;set-cookies&#x27;</span>]) &#123;<br>            <span class="hljs-built_in">localStorage</span>.setItem(TOKEN, res.headers[<span class="hljs-string">&#x27;set-cookies&#x27;</span>]);<br>          &#125;<br><br>          <span class="hljs-comment">// return data</span><br>          <span class="hljs-keyword">const</span> data = options.headers[<span class="hljs-string">&#x27;Content-type&#x27;</span>] === ContentType.download ? res.blob() : res.json();<br>          resolve(data);<br>        &#125;)<br>        .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>          reject(err);<br>        &#125;);<br>    &#125;)<br>  ])<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchGet = <span class="hljs-function">(<span class="hljs-params">url, params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> baseFetch(url, &#123;<span class="hljs-attr">body</span>: params&#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchPost = <span class="hljs-function">(<span class="hljs-params">url, params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> baseFetch(url, &#123;<span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(params)&#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchDownload = <span class="hljs-function">(<span class="hljs-params">url, params</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> baseFetch(url, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(params),<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&quot;Content-type&quot;</span>: ContentType.download<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>综合</tag>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型、原型链、原型链继承</title>
    <link href="/dylan/2022/01/10/prototype/"/>
    <url>/dylan/2022/01/10/prototype/</url>
    
    <content type="html"><![CDATA[<p><img src="/dylan/imgs/prototype/1.jpg" alt="图1"></p><p>开局一张图，剩下全靠“编”</p><h2 id="原型、原型链"><a href="#原型、原型链" class="headerlink" title="原型、原型链"></a>原型、原型链</h2><p><code>prototype</code>：原型</p><p><code>__prototype__</code>：原型链（链接点）</p><p>每个函数对象上都有拥有这两个属性</p><h2 id="从属关系"><a href="#从属关系" class="headerlink" title="从属关系"></a>从属关系</h2><p><code>prototype</code>：函数的一个属性：对象{}</p><p><code>__proto__</code>：对象 Object 的一个属性：对象{}</p><p>对象的<code>__proto__</code>保存着该对象的构造函数的<code>prototype</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-built_in">console</span>.log(Test.prototype)<br><span class="hljs-keyword">const</span> test = <span class="hljs-keyword">new</span> Test()<br><span class="hljs-built_in">console</span>.log(test.__proto__)<br><span class="hljs-built_in">console</span>.log(test.__proto__===Test.prototype)<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(Test.prototype.__proto__===<span class="hljs-built_in">Object</span>.prototype) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__) <span class="hljs-comment">//null</span><br></code></pre></td></tr></table></figure><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br><span class="hljs-keyword">const</span> test = <span class="hljs-keyword">new</span> Test()<br>test.a = <span class="hljs-number">1</span><br>Test.prototype.b = <span class="hljs-number">2</span><br><span class="hljs-built_in">Object</span>.prototype.c = <span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(test.a) <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(test.b)<span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(test.c)<span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>虽然 test 没有 b 和 c 属性，但是 test 是由 Test 构造而来，所以 test 的<code>__proto__</code>会指向 Test 的<code>prototype</code>，从而继承了 Test 的原型对象属性，那么 b 属性会在 Test 的原型对象找到，c 属性会在 Object 的原型对象找到，就这样一层一层的找，直到最顶层也就是   Object.prototype。</p><h2 id="Function与Object的特殊性"><a href="#Function与Object的特殊性" class="headerlink" title="Function与Object的特殊性"></a>Function与Object的特殊性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span>.__proto__===<span class="hljs-built_in">Function</span>.prototype) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__) <span class="hljs-comment">//null</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.__proto__===<span class="hljs-built_in">Function</span>.prototype) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.__proto__===<span class="hljs-built_in">Function</span>.__proto__) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ol><li>Function的<code>__proto__</code>指向Function的<code>prototype</code>，这是底层决定的。</li><li>底层决定</li><li>因为 Object 的结构是 function Object(){native code}</li><li>由3可得出</li><li>由1，3可得出</li><li>函数实际也是一个函数对象</li><li>同理3</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>判断属性是否存在：Object.hasOwnProperty</p><p>找链上是否有属性：‘属性’ in 函数对象</p><p>constructor -&gt; 实例化函数对象的构造函数 </p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的 meta 元素</title>
    <link href="/dylan/2022/01/02/meta/"/>
    <url>/dylan/2022/01/02/meta/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>&lt;meta&gt;</code> 元素标签是提供有关HTML文档的元数据，元数据不会显示在页面上，但是能够被机器识别。</p><p>总而言之, meta标签是用来让机器识别的，同时它对SEO起着重要的作用。</p><h2 id="charset"><a href="#charset" class="headerlink" title="charset"></a>charset</h2><p>指定了html文档的编码格式，常用的是utf-8(Unicode的字符编码)，还有ISO-8859-1(拉丁字母的字符编码)。当然还有其他的，但是一般不常用也就不介绍了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="name-amp-content"><a href="#name-amp-content" class="headerlink" title="name &amp; content"></a>name &amp; content</h2><p>指定元数据的名称(这部分对SEO非常有用)</p><ul><li>author——定义了页面的作者</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Tony&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>keywords——为搜索引擎提供关键字</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;HTML, CSS, JavaScript&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>description——对网页整体的描述</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;My tutorials on HTML, CSS and JavaScript&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>viewport——对页面视图相关进行定义</li></ul><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">width</span>=device-width——将页面宽度设置为跟随屏幕宽度变化而变化<br><span class="hljs-attribute">initial</span>-scale=<span class="hljs-number">1</span>.<span class="hljs-number">0</span>——设置浏览器首次加载页面时的初始缩放比例(<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">10</span>.<span class="hljs-number">0</span>正数)<br><span class="hljs-attribute">maximum</span>-scale=<span class="hljs-number">1</span>.<span class="hljs-number">0</span>——允许用户缩放的最大比例(<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">10</span>.<span class="hljs-number">0</span>正数)，必须大于等于minimum-scale<br><span class="hljs-attribute">minimum</span>-scale=<span class="hljs-number">1</span>.<span class="hljs-number">0</span>——允许用户缩放的最小比例(<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">10</span>.<span class="hljs-number">0</span>正数)，必须小于等于maximum-scale<br><span class="hljs-attribute">user</span>-scalable=no——是否允许用户手动缩放(yes或者no)<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minmum-scale=1.0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>generator——包含生成页面软件的标识符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;generator&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Hexo 3.8.0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>theme-color——定义主题颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#222&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>http-equiv &amp; content</li><li>refresh——每30s刷新一次文档</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>X-UA-Compatible——告知浏览器以何种版本渲染界面。下面的例子有限使用IE最新版本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于是否有必要使用这一条在stack overflow尚且有争议。个人认为如果不想兼容低版本的IE，可以直接忽略这一条。</p><ul><li>Cache-Control——请求和响应遵循的缓存机制，可以声明缓存的内容，修改过期时间，可多次声明</li></ul><blockquote><p>no-transform——不得对资源进行转换或转变。</p><p>no-siteapp——禁止百度进行转码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-transform&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-siteapp&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>property &amp; content</li></ul><p>可以让网页成为一个富媒体对象，同意网页内容被其他网站引用，同时在应用的时候不会只是一个链接，会提取相应的信息展现给用户。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;website&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:url&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;https://zjgyb.github.io/index.html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:site_name&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;tony&#x27;s blog&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js隐式转换</title>
    <link href="/dylan/2022/01/01/implicit/"/>
    <url>/dylan/2022/01/01/implicit/</url>
    
    <content type="html"><![CDATA[<h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ul><li>加法<code>运算符+</code>是双目运算符，只要其中一个是String类型，表达式的值便是一个String。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span> + <span class="hljs-string">&#x27;3&#x27;</span><span class="hljs-comment">// &#x27;23&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>对于其他的四则运算，只有其中一个是Number类型，表达式的值便是一个Number。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span> - <span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><ul><li>对于非法字符的情况通常会返回NaN：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;1&#x27;</span> * <span class="hljs-string">&#x27;a&#x27;</span>     <span class="hljs-comment">// =&gt; NaN，这是因为parseInt(a)值为NaN，1 * NaN 还是 NaN</span><br></code></pre></td></tr></table></figure><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><ul><li>判断语句中的判断条件需要是Boolean类型，所以条件表达式会被隐式转换为Boolean。 其转换规则同Boolean的构造函数。比如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">if</span>(obj)&#123;<br>dosomething...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScript-原始类型转换表"><a href="#JavaScript-原始类型转换表" class="headerlink" title="JavaScript 原始类型转换表"></a>JavaScript 原始类型转换表</h2><table><thead><tr><th>原始值</th><th>转化为数值类型</th><th>转化为字符串类型</th><th>转化为 Boolean 类型</th></tr></thead><tbody><tr><td>false</td><td>0</td><td>“false”</td><td>false</td></tr><tr><td>true</td><td>1</td><td>“true”</td><td>true</td></tr><tr><td>0</td><td>0</td><td>“0”</td><td>false</td></tr><tr><td>1</td><td>1</td><td>“1”</td><td>true</td></tr><tr><td>“0”</td><td>0</td><td>“0”</td><td>true</td></tr><tr><td>“1”</td><td>1</td><td>“1”</td><td>true</td></tr><tr><td>NaN</td><td>NaN</td><td>“NaN”</td><td>false</td></tr><tr><td>Infinity</td><td>Infinity</td><td>“Infinity”</td><td>true</td></tr><tr><td>-Infinity</td><td>-Infinity</td><td>“-Infinity”</td><td>true</td></tr><tr><td>“”</td><td>0</td><td>“”</td><td>false</td></tr><tr><td>“20”</td><td>20</td><td>“20”</td><td>true</td></tr><tr><td>“twenty”</td><td>NaN</td><td>“twenty”</td><td>true</td></tr><tr><td>[ ]</td><td>0</td><td>“”</td><td>true</td></tr><tr><td>[20]</td><td>20</td><td>“20”</td><td>true</td></tr><tr><td>[10,20]</td><td>NaN</td><td>“10,20”</td><td>true</td></tr><tr><td>[“twenty”]</td><td>NaN</td><td>“twenty”</td><td>true</td></tr><tr><td>[“ten”,”twenty”]</td><td>NaN</td><td>“ten,twenty”</td><td>true</td></tr><tr><td>function(){}</td><td>NaN</td><td>“function(){}”</td><td>true</td></tr><tr><td>{ }</td><td>NaN</td><td>“[object Object]”</td><td>true</td></tr><tr><td>null</td><td>0</td><td>“null”</td><td>false</td></tr><tr><td>undefined</td><td>NaN</td><td>“undefined”</td><td>false</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>响应式设计</title>
    <link href="/dylan/2021/12/30/ResponsiveWebDesign/"/>
    <url>/dylan/2021/12/30/ResponsiveWebDesign/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整</p><p>描述响应式界面最著名的一句话就是“Content is like water”</p><p>大白话便是“如果将屏幕看作容器，那么内容就像水一样”</p><p>响应式网站常见特点：</p><ul><li>同时适配PC + 平板 + 手机等</li><li>标签导航在接近手持终端设备时改变为经典的抽屉式导航</li><li>网站的布局会根据视口来调整模块的大小和位置</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须有<code>meta</code>声明<code>viewport</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”&gt;</span></span><br></code></pre></td></tr></table></figure><p>属性对应如下：</p><ul><li>width=device-width: 是自适应手机屏幕的尺寸宽度</li><li>maximum-scale:是缩放比例的最大值</li><li>inital-scale:是缩放的初始化</li><li>user-scalable:是用户的可以缩放的操作</li></ul><p>实现响应式布局的方式有如下：</p><ul><li>媒体查询</li><li>百分比</li><li>vw/vh</li><li>rem</li></ul><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p><code>CSS3 </code>中的增加了更多的媒体查询，就像<code>if</code>条件表达式一样，我们可以设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表</p><p>使用<code>@Media</code>查询，可以针对不同的媒体类型定义不同的样式，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1920px</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>当视口在375px - 600px之间，设置特定字体大小18px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">375px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>) &#123;<br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片</p><p>比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现</p><h3 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h3><p>通过百分比单位 “ % “ 来实现响应式的效果</p><p>比如当浏览器的宽度或者高度发生变化时，通过百分比单位，可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果</p><p><code>height</code>、<code>width</code>属性的百分比依托于父标签的宽高，但是其他盒子属性则不完全依赖父元素：</p><ul><li>子元素的top/left和bottom/right如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度/宽度</li><li>子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。</li><li>子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width</li><li>border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度</li></ul><p>可以看到每个属性都使用百分比，会照成布局的复杂度，所以不建议使用百分比来实现响应式</p><h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw/vh"></a>vw/vh</h3><p><code>vw</code>表示相对于视图窗口的宽度，<code>vh</code>表示相对于视图窗口高度。 任意层级元素，在使用<code>vw</code>单位的情况下，<code>1vw</code>都等于视图宽度的百分之一</p><p>与百分比布局很相似，在以前文章提过与<code>%</code>的区别，这里就不再展开述说</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>在以前也讲到，<code>rem</code>是相对于根元素<code>html</code>的<code>font-size</code>属性，默认情况下浏览器字体大小为<code>16px</code>，此时<code>1rem = 16px</code></p><p>可以利用前面提到的媒体查询，针对不同设备分辨率改变<code>font-size</code>的值，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">414px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">375px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">320px</span>) &#123;<br>  <span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了更准确监听设备可视窗口变化，我们可以在<code>css</code>之前插入<code>script</code>标签，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//动态为根元素设置字体大小</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 获取屏幕宽度</span><br>    <span class="hljs-keyword">var</span> width = <span class="hljs-built_in">document</span>.documentElement.clientWidth<br>    <span class="hljs-comment">// 设置根元素字体大小。此时为宽的10等分</span><br>    <span class="hljs-built_in">document</span>.documentElement.style.fontSize = width / <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;px&#x27;</span><br>&#125;<br><br><span class="hljs-comment">//首次加载应用，设置一次</span><br>init()<br><span class="hljs-comment">// 监听手机旋转的事件的时机，重新设置</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;orientationchange&#x27;</span>, init)<br><span class="hljs-comment">// 监听手机窗口变化，重新设置</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, init)<br></code></pre></td></tr></table></figure><p>无论设备可视窗口如何变化，始终设置<code>rem</code>为<code>width</code>的1/10，实现了百分比布局</p><p>除此之外，我们还可以利用主流<code>UI</code>框架，如：<code>element ui</code>、<code>antd</code>提供的栅格布局实现响应式</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>响应式设计实现通常会从以下几方面思考：</p><ul><li>弹性盒子（包括图片、表格、视频）和媒体查询等技术</li><li>使用百分比布局创建流式布局的弹性UI，同时使用媒体查询限制元素的尺寸和内容变更范围</li><li>使用相对单位使得内容自适应调节</li><li>选择断点，针对不同断点实现不同布局和内容展示</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>响应式布局优点可以看到：</p><ul><li>面对不同分辨率设备灵活性强</li><li>能够快捷解决多设备显示适应问题</li></ul><p>缺点：</p><ul><li>仅适用布局、信息、框架并不复杂的部门类型网站</li><li>兼容各种设备工作量大，效率低下</li><li>代码累赘，会出现隐藏无用的元素，加载时间加长</li><li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>综合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是正则表达式</title>
    <link href="/dylan/2021/12/30/regexp/"/>
    <url>/dylan/2021/12/30/regexp/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则表达式是一种用来匹配字符串的强有力的武器</p><p>它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的</p><p>在 <code>JavaScript</code>中，正则表达式也是对象，构建正则表达式有两种方式：</p><p>1.字面量创建，其由包含在斜杠之间的模式组成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> re = <span class="hljs-regexp">/\d+/g</span>;<br></code></pre></td></tr></table></figure><p>2.调用<code>RegExp</code>对象的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> re = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;\\d+&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>);<br><br><span class="hljs-keyword">const</span> rul = <span class="hljs-string">&quot;\\d+&quot;</span><br><span class="hljs-keyword">const</span> re1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(rul,<span class="hljs-string">&quot;g&quot;</span>);<br></code></pre></td></tr></table></figure><p>使用构建函数创建，第一个参数可以是一个变量，遇到特殊字符<code>\</code>需要使用<code>\\</code>进行转义</p><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><p>常见的校验规则如下：</p><table><thead><tr><th>规则</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>转义</td></tr><tr><td>^</td><td>匹配输入的开始</td></tr><tr><td>$</td><td>匹配输入的结束</td></tr><tr><td>*</td><td>匹配前一个表达式 0 次或多次</td></tr><tr><td>+</td><td>匹配前面一个表达式 1 次或者多次。等价于 <code>&#123;1,&#125;</code></td></tr><tr><td>?</td><td>匹配前面一个表达式 0 次或者 1 次。等价于<code>&#123;0,1&#125;</code></td></tr><tr><td>.</td><td>默认匹配除换行符之外的任何单个字符</td></tr><tr><td>x(?=y)</td><td>匹配’x’仅仅当’x’后面跟着’y’。这种叫做先行断言</td></tr><tr><td>(?&lt;=y)x</td><td>匹配’x’仅当’x’前面是’y’.这种叫做后行断言</td></tr><tr><td>x(?!y)</td><td>仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找</td></tr><tr><td>(?&lt;!<em>y</em>)<em>x</em></td><td>仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找</td></tr><tr><td>x|y</td><td>匹配‘x’或者‘y’</td></tr><tr><td>{n}</td><td>n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</td></tr><tr><td>{n,}</td><td>n是一个正整数，匹配前一个字符至少出现了n次</td></tr><tr><td>{n,m}</td><td>n 和 m 都是整数。匹配前面的字符至少n次，最多m次</td></tr><tr><td>[xyz]</td><td>一个字符集合。匹配方括号中的任意字符</td></tr><tr><td>[^xyz]</td><td>匹配任何没有包含在方括号中的字符</td></tr><tr><td>\b</td><td>匹配一个词的边界，例如在字母和空格之间</td></tr><tr><td>\B</td><td>匹配一个非单词边界</td></tr><tr><td>\d</td><td>匹配一个数字</td></tr><tr><td>\D</td><td>匹配一个非数字字符</td></tr><tr><td>\f</td><td>匹配一个换页符</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\r</td><td>匹配一个回车符</td></tr><tr><td>\s</td><td>匹配一个空白字符，包括空格、制表符、换页符和换行符</td></tr><tr><td>\S</td><td>匹配一个非空白字符</td></tr><tr><td>\w</td><td>匹配一个单字字符（字母、数字或者下划线）</td></tr><tr><td>\W</td><td>匹配一个非单字字符</td></tr></tbody></table><h3 id="正则表达式标记"><a href="#正则表达式标记" class="headerlink" title="正则表达式标记"></a>正则表达式标记</h3><table><thead><tr><th align="left">标志</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>g</code></td><td align="left">全局搜索。</td></tr><tr><td align="left"><code>i</code></td><td align="left">不区分大小写搜索。</td></tr><tr><td align="left"><code>m</code></td><td align="left">多行搜索。</td></tr><tr><td align="left"><code>s</code></td><td align="left">允许 <code>.</code> 匹配换行符。</td></tr><tr><td align="left"><code>u</code></td><td align="left">使用<code>unicode</code>码的模式进行匹配。</td></tr><tr><td align="left"><code>y</code></td><td align="left">执行“粘性(<code>sticky</code>)”搜索,匹配从目标字符串的当前位置开始。</td></tr></tbody></table><p>使用方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/pattern/</span>flags;<br><span class="hljs-keyword">var</span> re = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;pattern&quot;</span>, <span class="hljs-string">&quot;flags&quot;</span>);<br></code></pre></td></tr></table></figure><p>在了解下正则表达式基本的之外，还可以掌握几个正则表达式的特性：</p><h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h3><p>在了解贪婪模式前，首先举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/ab&#123;1,3&#125;c/</span><br></code></pre></td></tr></table></figure><p>在匹配过程中，尝试可能的顺序是从多往少的方向去尝试。首先会尝试<code>bbb</code>，然后再看整个正则是否能匹配。不能匹配时，吐出一个<code>b</code>，即在<code>bb</code>的基础上，再继续尝试，以此重复</p><p>如果多个贪婪量词挨着，则深度优先搜索</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> string = <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-keyword">const</span> regx = <span class="hljs-regexp">/(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)/</span>;<br><span class="hljs-built_in">console</span>.log( string.match(reg) );<br><span class="hljs-comment">// =&gt; [&quot;12345&quot;, &quot;123&quot;, &quot;45&quot;, index: 0, input: &quot;12345&quot;]</span><br></code></pre></td></tr></table></figure><p>其中，前面的<code>\d&#123;1,3&#125;</code>匹配的是”123”，后面的<code>\d&#123;1,3&#125;</code>匹配的是”45”</p><h3 id="懒惰模式"><a href="#懒惰模式" class="headerlink" title="懒惰模式"></a>懒惰模式</h3><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> string = <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)/</span>;<br><span class="hljs-built_in">console</span>.log( string.match(regex) );<br><span class="hljs-comment">// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;234&quot;, index: 0, input: &quot;12345&quot;]</span><br></code></pre></td></tr></table></figure><p>其中<code>\d&#123;1,3&#125;?</code>只匹配到一个字符”1”，而后面的<code>\d&#123;1,3&#125;</code>匹配了”234”</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组主要是用过<code>()</code>进行实现，比如<code>beyond&#123;3&#125;</code>，是匹配<code>d</code>字母3次。而<code>(beyond)&#123;3&#125;</code>是匹配<code>beyond</code>三次</p><p>在<code>()</code>内使用<code>|</code>达到或的效果，如<code>(abc | xxx)</code>可以匹配<code>abc</code>或者<code>xxx</code></p><p>反向引用，巧用<code>$</code>分组捕获</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;John Smith&quot;</span>;<br><br><span class="hljs-comment">// 交换名字和姓氏</span><br><span class="hljs-built_in">console</span>.log(str.replace(<span class="hljs-regexp">/(john) (smith)/i</span>, <span class="hljs-string">&#x27;$2, $1&#x27;</span>)) <span class="hljs-comment">// Smith, John</span><br></code></pre></td></tr></table></figure><h2 id="匹配方法"><a href="#匹配方法" class="headerlink" title="匹配方法"></a>匹配方法</h2><p>正则表达式常被用于某些方法，我们可以分成两类：</p><ul><li>字符串（str）方法：<code>match</code>、<code>matchAll</code>、<code>search</code>、<code>replace</code>、<code>split</code></li><li>正则对象下（regexp）的方法：<code>test</code>、<code>exec</code></li></ul><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">exec</td><td align="left">一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</td></tr><tr><td align="left">test</td><td align="left">一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。</td></tr><tr><td align="left">match</td><td align="left">一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</td></tr><tr><td align="left">matchAll</td><td align="left">一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</td></tr><tr><td align="left">search</td><td align="left">一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td></tr><tr><td align="left">replace</td><td align="left">一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td align="left">split</td><td align="left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 <code>String</code> 方法。</td></tr></tbody></table><h3 id="str-match-regexp"><a href="#str-match-regexp" class="headerlink" title="str.match(regexp)"></a>str.match(regexp)</h3><p><code>str.match(regexp)</code> 方法在字符串 <code>str</code> 中找到匹配 <code>regexp</code> 的字符</p><p>如果 <code>regexp</code> 不带有 <code>g</code> 标记，则它以数组的形式返回第一个匹配项，其中包含分组和属性 <code>index</code>（匹配项的位置）、<code>input</code>（输入字符串，等于 <code>str</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;I love JavaScript&quot;</span>;<br><br><span class="hljs-keyword">let</span> result = str.match(<span class="hljs-regexp">/Java(Script)/</span>);<br><br><span class="hljs-built_in">console</span>.log( result[<span class="hljs-number">0</span>] );     <span class="hljs-comment">// JavaScript（完全匹配）</span><br><span class="hljs-built_in">console</span>.log( result[<span class="hljs-number">1</span>] );     <span class="hljs-comment">// Script（第一个分组）</span><br><span class="hljs-built_in">console</span>.log( result.length ); <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// 其他信息：</span><br><span class="hljs-built_in">console</span>.log( result.index );  <span class="hljs-comment">// 7（匹配位置）</span><br><span class="hljs-built_in">console</span>.log( result.input );  <span class="hljs-comment">// I love JavaScript（源字符串）</span><br></code></pre></td></tr></table></figure><p>如果 <code>regexp</code> 带有 <code>g</code> 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;I love JavaScript&quot;</span>;<br><br><span class="hljs-keyword">let</span> result = str.match(<span class="hljs-regexp">/Java(Script)/g</span>);<br><br><span class="hljs-built_in">console</span>.log( result[<span class="hljs-number">0</span>] ); <span class="hljs-comment">// JavaScript</span><br><span class="hljs-built_in">console</span>.log( result.length ); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>如果没有匹配项，则无论是否带有标记 <code>g</code> ，都将返回 <code>null</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;I love JavaScript&quot;</span>;<br><br><span class="hljs-keyword">let</span> result = str.match(<span class="hljs-regexp">/HTML/</span>);<br><br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><h3 id="str-matchAll-regexp"><a href="#str-matchAll-regexp" class="headerlink" title="str.matchAll(regexp)"></a>str.matchAll(regexp)</h3><p>返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> regexp = <span class="hljs-regexp">/t(e)(st(\d?))/g</span>;<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;test1test2&#x27;</span>;<br><br><span class="hljs-keyword">const</span> array = [...str.matchAll(regexp)];<br><br><span class="hljs-built_in">console</span>.log(array[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">// expected output: Array [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]</span><br><br><span class="hljs-built_in">console</span>.log(array[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">// expected output: Array [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="str-search-regexp"><a href="#str-search-regexp" class="headerlink" title="str.search(regexp)"></a>str.search(regexp)</h3><p>返回第一个匹配项的位置，如果未找到，则返回 <code>-1</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;A drop of ink may make a million think&quot;</span>;<br><br><span class="hljs-built_in">console</span>.log( str.search( <span class="hljs-regexp">/ink/i</span> ) ); <span class="hljs-comment">// 10（第一个匹配位置）</span><br></code></pre></td></tr></table></figure><p>这里需要注意的是，<code>search</code> 仅查找第一个匹配项</p><h3 id="str-replace-regexp"><a href="#str-replace-regexp" class="headerlink" title="str.replace(regexp)"></a>str.replace(regexp)</h3><p>替换与正则表达式匹配的子串，并返回替换后的字符串。在不设置全局匹配<code>g</code>的时候，只替换第一个匹配成功的字符串片段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> reg1=<span class="hljs-regexp">/javascript/i</span>;<br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/javascript/ig</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello Javascript Javascript Javascript&#x27;</span>.replace(reg1,<span class="hljs-string">&#x27;js&#x27;</span>));<br><span class="hljs-comment">//hello js Javascript Javascript</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello Javascript Javascript Javascript&#x27;</span>.replace(reg2,<span class="hljs-string">&#x27;js&#x27;</span>));<br><span class="hljs-comment">//hello js js js</span><br></code></pre></td></tr></table></figure><h3 id="str-split-regexp"><a href="#str-split-regexp" class="headerlink" title="str.split(regexp)"></a>str.split(regexp)</h3><p>使用正则表达式（或子字符串）作为分隔符来分割字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;12, 34, 56&#x27;</span>.split(<span class="hljs-regexp">/,\s*/</span>)) <span class="hljs-comment">// 数组 [&#x27;12&#x27;, &#x27;34&#x27;, &#x27;56&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="regexp-exec-str"><a href="#regexp-exec-str" class="headerlink" title="regexp.exec(str)"></a>regexp.exec(str)</h3><p><code>regexp.exec(str)</code> 方法返回字符串 <code>str</code> 中的 <code>regexp</code> 匹配项，与以前的方法不同，它是在正则表达式而不是字符串上调用的</p><p>根据正则表达式是否带有标志 <code>g</code>，它的行为有所不同</p><p>如果没有 <code>g</code>，那么 <code>regexp.exec(str)</code> 返回的第一个匹配与 <code>str.match(regexp)</code> 完全相同</p><p>如果有标记 <code>g</code>，调用 <code>regexp.exec(str)</code> 会返回第一个匹配项，并将紧随其后的位置保存在属性<code>regexp.lastIndex</code> 中。 下一次同样的调用会从位置 <code>regexp.lastIndex</code> 开始搜索，返回下一个匹配项，并将其后的位置保存在 <code>regexp.lastIndex</code> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;More about JavaScript at https://javascript.info&#x27;</span>;<br><span class="hljs-keyword">let</span> regexp = <span class="hljs-regexp">/javascript/ig</span>;<br><br><span class="hljs-keyword">let</span> result;<br><br><span class="hljs-keyword">while</span> (result = regexp.exec(str)) &#123;<br>  <span class="hljs-built_in">console</span>.log( <span class="hljs-string">`Found <span class="hljs-subst">$&#123;result[<span class="hljs-number">0</span>]&#125;</span> at position <span class="hljs-subst">$&#123;result.index&#125;</span>`</span> );<br>  <span class="hljs-comment">// Found JavaScript at position 11</span><br>  <span class="hljs-comment">// Found javascript at position 33</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="regexp-test-str"><a href="#regexp-test-str" class="headerlink" title="regexp.test(str)"></a>regexp.test(str)</h3><p>查找匹配项，然后返回 <code>true/false</code> 表示是否存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;I love JavaScript&quot;</span>;<br><br><span class="hljs-comment">// 这两个测试相同</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-regexp">/love/i</span>.test(str) ); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>通过上面的学习，我们对正则表达式有了一定的了解</p><p>下面再来看看正则表达式一些案例场景：</p><p>验证QQ合法性（5~15位、全是数字、不以0开头）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^[1-9][0-9]&#123;4,14&#125;$/</span><br><span class="hljs-keyword">const</span> isvalid = patrn.exec(s)<br></code></pre></td></tr></table></figure><p>校验用户账号合法性（只能输入5-20个以字母开头、可带数字、“_”、“.”的字串）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> patrn=<span class="hljs-regexp">/^[a-zA-Z]&#123;1&#125;([a-zA-Z0-9]|[._])&#123;4,19&#125;$/</span>;<br><span class="hljs-keyword">const</span> isvalid = patrn.exec(s)<br></code></pre></td></tr></table></figure><p>将<code>url</code>参数解析为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> protocol = <span class="hljs-string">&#x27;(?&lt;protocol&gt;https?:)&#x27;</span>;<br><span class="hljs-keyword">const</span> host = <span class="hljs-string">&#x27;(?&lt;host&gt;(?&lt;hostname&gt;[^/#?:]+)(?::(?&lt;port&gt;\\d+))?)&#x27;</span>;<br><span class="hljs-keyword">const</span> path = <span class="hljs-string">&#x27;(?&lt;pathname&gt;(?:\\/[^/#?]+)*\\/?)&#x27;</span>;<br><span class="hljs-keyword">const</span> search = <span class="hljs-string">&#x27;(?&lt;search&gt;(?:\\?[^#]*)?)&#x27;</span>;<br><span class="hljs-keyword">const</span> hash = <span class="hljs-string">&#x27;(?&lt;hash&gt;(?:#.*)?)&#x27;</span>;<br><span class="hljs-keyword">const</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">`^<span class="hljs-subst">$&#123;protocol&#125;</span>\/\/<span class="hljs-subst">$&#123;host&#125;</span><span class="hljs-subst">$&#123;path&#125;</span><span class="hljs-subst">$&#123;search&#125;</span><span class="hljs-subst">$&#123;hash&#125;</span>$`</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execURL</span>(<span class="hljs-params">url</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> result = reg.exec(url);<br>    <span class="hljs-keyword">if</span>(result)&#123;<br>        result.groups.port = result.groups.port || <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">return</span> result.groups;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">protocol</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-attr">hostname</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-attr">port</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-attr">search</span>:<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-attr">hash</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(execURL(<span class="hljs-string">&#x27;https://localhost:8080/?a=b#xxxx&#x27;</span>));<br>protocol: <span class="hljs-string">&quot;https:&quot;</span><br><span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost:8080&quot;</span><br><span class="hljs-attr">hostname</span>: <span class="hljs-string">&quot;localhost&quot;</span><br><span class="hljs-attr">port</span>: <span class="hljs-string">&quot;8080&quot;</span><br><span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/&quot;</span><br><span class="hljs-attr">search</span>: <span class="hljs-string">&quot;?a=b&quot;</span><br><span class="hljs-attr">hash</span>: <span class="hljs-string">&quot;#xxxx&quot;</span><br></code></pre></td></tr></table></figure><p>再将上面的<code>search</code>和<code>hash</code>进行解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execUrlParams</span>(<span class="hljs-params">str</span>)</span>&#123;<br>    str = str.replace(<span class="hljs-regexp">/^[#?&amp;]/</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">const</span> result = &#123;&#125;;<br>    <span class="hljs-keyword">if</span>(!str)&#123; <span class="hljs-comment">//如果正则可能配到空字符串，极有可能造成死循环，判断很重要</span><br>        <span class="hljs-keyword">return</span> result; <br>    &#125;<br>    <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/(?:^|&amp;)([^&amp;=]*)=?([^&amp;]*?)(?=&amp;|$)/y</span><br>    <span class="hljs-keyword">let</span> exec = reg.exec(str);<br>    <span class="hljs-keyword">while</span>(exec)&#123;<br>        result[exec[<span class="hljs-number">1</span>]] = exec[<span class="hljs-number">2</span>];<br>        exec = reg.exec(str);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(execUrlParams(<span class="hljs-string">&#x27;#&#x27;</span>));<span class="hljs-comment">// &#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(execUrlParams(<span class="hljs-string">&#x27;##&#x27;</span>));<span class="hljs-comment">//&#123;&#x27;#&#x27;:&#x27;&#x27;&#125;</span><br><span class="hljs-built_in">console</span>.log(execUrlParams(<span class="hljs-string">&#x27;?q=3606&amp;src=srp&#x27;</span>)); <span class="hljs-comment">//&#123;q: &quot;3606&quot;, src: &quot;srp&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(execUrlParams(<span class="hljs-string">&#x27;test=a=b=c&amp;&amp;==&amp;a=&#x27;</span>));<span class="hljs-comment">//&#123;test: &quot;a=b=c&quot;, &quot;&quot;: &quot;=&quot;, a: &quot;&quot;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS动画</title>
    <link href="/dylan/2021/12/27/animation/"/>
    <url>/dylan/2021/12/27/animation/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS动画（CSS Animations）是为层叠样式表建议的允许可扩展标记语言（XML）元素使用CSS的动画的模块</p><p>即指元素从一种样式逐渐过渡为另一种样式的过程</p><p>常见的动画效果有很多，如平移、旋转、缩放等等，复杂动画则是多个简单动画的组合</p><p><code>css</code>实现动画的方式，有如下几种：</p><ul><li>transition 实现渐变动画</li><li>transform 转变动画</li><li>animation 实现自定义动画</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="transition-实现渐变动画"><a href="#transition-实现渐变动画" class="headerlink" title="transition 实现渐变动画"></a>transition 实现渐变动画</h3><p><code>transition</code>的属性如下：</p><ul><li>property:填写需要变化的css属性</li><li>duration:完成过渡效果需要的时间单位(s或者ms)</li><li>timing-function:完成效果的速度曲线</li><li>delay: 动画效果的延迟触发时间</li></ul><p>其中<code>timing-function</code>的值有如下：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>匀速（等于 cubic-bezier(0,0,1,1)）</td></tr><tr><td>ease</td><td>从慢到快再到慢（cubic-bezier(0.25,0.1,0.25,1)）</td></tr><tr><td>ease-in</td><td>慢慢变快（等于 cubic-bezier(0.42,0,1,1)）</td></tr><tr><td>ease-out</td><td>慢慢变慢（等于 cubic-bezier(0,0,0.58,1)）</td></tr><tr><td>ease-in-out</td><td>先变快再到慢（等于 cubic-bezier(0.42,0,0.58,1)），渐显渐隐效果</td></tr><tr><td>cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值</td></tr></tbody></table><p>注意：并不是所有的属性都能使用过渡的，如<code>display:none&lt;-&gt;display:block</code></p><p>举个例子，实现鼠标移动上去发生变化动画效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">       <span class="hljs-selector-class">.base</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0EA9FF</span>;</span><br><span class="css">            <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">            <span class="hljs-attribute">border-style</span>: solid;</span><br><span class="css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#5daf34</span>;</span><br><span class="css">            <span class="hljs-attribute">transition-property</span>: width, height, background-color, border-width;</span><br><span class="css">            <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">2s</span>;</span><br><span class="css">            <span class="hljs-attribute">transition-timing-function</span>: ease-in;</span><br><span class="css">            <span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">500ms</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*简写*/</span></span><br><span class="css">        <span class="hljs-comment">/*transition: all 2s ease-in 500ms;*/</span></span><br><span class="css">        <span class="hljs-selector-class">.base</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5daf34</span>;</span><br><span class="css">            <span class="hljs-attribute">border-width</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3a8ee6</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;base&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="transform-转变动画"><a href="#transform-转变动画" class="headerlink" title="transform 转变动画"></a>transform 转变动画</h3><p>包含四个常用的功能：</p><ul><li>translate：位移</li><li>scale：缩放</li><li>rotate：旋转</li><li>skew：倾斜</li></ul><p>一般配合<code>transition</code>过度使用</p><p>注意的是，<code>transform</code>不支持<code>inline</code>元素，使用前把它变成<code>block</code></p><p>举个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.base</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0EA9FF</span>;</span><br><span class="css">        <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">        <span class="hljs-attribute">border-style</span>: solid;</span><br><span class="css">        <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#5daf34</span>;</span><br><span class="css">        <span class="hljs-attribute">transition-property</span>: width, height, background-color, border-width;</span><br><span class="css">        <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">2s</span>;</span><br><span class="css">        <span class="hljs-attribute">transition-timing-function</span>: ease-in;</span><br><span class="css">        <span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">500ms</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.base2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: none;</span><br><span class="css">        <span class="hljs-attribute">transition-property</span>: transform;</span><br><span class="css">        <span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">5ms</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.base2</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.8</span>, <span class="hljs-number">1.5</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">35deg</span>) <span class="hljs-built_in">skew</span>(<span class="hljs-number">5deg</span>) <span class="hljs-built_in">translate</span>(<span class="hljs-number">15px</span>, <span class="hljs-number">25px</span>);</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;base base2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到盒子发生了旋转，倾斜，平移，放大</p><h3 id="animation-实现自定义动画"><a href="#animation-实现自定义动画" class="headerlink" title="animation 实现自定义动画"></a>animation 实现自定义动画</h3><p><code>animation</code>是由 8 个属性的简写，分别如下：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性值</th></tr></thead><tbody><tr><td>animation-duration</td><td>指定动画完成一个周期所需要时间，单位秒（s）或毫秒（ms），默认是 0</td><td></td></tr><tr><td>animation-timing-function</td><td>指定动画计时函数，即动画的速度曲线，默认是 “ease”</td><td>linear、ease、ease-in、ease-out、ease-in-out</td></tr><tr><td>animation-delay</td><td>指定动画延迟时间，即动画何时开始，默认是 0</td><td></td></tr><tr><td>animation-iteration-count</td><td>指定动画播放的次数，默认是 1</td><td></td></tr><tr><td>animation-direction 指定动画播放的方向</td><td>默认是 normal</td><td>normal、reverse、alternate、alternate-reverse</td></tr><tr><td>animation-fill-mode</td><td>指定动画填充模式。默认是 none</td><td>forwards、backwards、both</td></tr><tr><td>animation-play-state</td><td>指定动画播放状态，正在运行或暂停。默认是 running</td><td>running、pauser</td></tr><tr><td>animation-name</td><td>指定 @keyframes 动画的名称</td><td></td></tr></tbody></table><p><code>CSS</code> 动画只需要定义一些关键的帧，而其余的帧，浏览器会根据计时函数插值计算出来，</p><p>通过 <code>@keyframes</code> 来定义关键帧</p><p>因此，如果我们想要让元素旋转一圈，只需要定义开始和结束两帧即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> rotate&#123;<br>    <span class="hljs-selector-tag">from</span>&#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>    &#125;<br>    <span class="hljs-selector-tag">to</span>&#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>from</code> 表示最开始的那一帧，<code>to</code> 表示结束时的那一帧</p><p>也可以使用百分比刻画生命周期</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> rotate&#123;<br>    <span class="hljs-number">0%</span>&#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>    &#125;<br>    <span class="hljs-number">50%</span>&#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">180deg</span>);<br>    &#125;<br>    <span class="hljs-number">100%</span>&#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义好了关键帧后，下来就可以直接用它了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation</span>: rotate <span class="hljs-number">2s</span>;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>transition（过度）</td><td>用于设置元素的样式过度，和animation有着类似的效果，但细节上有很大的不同</td></tr><tr><td>transform（变形）</td><td>用于元素进行旋转、缩放、移动或倾斜，和设置样式的动画并没有什么关系，就相当于color一样用来设置元素的“外表”</td></tr><tr><td>translate（移动）</td><td>只是transform的一个属性值，即移动</td></tr><tr><td>animation（动画）</td><td>用于设置动画属性，他是一个简写的属性，包含6个属性</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>var、let、const 区别</title>
    <link href="/dylan/2021/12/26/let/"/>
    <url>/dylan/2021/12/26/let/</url>
    
    <content type="html"><![CDATA[<h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>在ES5中，顶层对象的属性和全局变量是等价的，用<code>var</code>声明的变量既是全局变量，也是顶层变量</p><p>注意：顶层对象，在浏览器环境指的是<code>window</code>对象，在 <code>Node</code> 指的是<code>global</code>对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a) <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><p>使用<code>var</code>声明的变量存在变量提升的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>在编译阶段，编译器会将其变成以下执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a<br><span class="hljs-built_in">console</span>.log(a)<br>a = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>使用<code>var</code>，我们能够对一个变量进行多次声明，后面声明的变量会覆盖前面的变量声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span> <br><span class="hljs-keyword">var</span> a = <span class="hljs-number">30</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><p>在函数中使用使用<code>var</code>声明变量时候，该变量是局部的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">30</span><br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 20 </span><br></code></pre></td></tr></table></figure><p>而如果在函数内不使用<code>var</code>，该变量是全局的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span>&#123;<br>   a = <span class="hljs-number">30</span><br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 30 </span><br></code></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p><code>let</code>是<code>ES6</code>新增的命令，用来声明变量</p><p>用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// ReferenceError: a is not defined.</span><br></code></pre></td></tr></table></figure><p>不存在变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 报错ReferenceError</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这表示在声明它之前，变量<code>a</code>是不存在的，这时如果用到它，就会抛出一个错误</p><p>只要块级作用域内存在<code>let</code>命令，这个区域就不再受外部影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    a = <span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-comment">// ReferenceError</span><br>    <span class="hljs-keyword">let</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>let</code>声明变量前，该变量都不可用，也就是大家常说的“暂时性死区”</p><p>最后，<code>let</code>不允许在相同作用域中重复声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">30</span><br><span class="hljs-comment">// Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><p>注意的是相同作用域，下面这种情况是不会报错的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span><br>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">30</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因此，我们不能在函数内部重新声明参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arg;<br>&#125;<br>func()<br><span class="hljs-comment">// Uncaught SyntaxError: Identifier &#x27;arg&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p><code>const</code>声明一个只读的常量，一旦声明，常量的值就不能改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br>a = <span class="hljs-number">3</span><br><span class="hljs-comment">// TypeError: Assignment to constant variable.</span><br></code></pre></td></tr></table></figure><p>这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a;<br><span class="hljs-comment">// SyntaxError: Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><p>如果之前用<code>var</code>或<code>let</code>声明过变量，再用<code>const</code>声明同样会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">20</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">30</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-number">30</span><br><span class="hljs-comment">// 都会报错</span><br></code></pre></td></tr></table></figure><p><code>const</code>实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动</p><p>对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量</p><p>对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的，并不能确保改变量的结构不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foo = &#123;&#125;;<br><br><span class="hljs-comment">// 为 foo 添加一个属性，可以成功</span><br>foo.prop = <span class="hljs-number">123</span>;<br>foo.prop <span class="hljs-comment">// 123</span><br><br><span class="hljs-comment">// 将 foo 指向另一个对象，就会报错</span><br>foo = &#123;&#125;; <span class="hljs-comment">// TypeError: &quot;foo&quot; is read-only</span><br></code></pre></td></tr></table></figure><p>其它情况，<code>const</code>与<code>let</code>一致</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>var</code>、<code>let</code>、<code>const</code>三者区别可以围绕下面五点展开：</p><ul><li>变量提升</li><li>暂时性死区</li><li>块级作用域</li><li>重复声明</li><li>修改声明的变量</li><li>使用</li></ul><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-string">`声明的变量存在变量提升，即变量可以在声明之前调用，值为`</span><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p><code>let</code>和<code>const</code>不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var</span><br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><br><span class="hljs-comment">// let </span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// Cannot access &#x27;b&#x27; before initialization</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span><br><br><span class="hljs-comment">// const</span><br><span class="hljs-built_in">console</span>.log(c)  <span class="hljs-comment">// Cannot access &#x27;c&#x27; before initialization</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p><code>var</code>不存在暂时性死区</p><p><code>let</code>和<code>const</code>存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var</span><br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><br><span class="hljs-comment">// let</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// Cannot access &#x27;b&#x27; before initialization</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span><br><br><span class="hljs-comment">// const</span><br><span class="hljs-built_in">console</span>.log(c)  <span class="hljs-comment">// Cannot access &#x27;c&#x27; before initialization</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p><code>var</code>不存在块级作用域</p><p><code>let</code>和<code>const</code>存在块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var</span><br>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// 20</span><br><br><span class="hljs-comment">// let</span><br>&#123;<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// Uncaught ReferenceError: b is not defined</span><br><br><span class="hljs-comment">// const</span><br>&#123;<br>    <span class="hljs-keyword">const</span> c = <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(c)  <span class="hljs-comment">// Uncaught ReferenceError: c is not defined</span><br></code></pre></td></tr></table></figure><h3 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h3><p><code>var</code>允许重复声明变量</p><p><code>let</code>和<code>const</code>在同一作用域不允许重复声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span> <span class="hljs-comment">// 20</span><br><br><span class="hljs-comment">// let</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">20</span> <span class="hljs-comment">// Identifier &#x27;b&#x27; has already been declared</span><br><br><span class="hljs-comment">// const</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">20</span> <span class="hljs-comment">// Identifier &#x27;c&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><h3 id="修改声明的变量"><a href="#修改声明的变量" class="headerlink" title="修改声明的变量"></a>修改声明的变量</h3><p><code>var</code>和<code>let</code>可以</p><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br>a = <span class="hljs-number">20</span><br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// 20</span><br><br><span class="hljs-comment">//let</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// 20</span><br><br><span class="hljs-comment">// const</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span><br>c = <span class="hljs-number">20</span><br><span class="hljs-built_in">console</span>.log(c) <span class="hljs-comment">// Uncaught TypeError: Assignment to constant variable</span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>能用<code>const</code>的情况尽量使用<code>const</code>，其他情况下大多数使用<code>let</code>，避免使用<code>var</code></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用CSS画三角形</title>
    <link href="/dylan/2021/12/24/triangle/"/>
    <url>/dylan/2021/12/24/triangle/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发的时候，我们有时候会需要用到一个三角形的形状，比如地址选择或者播放器里面播放按钮</p><p>通常情况下，我们会使用图片或者<code>svg</code>去完成三角形效果图，但如果单纯使用<code>css</code>如何完成一个三角形呢？</p><p>实现过程似乎也并不困难，通过边框就可完成</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.border</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid;</span><br><span class="css">        <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#96ceb4</span> <span class="hljs-number">#ffeead</span> <span class="hljs-number">#d9534f</span> <span class="hljs-number">#ffad60</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/dylan/imgs/triangle/1.png" alt="图1"></p><p>将<code>border</code>设置<code>50px</code>，效果图如下所示：</p><p><img src="/dylan/imgs/triangle/2.png" alt="图2"></p><p>白色区域则为<code>width</code>、<code>height</code>，这时候只需要你将白色区域部分宽高逐渐变小，最终变为0，则变成如下图所示：</p><p><img src="/dylan/imgs/triangle/3.png" alt="图3"></p><p>这时候就已经能够看到4个不同颜色的三角形，如果需要下方三角形，只需要将上、左、右边框设置为0就可以得到下方的红色三角形</p><p><img src="/dylan/imgs/triangle/4.png" alt="图4"></p><p>但这种方式，虽然视觉上是实现了三角形，但实际上，隐藏的部分任然占据部分高度，需要将上方的宽度去掉</p><p>最终实现代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.border</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-style</span>:solid;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">50px</span> <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">border-color</span>: transparent transparent <span class="hljs-number">#d9534f</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想要实现一个只有边框是空心的三角形，由于这里不能再使用<code>border</code>属性，所以最直接的方法是利用伪类新建一个小一点的三角形定位上去</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.border</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-style</span>:solid;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">50px</span> <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">border-color</span>: transparent transparent <span class="hljs-number">#d9534f</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.border</span>:after&#123;<br>    content: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">border-style</span>:solid;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">border-color</span>: transparent transparent <span class="hljs-number">#96ceb4</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图如下所示：</p><p><img src="/dylan/imgs/triangle/5.png" alt="图5"></p><p>伪类元素定位参照对象的内容区域宽高都为0，则内容区域即可以理解成中心一点，所以伪元素相对中心这点定位</p><p>将元素定位进行微调以及改变颜色，就能够完成下方效果图：</p><p><img src="/dylan/imgs/triangle/6.png" alt="图6"></p><p>最终代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.border</span>:after &#123;<br>    content: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">border-style</span>: solid;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">border-color</span>: transparent transparent <span class="hljs-number">#96ceb4</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>可以看到，边框是实现三角形的部分，边框实际上并不是一个直线，如果我们将四条边设置不同的颜色，将边框逐渐放大，可以得到每条边框都是一个梯形</p><p><img src="/dylan/imgs/triangle/7.png" alt="图7"></p><p>当分别取消边框的时候，发现下面几种情况：</p><ul><li>取消一条边的时候，与这条边相邻的两条边的接触部分会变成直的</li><li>当仅有邻边时， 两个边会变成对分的三角</li><li>当保留边没有其他接触时，极限情况所有东西都会消失</li></ul><p><img src="/dylan/imgs/triangle/8.png" alt="图8"></p><p>通过上图的变化规则，利用旋转、隐藏，以及设置内容宽高等属性，就能够实现其他类型的三角形</p><p>如设置直角三角形，如上图倒数第三行实现过程，我们就能知道整个实现原理</p><p>实现代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-comment">/* 内部大小 */</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-comment">/* 边框大小 只设置两条边*/</span><br>    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">#4285f4</span> solid;<br>    <span class="hljs-attribute">border-right</span>: transparent solid;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">85px</span>; <br>    <span class="hljs-comment">/* 其他设置 */</span><br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>像素单位</title>
    <link href="/dylan/2021/12/21/px/"/>
    <url>/dylan/2021/12/21/px/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统的项目开发中，我们只会用到<code>px</code>、<code>%</code>、<code>em</code>这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性</p><p>从<code>CSS3</code>开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了<code>rem</code>、<code>vh</code>、<code>vw</code>、<code>vm</code>等一些新的计量单位</p><p>利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等</p><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><p>在<code>css</code>单位中，可以分为长度单位、绝对单位，如下表所指示</p><table><thead><tr><th>CSS单位</th><th></th></tr></thead><tbody><tr><td>相对长度单位</td><td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td>绝对长度单位</td><td>cm、mm、in、px、pt、pc</td></tr></tbody></table><p>这里我们主要讲述px、em、rem、vh、vw</p><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>px，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中</p><p>有些人会把<code>px</code>认为是相对长度，原因在于在移动端中存在设备像素比，<code>px</code>实际显示的大小是不确定</p><p>这里之所以认为<code>px</code>为绝对单位，在于<code>px</code>的大小和元素的其他属性无关</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（<code>1em = 16px</code>）</p><p>为了简化 <code>font-size</code> 的换算，我们需要在<code>css</code>中的 <code>body</code> 选择器中声明<code>font-size</code>= <code>62.5%</code>，这就使 em 值变为 <code>16px*62.5% = 10px</code></p><p>这样 <code>12px = 1.2em</code>, <code>10px = 1em</code>, 也就是说只需要将你的原来的<code> px</code> 数值除以 10，然后换上 <code>em </code>作为单位就行了</p><p>特点：</p><ul><li>em 的值并不是固定的</li><li>em 会继承父级元素的字体大小</li><li>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li><li>任意浏览器的默认字体高都是 16px</li></ul><p>举个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;big&quot;</span>&gt;</span><br>    我是14px=1.4rem<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>我是12px=1.2rem<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">html</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;  &#125; <span class="hljs-comment">/*  公式16px*62.5%=10px  */</span> </span><br><span class="css"><span class="hljs-selector-class">.big</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>&#125;</span><br><span class="css"><span class="hljs-selector-class">.small</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这时候<code>.big</code>元素的<code>font-size</code>为14px，而<code>.small</code>元素的<code>font-size</code>为12px</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem，相对单位，相对的只是HTML根元素<code>font-size</code>的值</p><p>同理，如果想要简化<code>font-size</code>的转化，我们可以在根元素<code>html</code>中加入<code>font-size: 62.5%</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">html</span> &#123;font-size: <span class="hljs-number">62</span>.<span class="hljs-number">5</span>%;  &#125; /*  公式<span class="hljs-number">16</span>px*<span class="hljs-number">62</span>.<span class="hljs-number">5</span>%=<span class="hljs-number">10</span>px  */ <br></code></pre></td></tr></table></figure><p>这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助</p><p>特点：</p><ul><li>rem单位可谓集相对大小和绝对大小的优点于一身</li><li>和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸</li></ul><h3 id="vh、vw"><a href="#vh、vw" class="headerlink" title="vh、vw"></a>vh、vw</h3><p>vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，<code>vh</code>则为窗口的高度</p><p>这里的窗口分成几种情况：</p><ul><li>在桌面端，指的是浏览器的可视区域</li><li>移动端指的就是布局视口</li></ul><p>像<code>vw</code>、<code>vh</code>，比较容易混淆的一个单位是<code>%</code>，不过百分比宽泛的讲是相对于父元素：</p><p>对于普通定位元素就是我们理解的父元素</p><ul><li>对于position: absolute;的元素是相对于已定位的父元素</li><li>对于position: fixed;的元素是相对于 ViewPort（可视窗口）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>px</strong>：绝对单位，页面按精确像素展示</p><p><strong>em</strong>：相对单位，基准点为父节点字体的大小，如果自身定义了<code>font-size</code>按自身来计算，整个页面内<code>1em</code>不是一个固定的值</p><p><strong>rem</strong>：相对单位，可理解为<code>root em</code>, 相对根节点<code>html</code>的字体大小来计算</p><p><strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>综合</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盒模型</title>
    <link href="/dylan/2021/12/20/box/"/>
    <url>/dylan/2021/12/20/box/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）</p><p>一个盒子由四个部分组成：<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></p><p><img src="/dylan/imgs/box/1.png" alt="图1"></p><p>显示文本和图像</p><ul><li><code>boreder</code>，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成</li><li><code>padding</code>，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的<code>background</code>属性影响</li><li><code>margin</code>，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域</li></ul><p>上述是一个从二维的角度观察盒子，下面再看看看三维图：</p><p><img src="/dylan/imgs/box/2.png" alt="图2"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">box</span>\&quot;&gt;</span><br>盒子模型<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当我们在浏览器查看元素时，却发现元素的大小变成了<code>240px</code></p><p>这是因为，在<code>CSS</code>中，盒子模型可以分成：</p><ul><li>W3C 标准盒子模型</li><li>IE 怪异盒子模型</li></ul><p>默认情况下，盒子模型为<code>W3C</code> 标准盒子模型</p><h2 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h2><p>标准盒子模型，是浏览器默认的盒子模型</p><p>下面看看标准盒子模型的模型图：</p><p><img src="/dylan/imgs/box/3.png" alt="图3"></p><p>从上图可以看到：</p><ul><li>盒子总宽度 = width + padding + border + margin;</li><li>盒子总高度 = height + padding + border + margin</li></ul><p>也就是，<code>width/height</code> 只是内容高度，不包含 <code>padding</code> 和 <code>border </code>值</p><p>所以上面问题中，设置<code>width</code>为200px，但由于存在<code>padding</code>，但实际上盒子的宽度有240px</p><h2 id="IE怪异盒模型"><a href="#IE怪异盒模型" class="headerlink" title="IE怪异盒模型"></a>IE怪异盒模型</h2><p><img src="/dylan/imgs/box/4.png" alt="图4"></p><p>从上图可以看到：</p><ul><li>盒子总宽度 = width + margin;</li><li>盒子总高度 = height + margin;</li></ul><p>也就是，<code>width/height</code> 包含了 <code>padding </code>和 <code>border </code>值</p><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p>CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度</p><p>语法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span>|<span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>|inherit;<br></code></pre></td></tr></table></figure><ul><li>content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致</li><li>border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致</li><li>inherit 指定 box-sizing 属性的值，应该从父元素继承</li></ul><p>回到上面的例子里，设置盒子为 border-box 模型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">box</span>\&quot;&gt;</span><br>盒子模型<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这时候，就可以发现盒子的所占据的宽度为200px</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css选择器</title>
    <link href="/dylan/2021/12/19/selector/"/>
    <url>/dylan/2021/12/19/selector/</url>
    
    <content type="html"><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>CSS选择器是CSS规则的第一部分</p><p>它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式</p><p>选择器所选择的元素，叫做“选择器的对象”</p><p>我们从一个<code>Html</code>结构开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one_1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one_1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于<code>css</code>属性选择器常用的有：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">id选择器（<span class="hljs-comment">#box），选择id为box的元素</span><br>类选择器（.<span class="hljs-literal">one</span>），选择类名为<span class="hljs-literal">one</span>的所有元素<br>标签选择器（<span class="hljs-keyword">div</span>），选择标签为<span class="hljs-keyword">div</span>的所有元素<br>后代选择器（<span class="hljs-comment">#box div），选择id为box元素内部所有的div元素</span><br>子选择器（.<span class="hljs-literal">one</span>&gt;one_1），选择父元素为.<span class="hljs-literal">one</span>的所有.one_1的元素<br>相邻同胞选择器（.<span class="hljs-literal">one</span>+.<span class="hljs-literal">two</span>），选择紧接在.<span class="hljs-literal">one</span>之后的所有.<span class="hljs-literal">two</span>元素<br>群组选择器（<span class="hljs-keyword">div</span>,p），选择<span class="hljs-keyword">div</span>、p的所有元素<br></code></pre></td></tr></table></figure><p>还有一些使用频率相对没那么多的选择器：</p><ul><li>伪类选择器</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">link ：选择未被访问的链接<br>visited：选取已被访问的链接<br>active：选择活动链接<br>hover ：鼠标指针浮动在上面的元素<br>focus ：选择具有焦点的<br><span class="hljs-keyword">first</span>-child：父元素的首个子元素<br></code></pre></td></tr></table></figure><ul><li>伪元素选择器</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">first</span>-letter ：用于选取指定选择器的首字母<br><span class="hljs-keyword">first</span>-<span class="hljs-built_in">line</span> ：选取指定选择器的首行<br><span class="hljs-keyword">before</span> : 选择器在被选元素的内容前面插入内容<br><span class="hljs-keyword">after</span> : 选择器在被选元素的内容后面插入内容<br></code></pre></td></tr></table></figure><ul><li>属性选择器</li></ul><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl">[<span class="hljs-keyword">attribute</span>] 选择带有<span class="hljs-keyword">attribute</span>属性的元素<br>[<span class="hljs-keyword">attribute</span>=value] 选择所有使用<span class="hljs-keyword">attribute</span>=value的元素<br>[<span class="hljs-keyword">attribute</span>~=value] 选择<span class="hljs-keyword">attribute</span>属性包含value的元素<br>[<span class="hljs-keyword">attribute</span>|=value]：选择<span class="hljs-keyword">attribute</span>属性以value开头的元素<br></code></pre></td></tr></table></figure><p>在<code>CSS3</code>中新增的选择器有如下：</p><ul><li>层次选择器（p~ul），选择前面有p元素的每个ul元素</li><li>伪类选择器</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">first</span>-of-<span class="hljs-built_in">type</span> 父元素的首个元素<br><span class="hljs-keyword">last</span>-of-<span class="hljs-built_in">type</span> 父元素的最后一个元素<br><span class="hljs-keyword">only</span>-of-<span class="hljs-built_in">type</span> 父元素的特定类型的唯一子元素<br><span class="hljs-keyword">only</span>-child 父元素中唯一子元素<br>nth-child(n) 选择父元素中第<span class="hljs-keyword">N</span>个子元素<br>nth-<span class="hljs-keyword">last</span>-of-<span class="hljs-built_in">type</span>(n) 选择父元素中第<span class="hljs-keyword">N</span>个子元素，从后往前<br><span class="hljs-keyword">last</span>-child 父元素的最后一个元素<br>root 设置HTML文档<br><span class="hljs-built_in">empty</span> 指定空的元素<br>enabled 选择被禁用元素<br>disabled 选择被禁用元素<br>checked 选择选中的元素<br>not(selector) 选择非 <span class="hljs-symbol">&lt;selector&gt;</span> 元素的所有元素<br></code></pre></td></tr></table></figure><ul><li>属性选择器</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[<span class="hljs-keyword">attribute</span>*=value]：选择<span class="hljs-keyword">attribute</span>属性值包含value的所有元素<br>[<span class="hljs-keyword">attribute</span>^=value]：选择<span class="hljs-keyword">attribute</span>属性开头为value的所有元素<br>[<span class="hljs-keyword">attribute</span>$=value]：选择<span class="hljs-keyword">attribute</span>属性结尾为value的所有元素<br></code></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>相信大家对<code>CSS</code>选择器的优先级都不陌生：</p><blockquote><p>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p></blockquote><p>到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ul><li>如果存在内联样式，那么 A = 1, 否则 A = 0</li><li>B的值等于 ID选择器出现的次数</li><li>C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数</li><li>D 的值等于 标签选择器 和 伪元素 出现的总次数</li></ul><p>这里举个例子：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#nav-global</span> &gt; <span class="hljs-selector-tag">ul</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.nav-link</span><br></code></pre></td></tr></table></figure><p>套用上面的算法，依次求出 <code>A</code> <code>B</code> <code>C</code> <code>D</code> 的值：</p><ul><li>因为没有内联样式 ，所以 A = 0</li><li>ID选择器总共出现了1次， B = 1</li><li>类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1</li><li>标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3</li></ul><p>上面算出的<code>A</code> 、 <code>B</code>、<code>C</code>、<code>D</code> 可以简记作：<code>(0, 1, 1, 3)</code></p><p>知道了优先级是如何计算之后，就来看看比较规则：</p><ul><li>从左往右依次进行比较 ，较大者优先级更高</li><li>如果相等，则继续往右移动一位进行比较</li><li>如果4位全部相等，则后面的会覆盖前面的</li></ul><p>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用<code>!important</code></p><h2 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a>继承属性</h2><p>在<code>css</code>中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性 关于继承属性，可以分成：</p><ul><li>字体系列属性</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">font</span>:组合字体<br><span class="hljs-built_in">font</span>-family:规定元素的字体系列<br><span class="hljs-built_in">font</span>-weight:设置字体的粗细<br><span class="hljs-built_in">font</span>-size:设置字体的尺寸<br><span class="hljs-built_in">font</span>-<span class="hljs-built_in">style</span>:定义字体的风格<br><span class="hljs-built_in">font</span>-variant:偏大或偏小的字体<br></code></pre></td></tr></table></figure><ul><li>文本系列属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-indent</span>：文本缩进<br><span class="hljs-attribute">text-align</span>：文本水平对齐<br><span class="hljs-attribute">line-height</span>：行高<br><span class="hljs-attribute">word-spacing</span>：增加或减少单词间的空白<br><span class="hljs-attribute">letter-spacing</span>：增加或减少字符间的空白<br><span class="hljs-attribute">text-transform</span>：控制文本大小写<br><span class="hljs-attribute">direction</span>：规定文本的书写方向<br><span class="hljs-attribute">color</span>：文本颜色<br></code></pre></td></tr></table></figure><ul><li>元素可见性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">visibility</span><br></code></pre></td></tr></table></figure><ul><li>表格布局属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">caption-side</span>：定位表格标题位置<br><span class="hljs-attribute">border-collapse</span>：合并表格边框<br><span class="hljs-attribute">border-spacing</span>：设置相邻单元格的边框间的距离<br><span class="hljs-attribute">empty-cells</span>：单元格的边框的出现与消失<br><span class="hljs-attribute">table-layout</span>：表格的宽度由什么决定<br></code></pre></td></tr></table></figure><ul><li>列表属性</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">list-style-type：文字前面的小点点样式</span><br><span class="hljs-built_in">list-style-position：小点点位置</span><br><span class="hljs-built_in">list-style：以上的属性可通过这属性集合</span><br></code></pre></td></tr></table></figure><ul><li>引用</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">quotes</span>：设置嵌套引用的引号类型<br></code></pre></td></tr></table></figure><ul><li>光标属性</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cursor：箭头可以变成需要的形状<br></code></pre></td></tr></table></figure><p>继承中比较特殊的几点：</p><ul><li>a 标签的字体颜色不能被继承</li><li>h1-h6标签字体的大下也是不能被继承的</li></ul><h2 id="无继承的属性"><a href="#无继承的属性" class="headerlink" title="无继承的属性"></a>无继承的属性</h2><ul><li>display</li><li>文本属性：vertical-align、text-decoration</li><li>盒子模型的属性：宽度、高度、内外边距、边框等</li><li>背景属性：背景图片、颜色、位置等</li><li>定位属性：浮动、清除浮动、定位position等</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正向代理与反向代理</title>
    <link href="/dylan/2021/12/18/agent/"/>
    <url>/dylan/2021/12/18/agent/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；</p><p>此时就涉及到两个角色，一个是被代理角色，一个是目标角色，被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店~客人到adidas专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是adidas厂家，目标角色就是用户。</p><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理也是大家最常接触的到的代理模式。</p><p>在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个代理工具进行访问，这个代理工具就是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！</p><p>上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</p><p>总结来说：正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><p>正向代理的用途：</p><ul><li>访问原来无法访问的资源，如Google</li><li>可以做缓存，加速访问资源</li><li>对客户端访问授权，上网进行认证</li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>明白了什么是正向代理，我们继续看关于反向代理的处理方式。</p><p>例如某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：分布式部署；</p><p>也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/%E3%80%82">http://tengine.taobao.org/。</a></p><p>多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时，请求的来源（也就是客户端）是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p><p>客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p><p>反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p><p>反向代理的作用：</p><ul><li>保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网</li><li>负载均衡，通过反向代理服务器来优化网站的负载</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>综合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器回收机制</title>
    <link href="/dylan/2021/12/17/recovery/"/>
    <url>/dylan/2021/12/17/recovery/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JS会在创建变量时自动分配内存，在不使用的时候会自动周期性的释放内存，释放的过程就叫 “垃圾回收”。</p><p>一方面自动分配内存减轻了开发者的负担，开发者不用过多的去关注内存使用，但是另一方面，正是因为因为是自动回收，所以如果不清楚回收的机制，会很容易造成混乱，而混乱就很容易造成”内存泄漏”。</p><p>由于是自动回收，所以就存在一个 “内存是否需要被回收的” 的问题，但是这个问题的判定在程序中意味着无法通过某个算法去准确完整的解决，后面探讨的回收机制只能有限的去解决一般的问题。</p><h2 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h2><p>垃圾回收对是否需要回收的问题主要依赖于对变量的判定是否可访问，由此衍生出两种主要的回收算法：</p><ul><li>标记清理</li><li>引用计数</li></ul><h2 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h2><p>标记清理是js最常用的回收策略，2012年后所有浏览器都使用了这种策略，此后的对回收策略的改进也是基于这个策略的改进。其策略是：</p><ul><li>变量进入上下文，也可理解为作用域，会加上标记，证明其存在于该上下文；</li><li>将所有在上下文中的变量以及上下文中被访问引用的变量标记去掉，表明这些变量活跃有用；</li><li>在此之后再被加上标记的变量标记为准备删除的变量，因为上下文中的变量已经无法访问它们；</li><li>执行内存清理，销毁带标记的所有非活跃值并回收之前被占用的内存；</li></ul><p>局限：</p><ul><li>由于是从根对象(全局对象)开始查找，对于那些无法从根对象查询到的对象都将被清除</li><li>回收后会形成内存碎片，影响后面申请大的连续内存空间</li></ul><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>引用计数策略相对而言不常用，因为弊端较多。其思路是对每个值记录它被引用的次数，通过最后对次数的判断(引用数为0)来决定是否保留，具体的规则有：</p><ul><li>声明一个变量，赋予它一个引用值时，计数+1；</li><li>同一个值被赋予另外一个变量时，引用+1；</li><li>保存对该值引用的变量被其他值覆盖，引用-1；</li><li>引用为0，回收内存；</li></ul><p>局限：</p><p>最重要的问题就是，循环引用 的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">refProblem</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    a.c = b;<br>    b.c = a;  <span class="hljs-comment">//互相引用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>根据之前提到的规则，两个都互相引用了，引用计数不为0，所以两个变量都无法回收。如果频繁的调用改函数，则会造成很严重的内存泄漏。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>综合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript中的错误类型</title>
    <link href="/dylan/2021/12/16/error/"/>
    <url>/dylan/2021/12/16/error/</url>
    
    <content type="html"><![CDATA[<h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><code>Error</code>是最基本的错误类型，其他的错误类型都继承自该类型。因此，所有错误的类型共享了一组相同的属性。 这个类型的错误很少见。一般使用开发人员自定义抛出的错误。</p><h2 id="EvalError"><a href="#EvalError" class="headerlink" title="EvalError"></a>EvalError</h2><p>这个错误会在使用<code>eval()</code>函数发生异常时候抛出。两种情况会出错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">eval</span>();<br><span class="hljs-built_in">eval</span> = foo;<br></code></pre></td></tr></table></figure><p>上面两个的意思结合就是没有直接调用<code>eval</code>函数，而是<code>new</code>或者是重新赋值 这个错误基本上不会遇到，因为<code>eval</code>函数本来用的就不多。不过需要注意的是，<code>eval</code>是一个关键字。</p><h2 id="RangeError"><a href="#RangeError" class="headerlink" title="RangeError"></a>RangeError</h2><p>这个错误会在数值超出相应范围时触发。比如使用<code>new Array()</code>的时候传递一个负数或者是超过数组最大长度（4,294,967,295）的数，比如Number.MAX_VALUE，Number.MIN_VALUE。注意递归爆炸也有这个错误。</p><h2 id="ReferenceError"><a href="#ReferenceError" class="headerlink" title="ReferenceError"></a>ReferenceError</h2><p>这个错误一般就是出现在变量找不到的情况，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = b;<br>Uncaught <span class="hljs-built_in">ReferenceError</span>: b is not defined<br></code></pre></td></tr></table></figure><p>这时候就需要检查一下一个变量了</p><h2 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError"></a>SyntaxError</h2><p>当Javascript语言解析代码时,Javascript引擎发现了不符合语法规范的tokens或token顺序时抛出SyntaxError。</p><h2 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h2><p>这个错误在JavaScript中是经常遇到的，不管是初学者还是老手。在变量中保存着以外的类型时，或者在访问不存在的方法时。都会导致这种错误。但是归根结底还是由于在执行特定于类型的操作时，变量的类型并不符合要求所致。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-number">10</span>;<br>a.style.widht = <span class="hljs-string">&quot;10px&quot;</span>;<br></code></pre></td></tr></table></figure><p>关于设置样式这个东西，新手会遇到很多，一般这都是由获取不到元素导致的。</p><h2 id="URIError"><a href="#URIError" class="headerlink" title="URIError"></a>URIError</h2><p>在使用encodeURI或者decodeURI因为URL格式不正确时，就会导致URIError错误。这种错误也很少见。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http常用状态码</title>
    <link href="/dylan/2021/12/10/http/"/>
    <url>/dylan/2021/12/10/http/</url>
    
    <content type="html"><![CDATA[<h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><p>1xx，信息性状态码，接受的请求正在处理。</p><p>2xx，成功状态码，请求正常处理完毕。</p><p>3xx，重定向，需要进行附加操作以完成请求。</p><p>4xx，客户端错误，客户端请求出错，服务器无法处理请求。</p><p>5xx，服务器错误，服务器处理请求出错。</p><h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><p>200：请求成功，表明服务器成功处理了请求。</p><p>201：作为 http post 请求的结果，已在服务器上成功创建了一个或多个新资源。</p><p>202：服务器已接收请求，但尚未处理。通常用于还有异步任务需要执行的情况，先返回202。</p><p>204：服务器成功处理了请求，但没有返回任何内容。</p><p>206：表示客户端进行了范围请求，并且服务器成功执行了这部分的get请求。</p><h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><p>300：针对请求，服务器可执行多种操作。</p><p>301：永久重定向。</p><p>302：临时重定向。</p><p>303:303与302状态码有着相同的功能，但303状态码明确表示客户端应当采用get方法获取资源。常用于将post请求重定向到get请求，比如你上传了一份个人信息，服务器回发一个303响应，将你导向一个“上传成功”页面。</p><h2 id="301和302的区别"><a href="#301和302的区别" class="headerlink" title="301和302的区别"></a>301和302的区别</h2><p>301比较常用的场景是使用域名跳转。比如，访问 <a href="http://www.baidu.com/">http://www.baidu.com</a> 会跳转到 <a href="https://www.baidu.com./">https://www.baidu.com。</a></p><p>302用来做临时跳，比如未登录的用户访问用户中心重定向到登录页面。</p><h2 id="302和307的区别"><a href="#302和307的区别" class="headerlink" title="302和307的区别"></a>302和307的区别</h2><p>由于历史的原因，用户代理可能会在重定向后的请求中把post方法改为get方法，如果不想这样，应该使用307状态码。</p><h2 id="301和308的区别"><a href="#301和308的区别" class="headerlink" title="301和308的区别"></a>301和308的区别</h2><p>308状态码不允许浏览器将原本为post的请求重定向到get请求上。</p><h2 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h2><p>400：该状态码表示请求文中存在错误。但浏览器会像200一样对待该状态码。</p><p>401：表示发送的请求需要有通过HTTP认证的认证信息，比如token失效就会出现这个问题。</p><p>403：被拒绝，表明对请求资源的访问被服务器拒绝了。没有权限的问题。</p><p>404：找不到，表明服务器上无法找到请求的资源，也可能是拒绝请求但不想说明原因。</p><p>409：表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p><p>415：请求资源类型 content-type 不支持。</p><p>418：在项目中用作彩蛋。</p><p>422：语法正确，有语义错误。用户名密码错误，验证码错误等。</p><p>429：用户在给定的时间内发送了太多的请求。皆在用于网络限速。</p><h2 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h2><p>500：服务器本身发生错误，可能是web应用存在的bug或某些临时的故障。</p><p>502：通常意味着一两个机器已经不正确，简单点说，就是机器挂掉了。执行请求的时候，却收到了上游服务器的无效相应。</p><p>503：服务器目前无法使用，临时性的服务器维护/过载。通常刷新客户端便好。</p><p>504：请求超时。</p><h2 id="502和504的区别"><a href="#502和504的区别" class="headerlink" title="502和504的区别"></a>502和504的区别</h2><p>503表示网关可用，但是请求超时。</p><p>502表示没有可用的网关。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件流、事件捕获、事件冒泡、事件委托或事件代理</title>
    <link href="/dylan/2021/12/03/event/"/>
    <url>/dylan/2021/12/03/event/</url>
    
    <content type="html"><![CDATA[<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流分为三个阶段：捕获阶段、目标阶段、冒泡阶段</p><p>捕获阶段：从最外层一层一层到目标</p><p>目标阶段：执行目标的事件</p><p>冒泡阶段：从目标一层一层到最外层</p><p>事件函数的执行默认都是在冒泡阶段执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>    #a &#123;<br>        <span class="hljs-attr">width</span>: 300px;<br>        height: 300px;<br>        background-color: black;<br>    &#125;<br><br>    #b &#123;<br>        <span class="hljs-attr">width</span>: 200px;<br>        height: 200px;<br>        background-color: blue;<br>    &#125;<br><br>    #c &#123;<br>        <span class="hljs-attr">width</span>: 100px;<br>        height: 100px;<br>        background-color: red;<br>    &#125;<br>&lt;/style&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml">b.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml">c.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>点击红色方块(c元素)，打印顺序为 cba</p></blockquote><p>说明事件函数的执行是在冒泡阶段执行，给 addEventListener 第三个参数设为 true 时。</p><blockquote><p>点击红色方块(c元素)，打印顺序为abc</p></blockquote><p>说明事件函数的执行在捕获阶段。</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>顾名思义，将子级的事件委托给父级完成，通过 e.target 实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> e = e || event<br>    <span class="hljs-keyword">let</span> target = e.target || e.srcElement<br>    <span class="hljs-built_in">console</span>.log(target)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>点击红色方块(c元素)，打印结果是 c 的 dom 对象</p></blockquote><p>代码中并未给元素c绑定事件函数，而打印出了 c 的 dom 对象，说明 c 的事件委托给了 a </p><h2 id="取消冒泡"><a href="#取消冒泡" class="headerlink" title="取消冒泡"></a>取消冒泡</h2><p>bubbles：event 的冒泡属性，默认为 true。</p><p>stopPropagation：取消事件冒泡和委托函数的执行。</p><p>stopImmediatePropagation：取消事件冒泡和委托函数的执行，并中断同一事件函数的执行（比如在 a 元素的第一个点击事件执行 e.stopImmediatePropagation() ，则 a 元素的第二个点击事件不会执行）</p><p>cancelBubble: e.cancelBubble = true 取消事件冒泡</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>)<br>&#125;)<br>b.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>)<br>&#125;)<br>c.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e.bubbles)<br>    e.stopPropagation() <span class="hljs-comment">//或者 e.cancelbubbles = true</span><br> e.stopImmediatePropagation()<br>&#125;)<br>c.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>点击红色方块(c元素)，只会输出 true</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Object.prototype.toString实现myTypeof</title>
    <link href="/dylan/2021/11/26/typeof/"/>
    <url>/dylan/2021/11/26/typeof/</url>
    
    <content type="html"><![CDATA[<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>除了 null、undefined 不能使用 toString 方法外，其他数据类型都可以使用 toString 方法，实际上，这个 toString 方法是当前引用对象的方法，将传入 toString 的参数转为 string 类型并返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>.toString())   <span class="hljs-comment">//123</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-number">123</span>).toString())   <span class="hljs-comment">//123 不加括号报错，加括号是为了求值？</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString())  <span class="hljs-comment">//当前时间</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>().toString())    <span class="hljs-comment">///(?:)/</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;.toString())    <span class="hljs-comment">//function()&#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span>.toString())   <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(&#123;<span class="hljs-number">1</span>:<span class="hljs-number">1</span>&#125;.toString())   <span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure><p>我的理解：根据最后一条输出结果判定，toString 方法来自 Object 原型</p><h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString"></a>Object.prototype.toString</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-string">&#x27;123&#x27;</span>))   <span class="hljs-comment">//[object String]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">123</span>))    <span class="hljs-comment">//[object Number]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;))   <span class="hljs-comment">//[object Function]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">false</span>))  <span class="hljs-comment">//[object Boolean]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())) <span class="hljs-comment">//[object Date]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>)) <span class="hljs-comment">//[object RegExp]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(&#123;&#125;)) <span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure><p>可以利用 Object.prototype.toString 写一个 myTypeof</p><h2 id="扩展typeof"><a href="#扩展typeof" class="headerlink" title="扩展typeof"></a>扩展typeof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTypeof</span>(<span class="hljs-params">val</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">typeof</span> val<br>    <span class="hljs-keyword">let</span> temp = &#123;<br>        <span class="hljs-string">&quot;[object Function]&quot;</span>:<span class="hljs-string">&quot;Function&quot;</span>,<br>        <span class="hljs-string">&quot;[object Date]&quot;</span>:<span class="hljs-string">&quot;Date&quot;</span>,<br>        <span class="hljs-string">&quot;[object RegExp]&quot;</span>:<span class="hljs-string">&quot;RegExp&quot;</span>,<br>        <span class="hljs-string">&quot;[object Array]&quot;</span>:<span class="hljs-string">&quot;Array&quot;</span>,<br>        <span class="hljs-string">&quot;[object Object]&quot;</span>:<span class="hljs-string">&quot;Object&quot;</span><br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(val===<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val===<span class="hljs-literal">undefined</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;undefined&quot;</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(res === <span class="hljs-string">&quot;object&quot;</span>)&#123;<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">Object</span>.prototype.toString.call(val)<br>        <span class="hljs-keyword">return</span> (temp[str])<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-literal">undefined</span>))    <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-literal">null</span>)) <span class="hljs-comment">//null</span><br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-number">123</span>))  <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()))   <span class="hljs-comment">//Date</span><br><span class="hljs-built_in">console</span>.log(myTypeof([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))    <span class="hljs-comment">//Array</span><br><span class="hljs-built_in">console</span>.log(myTypeof(&#123;<span class="hljs-number">1</span>:<span class="hljs-number">2</span>&#125;))    <span class="hljs-comment">//Object</span><br></code></pre></td></tr></table></figure><p>类型没写完，思路就这样。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="/dylan/2021/11/23/clone/"/>
    <url>/dylan/2021/11/23/clone/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对象在内存中的存储方式与基本类型不一样，储存对象内存会单独开辟出一个堆，对象名指向这个堆的地址，到达一种引用的效果，而传统的<code>a = b</code> 如果是对象的话，只会拷贝对象的地址，a 和 b 指向的是同一个地址，从而改变对象 a 的值，b 的值也会发生改变，起不了拷贝作用。</p><h2 id="浅拷贝（对象只有一层）"><a href="#浅拷贝（对象只有一层）" class="headerlink" title="浅拷贝（对象只有一层）"></a>浅拷贝（对象只有一层）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>       <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>       <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">simpleClone</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>       <span class="hljs-keyword">let</span> cloneObj = &#123;&#125;<br>       <span class="hljs-comment">//es3</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj)&#123;<br>           cloneObj[i] = obj[i]<br>       &#125;<br>       <span class="hljs-comment">//es6</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [key,value] <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.entries(obj))&#123;<br>           cloneObj[key] = value<br>       &#125;<br>       <span class="hljs-comment">//es5</span><br>       <span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>)</span>&#123;<br>           <span class="hljs-comment">// cloneObj[key] = obj[key]</span><br>           <span class="hljs-keyword">var</span> des = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj,key) <span class="hljs-comment">//属性描述符</span><br>           <span class="hljs-built_in">Object</span>.defineProperty(cloneObj,key,des) <span class="hljs-comment">//定义对象属性</span><br>       &#125;)<br>       <span class="hljs-keyword">return</span> cloneObj<br>   &#125;<br>   <span class="hljs-keyword">let</span> newObj = simpleClone(obj)<br>   obj.a = <span class="hljs-number">3</span><br>   <span class="hljs-built_in">console</span>.log(newObj)<span class="hljs-comment">//结果为&#123;a:1,b:2&#125;</span><br></code></pre></td></tr></table></figure><h2 id="深拷贝（对象有多层）"><a href="#深拷贝（对象有多层）" class="headerlink" title="深拷贝（对象有多层）"></a>深拷贝（对象有多层）</h2><p>简易版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>:&#123;<br>        <span class="hljs-attr">c</span>:<span class="hljs-number">3</span>,<br>        <span class="hljs-attr">d</span>:&#123;<br>            <span class="hljs-attr">e</span>:<span class="hljs-number">4</span><br>        &#125;,<br>    &#125;,<br>    <span class="hljs-attr">f</span>:<span class="hljs-number">8</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> cloneObj = &#123;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj[i] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[i]!==<span class="hljs-literal">null</span>)&#123;<br>            cloneObj[i] = deepClone(obj[i])<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cloneObj[i] = obj[i]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cloneObj<br>&#125;<br><span class="hljs-keyword">let</span> newObj = deepClone(obj)<br>obj.b.c = <span class="hljs-number">7</span><br><span class="hljs-built_in">console</span>.log(newObj)<br></code></pre></td></tr></table></figure><p>完整版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>,<br>        <span class="hljs-attr">b</span>: &#123;<br>            <span class="hljs-attr">c</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">d</span>: &#123;<br>                <span class="hljs-attr">e</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-built_in">Symbol</span>(<span class="hljs-number">3</span>)]<br>            &#125;,<br>        &#125;,<br>        <span class="hljs-attr">f</span>: <span class="hljs-number">4</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> getType = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(obj);<br><br>    <span class="hljs-keyword">const</span> isObject = <span class="hljs-function">(<span class="hljs-params">target</span>) =&gt;</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;function&#x27;</span>) &amp;&amp; target !== <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">const</span> canTraverse = &#123;<br>        <span class="hljs-string">&#x27;[object Map]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Set]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Array]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Object]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Arguments]&#x27;</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>    <span class="hljs-keyword">const</span> mapTag = <span class="hljs-string">&#x27;[object Map]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> setTag = <span class="hljs-string">&#x27;[object Set]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> boolTag = <span class="hljs-string">&#x27;[object Boolean]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> numberTag = <span class="hljs-string">&#x27;[object Number]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> stringTag = <span class="hljs-string">&#x27;[object String]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> symbolTag = <span class="hljs-string">&#x27;[object Symbol]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> dateTag = <span class="hljs-string">&#x27;[object Date]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> errorTag = <span class="hljs-string">&#x27;[object Error]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> regexpTag = <span class="hljs-string">&#x27;[object RegExp]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> funcTag = <span class="hljs-string">&#x27;[object Function]&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> handleRegExp = <span class="hljs-function">(<span class="hljs-params">target</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; source, flags &#125; = target;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> target.constructor(source, flags);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> handleFunc = <span class="hljs-function">(<span class="hljs-params">func</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 箭头函数直接返回自身</span><br>        <span class="hljs-keyword">if</span> (!func.prototype) <span class="hljs-keyword">return</span> func;<br>        <span class="hljs-keyword">const</span> bodyReg = <span class="hljs-regexp">/(?&lt;=&#123;)(.|\n)+(?=&#125;)/m</span>;<br>        <span class="hljs-keyword">const</span> paramReg = <span class="hljs-regexp">/(?&lt;=\().+(?=\)\s+&#123;)/</span>;<br>        <span class="hljs-keyword">const</span> funcString = func.toString();<br>        <span class="hljs-comment">// 分别匹配 函数参数 和 函数体</span><br>        <span class="hljs-keyword">const</span> param = paramReg.exec(funcString);<br>        <span class="hljs-keyword">const</span> body = bodyReg.exec(funcString);<br>        <span class="hljs-keyword">if</span> (!body) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (param) &#123;<br>            <span class="hljs-keyword">const</span> paramArr = param[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(...paramArr, body[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(body[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> handleNotTraverse = <span class="hljs-function">(<span class="hljs-params">target, tag</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> Ctor = target.constructor;<br>        <span class="hljs-keyword">switch</span> (tag) &#123;<br>            <span class="hljs-keyword">case</span> boolTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">Boolean</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> numberTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">Number</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> stringTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">String</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> symbolTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">Symbol</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> errorTag:<br>            <span class="hljs-keyword">case</span> dateTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Ctor(target);<br>            <span class="hljs-keyword">case</span> regexpTag:<br>                <span class="hljs-keyword">return</span> handleRegExp(target);<br>            <span class="hljs-keyword">case</span> funcTag:<br>                <span class="hljs-keyword">return</span> handleFunc(target);<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Ctor(target);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> deepClone = <span class="hljs-function">(<span class="hljs-params">target, map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isObject(target))<br>            <span class="hljs-keyword">return</span> target;<br>        <span class="hljs-keyword">let</span> type = getType(target);<br>        <span class="hljs-keyword">let</span> cloneTarget;<br>        <span class="hljs-keyword">if</span> (!canTraverse[type]) &#123;<br>            <span class="hljs-comment">// 处理不能遍历的对象</span><br>            <span class="hljs-keyword">return</span> handleNotTraverse(target, type);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 这波操作相当关键，可以保证对象的原型不丢失！</span><br>            <span class="hljs-keyword">let</span> ctor = target.constructor;<br>            cloneTarget = <span class="hljs-keyword">new</span> ctor();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (map.get(target))<br>            <span class="hljs-keyword">return</span> target;<br>        map.set(target, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">if</span> (type === mapTag) &#123;<br>            <span class="hljs-comment">//处理Map</span><br>            target.forEach(<span class="hljs-function">(<span class="hljs-params">item, key</span>) =&gt;</span> &#123;<br>                cloneTarget.set(deepClone(key, map), deepClone(item, map));<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (type === setTag) &#123;<br>            <span class="hljs-comment">//处理Set</span><br>            target.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                cloneTarget.add(deepClone(item, map));<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-comment">// 处理数组和对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-keyword">if</span> (target.hasOwnProperty(prop)) &#123;<br>                cloneTarget[prop] = deepClone(target[prop], map);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cloneTarget;<br>    &#125;<br>    <span class="hljs-keyword">let</span> newObj = deepClone(obj)<br>    <span class="hljs-built_in">console</span>.log(newObj)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包（二）</title>
    <link href="/dylan/2021/11/22/closure2/"/>
    <url>/dylan/2021/11/22/closure2/</url>
    
    <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>定义：在一定时间间隔内，将多次触发变为一次触发，类似技能打断施法重新读条🤭</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ipt&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ipt&#x27;</span>)<br>ipt.addEventListener(<span class="hljs-string">&#x27;input&#x27;</span>,debounce(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;,<span class="hljs-number">2000</span>))<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn,delay</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(timer)&#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>        &#125;<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            fn()<br>        &#125;,delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>定义：一段时间间隔内只执行一次，类似技能冷却🤭</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ipt&#x27;</span>)<br>ipt.addEventListener(<span class="hljs-string">&#x27;input&#x27;</span>, throttle(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;, <span class="hljs-number">2000</span>))<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn()<br>            timer = <span class="hljs-literal">null</span><br>        &#125;, delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>防抖(debounce)<br>（1）search搜索联想，用户在不断输入值时，用防抖来节约请求资源。<br>（2）window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li><li>节流(throttle)<br>（1）鼠标不断点击触发，mousedown(单位时间内只触发一次)。<br>（2）监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断。</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包（一）</title>
    <link href="/dylan/2021/11/21/closure1/"/>
    <url>/dylan/2021/11/21/closure1/</url>
    
    <content type="html"><![CDATA[<h2 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么"></a>闭包是什么</h2><p>犀牛书：函数对象可以通过作用域链相互关联起来，函数体内部的变量可以保存在函数作用域内，这种特性在计算机科学文献中称为“闭包”。</p><p>红宝书：闭包是指有权访问另一个函数作用域中的变量的函数。</p><p>你不知道的 JavaScript：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p><p>MDN：一个函数和对其周围状态（词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包。</p><p>个人理解：函数的执行，导致函数被定义，并抛出函数（每本书理解不一致）。</p><h2 id="闭包的常见形式"><a href="#闭包的常见形式" class="headerlink" title="闭包的常见形式"></a>闭包的常见形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure1</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(n)&#125;<br>   &#125;<br>   closure1()()  <span class="hljs-comment">//0</span><br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure2</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> n = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>)&#125;<br>       <span class="hljs-keyword">return</span> n<br>   &#125;<br>   closure2()()  <span class="hljs-comment">//0</span><br><br>   <span class="hljs-keyword">var</span> a<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure3</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span><br>       a = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">console</span>.log(b)<br>       &#125;<br>   &#125;<br>   closure3()  <span class="hljs-comment">//0</span><br>   a()<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure4</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">var</span> n = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-keyword">return</span> b<br>       &#125;<br>       a(n)<br>   &#125;<br>   closure4()  <span class="hljs-comment">//0</span><br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure5</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">var</span> arr = []<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>           arr[i] = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>) </span>&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">console</span>.log(j)<br>               &#125;<br>           &#125;)(i)<br>       &#125;<br>       <span class="hljs-keyword">return</span> arr<br>   &#125;<br>   <span class="hljs-keyword">var</span> doClosure5 = closure5()<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>       doClosure5[j]() <br>   &#125;<span class="hljs-comment">//0,1,2,3,4,5,6,7,8,9</span><br><br>   <span class="hljs-keyword">var</span> doClosure6 = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-keyword">return</span> ++count<br>       &#125;<br>   &#125;)()<br>   <span class="hljs-built_in">console</span>.log(doClosure6())  <span class="hljs-comment">//1</span><br>   <span class="hljs-built_in">console</span>.log(doClosure6())  <span class="hljs-comment">//2</span><br>   <span class="hljs-built_in">console</span>.log(doClosure6())  <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>闭包会产生内存泄漏，使用闭包产生的变量会一直存在内存当中，不会被垃圾回收机制回收，不应当大量使用闭包。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片懒加载</title>
    <link href="/dylan/2021/11/20/lazyImg/"/>
    <url>/dylan/2021/11/20/lazyImg/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>offsetTop<br>元素到顶部到 offsetParent 顶部的距离</li><li>offsetParent<br>距离元素最近的一个具有定位的父级元素，若父级元素都不符合条件，则 offsetParent 为 body</li><li>clientHeight<br>元素宽高（height+padding）</li><li>scrollTop<br>Y轴的滚动条</li></ol><p>可以得出当 scrollTop + clientHeight &gt; offsetTop（距离body顶部）时，视当前元素在可视区域，而此时再为 img 的 src 属性赋值，请求才会发出，从而达到图片懒加载的效果。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/1.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/2.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/3.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/4.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/5.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/6.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/7.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/8.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/9.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.img</span> <span class="hljs-selector-tag">img</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;<br>        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eeeeee</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> imgs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTop</span>(<span class="hljs-params">e</span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> H = e.offsetTop<br>           <span class="hljs-keyword">while</span> (e = e.offsetParent) &#123;<br>                H += e.offsetTop<br>           &#125;<br>           <span class="hljs-keyword">return</span> H<br>      &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazyImg</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> H = <span class="hljs-built_in">document</span>.documentElement.clientHeight <br>      <span class="hljs-keyword">var</span> S = <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imgs.length; i++) &#123;<br>           <span class="hljs-keyword">if</span> (H + S &gt; getTop(imgs[i])&amp;&amp;!imgs[i].src) &#123;<br>                 imgs[i].src = imgs[i].getAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>)<br>           &#125;<br>      &#125;<br>&#125;<br>        <br><span class="hljs-built_in">window</span>.onload = <span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      lazyImg(imgs)<br>&#125;<br></code></pre></td></tr></table></figure><p>代码比较简单，可以优化，比如 onload 时设置 scrollTop 为 0，给 lazyImg 添加防抖函数，但其核心思想在于只有图片元素进入视口时才进行加载。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超级好看的 css 样式</title>
    <link href="/dylan/2021/11/18/button/"/>
    <url>/dylan/2021/11/18/button/</url>
    
    <content type="html"><![CDATA[<h2 id="倒影效果"><a href="#倒影效果" class="headerlink" title="倒影效果"></a>倒影效果</h2><p><img src="/dylan/imgs/button/1.gif"></p><p>HTML:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn_family btn_family1&quot;</span>&gt;<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn1&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn2&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn3&quot;</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn4&quot;</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn5&quot;</span>&gt;</span>按钮5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>CSS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs javascript">body &#123;<br>       background-color: black;<br>   &#125;<br><br>   .btn_family &#123;<br>       <span class="hljs-attr">display</span>: flex;<br>       justify-content: space-between;<br>       padding: 50px;<br>   &#125;<br><br>   .btn &#123;<br>       line-height: 100px;<br>       text-align: center;<br>       color: white;<br>       width: 200px;<br>       height: 100px;<br>       border-radius: 10px;<br>       background-color: black;<br>       -webkit-box-reflect: below 16px -webkit-linear-gradient(transparent, transparent <span class="hljs-number">30</span>%, rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.6</span>));<br>   &#125;<br>   .btn1&#123;<br>       <span class="hljs-attr">color</span>: #d71345;<br>   &#125;<br>   .btn2&#123;<br>       <span class="hljs-attr">color</span>: #f36c21;<br>   &#125;<br>   .btn3&#123;<br>       <span class="hljs-attr">color</span>: #ffd400;<br>   &#125;<br>   .btn4&#123;<br>       <span class="hljs-attr">color</span>: #65c294;<br>   &#125;<br>   .btn5&#123;<br>       <span class="hljs-attr">color</span>: #33a3dc;<br>   &#125;<br>   .btn:hover&#123;<br>       <span class="hljs-attr">color</span>: white;<br>   &#125;<br>   .btn1:hover &#123;<br>       background-color: #d71345;<br>       box-shadow: 0px 0px 10px 3px #d71345;<br>   &#125;<br><br>   .btn2:hover &#123;<br>       background-color: #f36c21;<br>       box-shadow: 0px 0px 10px 3px #f36c21;<br>   &#125;<br><br>   .btn3:hover &#123;<br>       background-color: #ffd400;<br>       box-shadow: 0px 0px 10px 3px #ffd400;<br>   &#125;<br><br>   .btn4:hover &#123;<br>       background-color: #65c294;<br>       box-shadow: 0px 0px 10px 3px #65c294;<br>   &#125;<br><br>   .btn5:hover &#123;<br>       background-color: #33a3dc;<br>       box-shadow: 0px 0px 10px 3px #33a3dc;<br>   &#125;<br><br>   div &#123;<br>       <span class="hljs-attr">position</span>: relative;<br>   &#125;<br><br>   .btn1::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #d71345;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn2::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #f36c21;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn3::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #ffd400;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn4::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #65c294;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn5::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #33a3dc;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   @keyframes clippath &#123;<br><br>       <span class="hljs-number">0</span>%,<br>       <span class="hljs-number">100</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">95</span>% <span class="hljs-number">0</span>);<br>       &#125;<br><br>       <span class="hljs-number">25</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">0</span> <span class="hljs-number">95</span>% <span class="hljs-number">0</span> <span class="hljs-number">0</span>);<br>       &#125;<br><br>       <span class="hljs-number">50</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">95</span>% <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>);<br>       &#125;<br><br>       <span class="hljs-number">75</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">95</span>%);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="拟态"><a href="#拟态" class="headerlink" title="拟态"></a>拟态</h2><p><img src="/dylan/imgs/button/2.png"></p><p>HTML：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;Hello world&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">body &#123;<br>       <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>       width: 100vw;<br>       height: 100vh;<br>       background-color: #55b9f3;<br>       display: flex;<br>       align-items: center;<br>       justify-content: center;<br>   &#125;<br><br>   .btn &#123;<br>       <span class="hljs-attr">width</span>: 200px;<br>       height: 200px;<br>       line-height: 200px;<br>       text-align: center;<br>       color: white;<br>       border-radius: 50px;<br>       background: #55b9f3;<br>       box-shadow: 20px 20px 60px #489dcf,<br>           -20px -20px 60px #62d5ff;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="毛玻璃"><a href="#毛玻璃" class="headerlink" title="毛玻璃"></a>毛玻璃</h2><p><img src="/dylan/imgs/button/3.png"></p><p>HTML:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;Hello world&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">body &#123;<br>       <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>       width: 100vw;<br>       height: 100vh;<br>       background: url(<span class="hljs-string">&#x27;./4.png&#x27;</span>);<br>       background-repeat: no-repeat;<br>       background-size: 100vw 100vh;<br>       background-position: center center;<br>       display: flex;<br>       align-items: center;<br>       justify-content: center;<br>   &#125;<br><br>   .btn &#123;<br>       <span class="hljs-attr">padding</span>: 40px 30px;<br>       font-size: 24px;<br>       border-radius: 12px;<br>       background-color: rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">.2</span>);<br>       backdrop-filter: blur(15px);<br>       box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">0</span> 10px #<span class="hljs-number">333</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>setTimeout、setInterval(二)</title>
    <link href="/dylan/2021/11/17/settimeout2/"/>
    <url>/dylan/2021/11/17/settimeout2/</url>
    
    <content type="html"><![CDATA[<h2 id="使用setInterval实现setTimeout"><a href="#使用setInterval实现setTimeout" class="headerlink" title="使用setInterval实现setTimeout"></a>使用setInterval实现setTimeout</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mySetInterval</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        fn()<br>        <span class="hljs-built_in">clearInterval</span>(timer)<br>    &#125;, delay)<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br>mySetInterval(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">888</span>), <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h2 id="使用setTimeout实现setInterval"><a href="#使用setTimeout实现setInterval" class="headerlink" title="使用setTimeout实现setInterval"></a>使用setTimeout实现setInterval</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mySetTimout</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">const</span> interval = <span class="hljs-function">() =&gt;</span> &#123;<br>        fn()<br>        timer = <span class="hljs-built_in">setTimeout</span>(interval, delay)<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(interval, delay)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">cancel</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">const</span> &#123; cancel &#125; = mySetTimout(<span class="hljs-function">() =&gt;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">888</span>), <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        cancel()<br>&#125;, <span class="hljs-number">4000</span>)<br></code></pre></td></tr></table></figure><h2 id="requestAnimationFrame使用"><a href="#requestAnimationFrame使用" class="headerlink" title="requestAnimationFrame使用"></a>requestAnimationFrame使用</h2><p>requestAnimationFrame 是浏览器用于定时循环操作的一个接口，是按帧对页面进行重绘，效果会比 setInterval 好，因为 setInterval 是异步任务，当同步任务执行时间大于 setInterval 的时间间隔时，setInterval 便不会按照时间间隔执行，setInterval 的执行是时间间隔一到便放在执行栈上执行，js 是单线程，当执行栈上还有任务时，setInterval 的回调函数会等待执行，而 requestAnimationFrame 是根据系统的时间间隔执行，也就是帧。</p><p>下面分别使用 setTimeout 、setInterval 、requestAnimationFrame 实现进度条例子</p><p>html：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;time&quot;</span> style=<span class="hljs-string">&quot;width: 0px;height: 20px;line-height: 20px;background-color: red;&quot;</span>&gt;<span class="hljs-number">0</span>%&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>setInterval版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">time.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(time.style.width)&lt;<span class="hljs-number">300</span>)&#123;<br>            time.style.width = <span class="hljs-built_in">parseInt</span>(time.style.width) + <span class="hljs-number">3</span> + <span class="hljs-string">&quot;px&quot;</span><br>            time.innerHTML = <span class="hljs-built_in">parseInt</span>(time.style.width)/<span class="hljs-number">3</span> + <span class="hljs-string">&quot;%&quot;</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">clearInterval</span>(timer)<br>        &#125;<br>    &#125;,<span class="hljs-number">16</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>setTimeout版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">time.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(time.style.width)&lt;<span class="hljs-number">300</span>)&#123;<br>            time.style.width = <span class="hljs-built_in">parseInt</span>(time.style.width) + <span class="hljs-number">3</span> + <span class="hljs-string">&quot;px&quot;</span><br>            time.innerHTML = <span class="hljs-built_in">parseInt</span>(time.style.width)/<span class="hljs-number">3</span> + <span class="hljs-string">&quot;%&quot;</span><br>            timer = <span class="hljs-built_in">setTimeout</span>(fn, <span class="hljs-number">16</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">clearInterval</span>(timer)<br>        &#125;<br>    &#125;,<span class="hljs-number">16</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>requestAnimationFrame版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">time.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> timer = requestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(time.style.width)&lt;<span class="hljs-number">300</span>)&#123;<br>            time.style.width = <span class="hljs-built_in">parseInt</span>(time.style.width) + <span class="hljs-number">3</span> + <span class="hljs-string">&quot;px&quot;</span><br>            time.innerHTML = <span class="hljs-built_in">parseInt</span>(time.style.width)/<span class="hljs-number">3</span> + <span class="hljs-string">&quot;%&quot;</span><br>            timer = requestAnimationFrame(fn);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cancelAnimationFrame(timer)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>setTimeout、setInterval(一)</title>
    <link href="/dylan/2021/11/16/settimeout1/"/>
    <url>/dylan/2021/11/16/settimeout1/</url>
    
    <content type="html"><![CDATA[<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>特性：</p><ol><li>几毫秒后执行一次</li><li>最小时间间隔4ms</li><li>返回数字标识</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//1s后打印1</span><br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>回调函数也可以换成字符串，原理是浏览器解析了两次（不建议使用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;console.log(1)&quot;</span>,<span class="hljs-number">1000</span>) <span class="hljs-comment">//1s后打印1</span><br></code></pre></td></tr></table></figure><p>虽然最小时间间隔为4ms，但浏览器还是会根据时间大小打印，小于1ms则会按1ms执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer1 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> timer3 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>) <br>&#125;,<span class="hljs-number">3</span>)<br><span class="hljs-keyword">var</span> timer4 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>) <span class="hljs-comment">//</span><br>&#125;,<span class="hljs-number">0.1</span>)<br><span class="hljs-keyword">var</span> timer5 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>)<br>&#125;,<span class="hljs-number">0.2</span>)<br><span class="hljs-keyword">var</span> timer6 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>)<br>&#125;,<span class="hljs-number">0.3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>打印顺序为：1 4 5 6 2 3</p></blockquote><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>特性：</p><ol><li>间隔几毫秒持续执行</li><li>最小时间间隔为10ms</li><li>返回数字标识</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//每隔1s执行一次</span><br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>其他特性与 <code>setTimeout</code> 类似</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ol><li><code>clearTimeout()</code> 方法可以清除 Interval，同理，<code>clearInterval()</code>方法也可以清除 Timeout（不建议，会造成语义歧义）</li><li>浏览器的刷新频率是 <code>60HZ</code> ，每秒屏幕的刷新次数为 <code>1000/60 ≈ 16.67</code>，即建议在使用 setInterval 实现动画的时候，最小时间间隔为16ms或17ms，这样会使动画看上去更丝滑。</li><li>setTimeout 与 setInterval 回调函数里的 this 都是指向window，改变 this 指向可以使用 apply 、call 、bind</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端三大登陆方式</title>
    <link href="/dylan/2021/11/14/login/"/>
    <url>/dylan/2021/11/14/login/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTTP 是无状态协议，每次和后端重新建立连接的话，后端无法判断请求是否每次来自于同一个用户，所以诞生了 cookie，会随 HTTP 请求一起发送</p><p>cookie 携带了用户信息，但后端还需要验证，得通过 session 对象。而 session 存储了一些用户信息，存在后端是避免前端存储敏感数据。通常存在缓存里，比如 jvm 本地缓存、redis 分布式缓存</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul><li>首次登录：用户输入账号密码，前端发 HTTP 请求，后端验证时会创建 sessionId，并保存 sessionId 和 session 的映射关系，然后通过 Set-Cookie 头将 sessionId 种到 Cookie 中，存到前端</li><li>后续登录：请求携带包含了 sessionId 的 cookie 到后端，后端比较 sessionId 即可判断是哪个用户发的请求</li></ul><p>缺点：服务端存储了大量 session，访问量增大时，服务器压力大，维护成本高。</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><blockquote><p>token 解决了 session 存在的问题，因为 token 保存在前端</p></blockquote><p>token 是后端生成的一串字符串，第一次访问时后端生成 token，后续每次访问都要这个 token 进行验证。</p><p>JWT（JSON Web Token）：由三部分组成：Header（头部）Payload（负载）Signature（签名）</p><p>token 可以存放在 cookie 里面，最好的方式是放在 Authorizatoin 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Authorization: Bearer &lt;token&gt; <br></code></pre></td></tr></table></figure><p>优点：<br>避开同源策略、避免 CSRF 攻击、token 无状态，多个服务器可共享</p><p>缺点：<br>后端无法作废 token ，只能等 token 自动作废</p><h2 id="SSO（浅析）"><a href="#SSO（浅析）" class="headerlink" title="SSO（浅析）"></a>SSO（浅析）</h2><p>首次登录：<br>用户首次访问网站 a.com 页面，未登录则携带地址参数重定向到 sso 认证中心，用户输入账号密码验证成功，则认证中心生成令牌 token 通过 Set-Cookie 种入 cookie，返回 a.com<br>a.com 收到 token 后会再去认证中心确认一次是否为真（防篡改），为真则登录成功，同时后端会将登陆信息写入 cookie 返回给前端，此时前端保存了 a.com 和 sso 的登录态</p><p>后续登陆：<br>若用户访文 a.com 下的页面，则会直接登录成功<br>若用户访问 b.com，cookie 被携带跳转到认证中心，会检测出已登录状态，则直接下发 token 并返回 b.com，实现登录</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cookie-Storage 笔记</title>
    <link href="/dylan/2021/11/12/cookie-storage/"/>
    <url>/dylan/2021/11/12/cookie-storage/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code> 都是浏览器数据储存的方案，indexedDB、Web SQ（从来没用过、前端数据库？）</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><code>cookie</code> 是浏览器保存到用户电脑上的一个文本，用户通过 http 请求服务器，服务器将一些字典的减值对返回给客户端浏览器，并加上一些限制条件，在条件符合时用户再次访问服务器时，<code>cookie</code> 通过请求头完整的带回给服务器，服务器根据 <code>cookie</code> 信息判断不同的用户，这里涉及到 <code>cookie</code> 与 <code>session</code> ，<code>session</code> 是储存在服务器数据库的，不做太多叙述，大致原理是服务器通过 <code>cookie</code> 找到对应的 <code>session</code> 用来保存用户状态。</p><p>cookie 分类</p><p>会话级别：就是在浏览器关闭之后 <code>cookie</code> 就会失效。<br>持久级别：保存在硬盘，只要设置了过期时间就是。</p><p>cookie 属性</p><p>Name=Value 键值对：Name不能和其他属性相同<br>Expires 过期时间<br>Max-Age 有效期，优先级大于 Expires<br>Domain 生成 <code>cookie</code> 的域名空间<br>Path 这个 <code>cookie</code> 是在系统哪个文件路径下生成的<br>Secure 加密设置，设置之后只能在 SSH 连接环境下才能回传这个cookie 属性</p><p>cookie 创建</p><p>Set-Cookie:value [;expires=expires] [;domain=domain] [;path=path] [;secure]</p><h2 id="sessionStorage与localStorage"><a href="#sessionStorage与localStorage" class="headerlink" title="sessionStorage与localStorage"></a>sessionStorage与localStorage</h2><p><code>sessionStorage</code>：将数据保存在session对象中。所谓 session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session 对象可以用来保存在这段时间内所要求保存的任何数据。</p><p><code>localStorage</code>：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p><p>这两者的区别在于，<code>sessionStorage</code> 为临时保存，而 <code>localStorage</code> 为永久保存。</p><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.setItem(<span class="hljs-string">&#x27;name&#x27;</span>,data) <span class="hljs-comment">//创建</span><br>sessionStorage.getItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//获取</span><br>sessionStorage.removeItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//删除</span><br>sessionStorage.clear() <span class="hljs-comment">//清空所有</span><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;name&#x27;</span>,data) <span class="hljs-comment">//创建</span><br><span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//获取</span><br><span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//删除</span><br><span class="hljs-built_in">localStorage</span>.clear() <span class="hljs-comment">//清空所有</span><br></code></pre></td></tr></table></figure><h2 id="cookie、WebStorage区别"><a href="#cookie、WebStorage区别" class="headerlink" title="cookie、WebStorage区别"></a>cookie、WebStorage区别</h2><ol><li>储存空间：<code>cookie</code> 为4k，<code>WebStorage</code> 为5M</li><li>生命周期：<code>cookie</code> 指定过期时间，<code>sessionStorage</code> 页面会话期间可用，<code>localStorage</code> 永久有效，除非手动删除。</li><li>通信：<code>cookie</code> 每次请求都会携带，<code>WebStorage</code> 不会。</li><li>易用性：<code>cookie</code> 需要自己封装 setCookie、getCookie，<code>WebStorage</code> 有原生 API，可以通过 stringify 和 parse 储存数组与对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现 new 笔记</title>
    <link href="/dylan/2021/11/10/new/"/>
    <url>/dylan/2021/11/10/new/</url>
    
    <content type="html"><![CDATA[<h2 id="new的过程"><a href="#new的过程" class="headerlink" title="new的过程"></a>new的过程</h2><ol><li>创建一个空对象</li><li>将空对象的原型指向构造函数的原型</li><li>将这个空对象的 this 指向为构造函数</li></ol><h2 id="实现new"><a href="#实现new" class="headerlink" title="实现new"></a>实现new</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>,<span class="hljs-number">0</span>)  <br><span class="hljs-keyword">let</span> <span class="hljs-title">constructor</span> = <span class="hljs-title">args</span>.<span class="hljs-title">shift</span>(<span class="hljs-params"></span>)                    <br><span class="hljs-title">let</span> <span class="hljs-title">content</span> = &#123;&#125;                                    <br>content.__proto__ = <span class="hljs-title">constructor</span>.<span class="hljs-title">prototype</span>           <br><span class="hljs-title">constructor</span>.<span class="hljs-title">apply</span>(<span class="hljs-params">content,args</span>)                  <br><span class="hljs-title">return</span> <span class="hljs-title">content</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>let args = Array.prototype.slice.call(arguments,0)</code>   arguments 是一个伪数组，没有数组的一些原型方法，这段代码的意思是让 arguments 借调 Array 的原型方法 slice 返回原数组，使 arguments 成为了一个真数组</p><p><code>let constructor = args.shift()</code> 现在的 constructor 实际上就是传入的构造函数，注意 shift 方法会改变原数组，所以剩下的 args 里面都是参数</p><p><code>content.__proto__ = constructor.prototype</code> 将空对象的原型指向构造函数的原型</p><p><code>constructor.apply(content,args)</code> 改变空对象的 this 指向为构造函数</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>,<span class="hljs-number">0</span>)  <br>    <span class="hljs-keyword">let</span> <span class="hljs-title">constructor</span> = <span class="hljs-title">args</span>.<span class="hljs-title">shift</span>(<span class="hljs-params"></span>)                    <br>    <span class="hljs-title">let</span> <span class="hljs-title">content</span> = &#123;&#125;                                    <br>    content.__proto__ = <span class="hljs-title">constructor</span>.<span class="hljs-title">prototype</span>         <br>    <span class="hljs-title">constructor</span>.<span class="hljs-title">apply</span>(<span class="hljs-params">content,args</span>)                    <br><span class="hljs-title">return</span> <span class="hljs-title">content</span><br>&#125;<br><span class="hljs-title">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br><span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> b = myNew(Person,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(a)<br><span class="hljs-built_in">console</span>.log(b)<br></code></pre></td></tr></table></figure><p><img src="/dylan/imgs/new/1.png" alt="图1"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写apply、call、bind 笔记</title>
    <link href="/dylan/2021/11/10/apply-call-bind/"/>
    <url>/dylan/2021/11/10/apply-call-bind/</url>
    
    <content type="html"><![CDATA[<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>call 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br>foo(); <span class="hljs-comment">// 1 </span><br>foo.call(obj,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);  <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>给 foo 函数绑定 call 方法，将 foo 函数里的 this 指向 obj ，所以<code>foo.call(obj,3,4)</code>输出结果为2</p><p>特点：</p><p>1.参数传递以逗号隔开</p><p>2.立即执行</p><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>apply 方法与 call 类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br>foo(); <span class="hljs-comment">// 1 </span><br>foo.apply(obj,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]);  <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>特点：</p><p>1.参数传递以数组的形式</p><p>2.立即执行</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind 方法创建一个新的函数，也可以说是当前调用bind方法的函数的一个引用，这个函数的 this 被绑定为 bind 方法的第一个参数，其余参数为这个新函数的实参。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">var</span> bar=foo.bind(obj,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>bar(); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>当我们使用 bind 方法创建一个新函数，这个新函数再使用 call 或者 apply 来更改 this 绑定时，还是以 bind 绑定的 this 为准。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">var</span> o=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">var</span> bar=foo.bind(obj,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>bar.call(o); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>相同点：</p><ol><li>都会更改this的绑定</li></ol><p>不同点：</p><ol><li>call 和 apply 会立即执行函数，bind 不会。</li><li>apply 方法的传参格式为数组，call 和 bind 不是。</li></ol><h2 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> name = <span class="hljs-number">1</span><br>    Function.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ctx, <span class="hljs-rest_arg">...args</span>)</span> </span>&#123;<br>        let fn = Symbol(<span class="hljs-number">1</span>)<br>        ctx[fn] = <span class="hljs-keyword">this</span><br>        ctx[fn](...args)<br>        <span class="hljs-keyword">delete</span> ctx[fn]<br>    &#125;<br>    Function.prototype.myApply = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ctx, args = [])</span> </span>&#123;<br>        let fn = Symbol(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span>(args&amp;&amp;!(args <span class="hljs-keyword">instanceof</span> Array))&#123;<br>            <span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;参数不是数组&#x27;</span>)<br>        &#125;<br>        ctx[fn] = <span class="hljs-keyword">this</span><br>        ctx[fn](...args)<br>        <span class="hljs-keyword">delete</span> ctx[fn]<br>    &#125;<br>    Function.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ctx, <span class="hljs-rest_arg">...args1</span>)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (...args2)=&gt;&#123;<br>            let fn = Symbol(<span class="hljs-number">1</span>)<br>            ctx[fn] = <span class="hljs-keyword">this</span><br>            ctx[fn](...args1.concat(args2))<br>            <span class="hljs-keyword">delete</span> ctx[fn]<br>        &#125;<br>    &#125;<br>    obj2 = &#123;<br>        name: <span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> </span>&#123;<br>        console.log(<span class="hljs-keyword">this</span>.name, ...args)<br>    &#125;<br>    show(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">// 1 1 2 3</span><br>    show.myCall(obj2, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">// 2 1 2 3</span><br>    show.myApply(obj2, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-comment">// 2 1 2 3</span><br>    show.myBind(obj2, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)()<span class="hljs-comment">// 2 1 2 3</span><br></code></pre></td></tr></table></figure><p><code>let fn = Symbol(1)</code> 的作用是为了避免覆盖，保证 fn 属性的唯一性，myApply 需要判断传入的参数是否为数组形式，myBind 需要返回一个函数，因为 bind 不是立即执行的，最后需要 <code>delete ctx[fn]</code> </p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFC 笔记</title>
    <link href="/dylan/2021/11/08/BFC/"/>
    <url>/dylan/2021/11/08/BFC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、BFC概念"><a href="#一、BFC概念" class="headerlink" title="一、BFC概念"></a>一、BFC概念</h2><p>BFC  即  Block Formatting Contexts (块级格式化上下文)，<strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部（BFC的子元素不会影响BFC外部的元素）。</p><h2 id="二、触发BFC条件"><a href="#二、触发BFC条件" class="headerlink" title="二、触发BFC条件"></a>二、触发BFC条件</h2><ul><li><p>body 根元素</p></li><li><p>浮动元素：float 除 none 以外的值</p><p><code>float:left;</code> 左浮动 </p><p><code>float:right;</code>  右浮动</p><p><code>float:inherit;</code>  继承父元素float属性</p></li><li><p>绝对定位元素：position (absolute、fixed)</p><p><code>position:absolute;</code> 绝对定位相对于static以外的第一个父元素 </p><p><code>position:fixed;</code>  相对浏览器定位</p></li><li><p>display 为 inline-block、table-cells、flex</p><p><code>dispaly:inline-block;</code> 行内块元素 </p><p><code>display:table-cell;</code> 此元素会作为一个表格单元格显示</p><p><code>display:flex;</code>  弹性布局  </p></li><li><p>overflow 除了 visible 以外的值 (hidden、auto、scroll)</p><p><code>overflow:hidden;</code> 内容会被修剪，并且其余内容是不可见的</p><p><code>overflow:scroll;</code> 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</p><p><code>overflow:auto;</code> 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</p><p><code>overflow:inherit;</code> 规定应该从父元素继承 overflow 属性的值。</p></li></ul><h2 id="三、BFC解决的问题"><a href="#三、BFC解决的问题" class="headerlink" title="三、BFC解决的问题"></a>三、BFC解决的问题</h2><h4 id="1-margin重合"><a href="#1-margin重合" class="headerlink" title="1.margin重合"></a>1.margin重合</h4><p>代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.father</span>&#123;</span><br><span class="css">        <span class="hljs-comment">/* overflow: hidden; */</span></span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>box1 与 box2 中间并不会间距 40px，而是20px，加入 BFC 之后 box1 与 box2 明显间隔 40px。</p><p>图1加入BFC之前，图2加入BFC之后</p><p><img src="/dylan/imgs/BFC/1.png" alt="图1"><img src="/dylan/imgs/BFC/2.png" alt="图2"></p><h4 id="2-margin塌陷"><a href="#2-margin塌陷" class="headerlink" title="2.margin塌陷"></a>2.margin塌陷</h4><p>代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.father</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="css">        <span class="hljs-comment">/* overflow: hidden; */</span></span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>给的是box1 <code>margin-top:50px</code> 而 father 受到了box1 <code>margin-top:50px</code> 的影响，也向下偏移，给father撤销 overflow 注释后，father 位置不变，box1 向下移50px。</p><p>图3加入BFC之前，图4加入BFC之后</p><p><img src="/dylan/imgs/BFC/3.png" alt="图3"><img src="/dylan/imgs/BFC/4.png" alt="图4"></p><h4 id="3-高度坍塌"><a href="#3-高度坍塌" class="headerlink" title="3.高度坍塌"></a>3.高度坍塌</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-comment">/* background-color: brown; */</span></span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.father</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="css">        <span class="hljs-comment">/* overflow: hidden; */</span></span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid black;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父元素没有设置高度，而 box1 依旧存在与 father 标签里面，可看不见父元素的背景色，说明父元素的高度受子元素的影响。</p><p>图5加入 BFC 之前，图6加入 BFC 之后</p><p><img src="/dylan/imgs/BFC/5.png" alt="图5"><img src="/dylan/imgs/BFC/6.png" alt="图6"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid博客搭建</title>
    <link href="/dylan/2021/11/03/createBlog/"/>
    <url>/dylan/2021/11/03/createBlog/</url>
    
    <content type="html"><![CDATA[<p class="note note-info">大学还没毕业就很喜欢 Hexo 的 Fluid 主题，那时候实习公司项目用的 React+TS，想着用 React 写一个，为了搭博客自己还去学了 express （当时菜的一批，啥都存数据库），照着 Fluid 的 UI 写了个博客系统，后来服务器过期了，这几天想着用 github 部署下，现在文章用 markdown 写了。</p><p>这里记录下我搭博客的过程。</p><p>准备工作：</p><p>（1）github 仓库，（2）node 环境，（3） hexo 安装</p><p>github 仓库和 node 环境不做介绍</p><p>hexo 安装命令为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>hexo 初始化命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo init myblog<br></code></pre></td></tr></table></figure><p>博客初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd myblog<span class="hljs-comment">//进入myblog文件夹</span><br>npm i<br></code></pre></td></tr></table></figure><h2 id="一、博客搭建"><a href="#一、博客搭建" class="headerlink" title="一、博客搭建"></a>一、博客搭建</h2><h3 id="1-选择主题"><a href="#1-选择主题" class="headerlink" title="1.选择主题"></a>1.选择主题</h3><p>hexo 官网有很多主题，我主要以 Fluid 为例，每个主题 github 上都有描述文档，建议翻墙进 github （官网老崩），Fluid ：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>照着描述文档一步一步配置主题，我是下载的文件导入（官网建议npm直接安装），重点于你的 themes 文件夹下需要有 fluid 文件夹</p><p><img src="/dylan/imgs/createBlog/2021-11-3-1.png"></p><p>在根目录文件下<code>_config.yml</code>，不是 fluid 文件夹里的，修改主题配置：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br></code></pre></td></tr></table></figure><p>之后使用 hexo 命令生成静态文件，启动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g<span class="hljs-comment"># 生成静态文件，你发现文件夹多了public文件</span><br>hexo s<span class="hljs-comment"># 不出意外 localhost:4000 可以浏览你的博客了</span><br></code></pre></td></tr></table></figure><h3 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2.主题配置"></a>2.主题配置</h3><p>这时你就需要进入 fluid 文件夹里的 <code>_config.yml</code> 了，你会发现里面一大堆注释教你怎么配置主题，主要是留言板和浏览量配置比较绕，这留言板我选的是 <a href="https://valine.js.org/">valine</a> ，浏览量是 <a href="https://console.leancloud.cn/apps">leancloud</a> ，两个都是fluid内置的。</p><p>(1)留言板：</p><p>开启评论插件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br></code></pre></td></tr></table></figure><p>valine配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">valine:</span><br><span class="hljs-symbol">appId:</span><span class="hljs-meta"># 你leancloud注册完，在设置-&gt;应用凭证</span><br><span class="hljs-symbol">appKey:</span><span class="hljs-meta"># 同上</span><br></code></pre></td></tr></table></figure><p><img src="/dylan/imgs/createBlog/2021-11-3-2.png"></p><p>开启浏览量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">statistics:<br><span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br><span class="hljs-built_in">source</span>: <span class="hljs-string">&quot;leancloud&quot;</span><br></code></pre></td></tr></table></figure><p>leancloud配置:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">leancloud:</span><br><span class="hljs-symbol">    app_id:</span> <span class="hljs-comment">//同上</span><br><span class="hljs-symbol">    app_key:</span> <span class="hljs-comment">//同上</span><br></code></pre></td></tr></table></figure><p>剩下的图片，文字配置都很简单</p><h2 id="二、博客部署"><a href="#二、博客部署" class="headerlink" title="二、博客部署"></a>二、博客部署</h2><h3 id="1-github-Pages域名"><a href="#1-github-Pages域名" class="headerlink" title="1.github Pages域名"></a>1.github Pages域名</h3><p>github 仓库的创建网上一大推，顺便给个 <a href="https://wiki.jikexueyuan.com/project/github-basics/creat-new-repo.html">https://wiki.jikexueyuan.com/project/github-basics/creat-new-repo.html</a></p><p>你可以创建好仓库不用关联你的本地文件，不过 <a href="https://blog.csdn.net/qq_36667170/article/details/79094257">SSH</a> 需要配置好</p><p>进入你的 github 仓库 -&gt; settings  -&gt; GitHub Pages </p><p><img src="/dylan/imgs/createBlog/2021-11-3-3.png"></p><p>一开始我以为只能部署一个项目，因为每个人的 github 账号的的根目录都是: xxx.github.io，后来我发现只需要在域名后边加一个路由就行，比如我的：xxx.github.io/dylan </p><h3 id="2-部署"><a href="#2-部署" class="headerlink" title="2.部署"></a>2.部署</h3><p>进入根目录文件下的 <code>_config.yml</code> ，再提醒一次，不是 fluid ，是根目录！</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/sansui-d/dylan.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>别忘记了 <code>.git</code> ，之后安装部署命令 deploy-git </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><span class="hljs-comment">//简写 hexo g</span><br>hexo deploy<span class="hljs-comment">//简写 hexo d</span><br></code></pre></td></tr></table></figure><p>完成之后，你的博客就可以用 github Pages 打开了</p><h2 id="三、最后"><a href="#三、最后" class="headerlink" title="三、最后"></a>三、最后</h2><p>博客搭好了当然就该写博客啦</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">n</span> <span class="hljs-string">&quot;我的第一个博客&quot;</span><br></code></pre></td></tr></table></figure><p>找到你的 <code>我的第一个博客.md</code> 文件开始卷吧，推荐一款 markdown 编写工具 <a href="https://www.typora.io/">Typora</a></p>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
