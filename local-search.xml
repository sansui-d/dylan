<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>http常用状态码</title>
    <link href="/dylan/2021/12/10/http/"/>
    <url>/dylan/2021/12/10/http/</url>
    
    <content type="html"><![CDATA[<h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><p>1xx，信息性状态码，接受的请求正在处理。</p><p>2xx，成功状态码，请求正常处理完毕。</p><p>3xx，重定向，需要进行附加操作以完成请求。</p><p>4xx，客户端错误，客户端请求出错，服务器无法处理请求。</p><p>5xx，服务器错误，服务器处理请求出错。</p><h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><p>200：请求成功，表明服务器成功处理了请求。</p><p>201：作为 http post 请求的结果，已在服务器上成功创建了一个或多个新资源。</p><p>202：服务器已接收请求，但尚未处理。通常用于还有异步任务需要执行的情况，先返回202。</p><p>204：服务器成功处理了请求，但没有返回任何内容。</p><p>206：表示客户端进行了范围请求，并且服务器成功执行了这部分的get请求。</p><h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><p>300：针对请求，服务器可执行多种操作。</p><p>301：永久重定向。</p><p>302：临时重定向。</p><p>303:303与302状态码有着相同的功能，但303状态码明确表示客户端应当采用get方法获取资源。常用于将post请求重定向到get请求，比如你上传了一份个人信息，服务器回发一个303响应，将你导向一个“上传成功”页面。</p><h2 id="301和302的区别"><a href="#301和302的区别" class="headerlink" title="301和302的区别"></a>301和302的区别</h2><p>301比较常用的场景是使用域名跳转。比如，访问 <a href="http://www.baidu.com/">http://www.baidu.com</a> 会跳转到 <a href="https://www.baidu.com./">https://www.baidu.com。</a></p><p>302用来做临时跳，比如未登录的用户访问用户中心重定向到登录页面。</p><h2 id="302和307的区别"><a href="#302和307的区别" class="headerlink" title="302和307的区别"></a>302和307的区别</h2><p>由于历史的原因，用户代理可能会在重定向后的请求中把post方法改为get方法，如果不想这样，应该使用307状态码。</p><h2 id="301和308的区别"><a href="#301和308的区别" class="headerlink" title="301和308的区别"></a>301和308的区别</h2><p>308状态码不允许浏览器将原本为post的请求重定向到get请求上。</p><h2 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h2><p>400：该状态码表示请求文中存在错误。但浏览器会像200一样对待该状态码。</p><p>401：表示发送的请求需要有通过HTTP认证的认证信息，比如token失效就会出现这个问题。</p><p>403：被拒绝，表明对请求资源的访问被服务器拒绝了。没有权限的问题。</p><p>404：找不到，表明服务器上无法找到请求的资源，也可能是拒绝请求但不想说明原因。</p><p>409：表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p><p>415：请求资源类型 content-type 不支持。</p><p>418：在项目中用作彩蛋。</p><p>422：语法正确，有语义错误。用户名密码错误，验证码错误等。</p><p>429：用户在给定的时间内发送了太多的请求。皆在用于网络限速。</p><h2 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h2><p>500：服务器本身发生错误，可能是web应用存在的bug或某些临时的故障。</p><p>502：通常意味着一两个机器已经不正确，简单点说，就是机器挂掉了。执行请求的时候，却收到了上游服务器的无效相应。</p><p>503：服务器目前无法使用，临时性的服务器维护/过载。通常刷新客户端便好。</p><p>504：请求超时。</p><h2 id="502和504的区别"><a href="#502和504的区别" class="headerlink" title="502和504的区别"></a>502和504的区别</h2><p>503表示网关可用，但是请求超时。</p><p>502表示没有可用的网关。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件流、事件捕获、事件冒泡、事件委托或事件代理</title>
    <link href="/dylan/2021/12/03/event/"/>
    <url>/dylan/2021/12/03/event/</url>
    
    <content type="html"><![CDATA[<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流分为三个阶段：捕获阶段、目标阶段、冒泡阶段</p><p>捕获阶段：从最外层一层一层到目标</p><p>目标阶段：执行目标的事件</p><p>冒泡阶段：从目标一层一层到最外层</p><p>事件函数的执行默认都是在冒泡阶段执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>    #a &#123;<br>        <span class="hljs-attr">width</span>: 300px;<br>        height: 300px;<br>        background-color: black;<br>    &#125;<br><br>    #b &#123;<br>        <span class="hljs-attr">width</span>: 200px;<br>        height: 200px;<br>        background-color: blue;<br>    &#125;<br><br>    #c &#123;<br>        <span class="hljs-attr">width</span>: 100px;<br>        height: 100px;<br>        background-color: red;<br>    &#125;<br>&lt;/style&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml">b.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml">c.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>点击红色方块(c元素)，打印顺序为 cba</p></blockquote><p>说明事件函数的执行是在冒泡阶段执行，给 addEventListener 第三个参数设为 true 时。</p><blockquote><p>点击红色方块(c元素)，打印顺序为abc</p></blockquote><p>说明事件函数的执行在捕获阶段。</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>顾名思义，将子级的事件委托给父级完成，通过 e.target 实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> e = e || event<br>    <span class="hljs-keyword">let</span> target = e.target || e.srcElement<br>    <span class="hljs-built_in">console</span>.log(target)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>点击红色方块(c元素)，打印结果是 c 的 dom 对象</p></blockquote><p>代码中并未给元素c绑定事件函数，而打印出了 c 的 dom 对象，说明 c 的事件委托给了 a </p><h2 id="取消冒泡"><a href="#取消冒泡" class="headerlink" title="取消冒泡"></a>取消冒泡</h2><p>bubbles：event 的冒泡属性，默认为 true。</p><p>stopPropagation：取消事件冒泡和委托函数的执行。</p><p>stopImmediatePropagation：取消事件冒泡和委托函数的执行，并中断同一事件函数的执行（比如在 a 元素的第一个点击事件执行 e.stopImmediatePropagation() ，则 a 元素的第二个点击事件不会执行）</p><p>cancelBubble: e.cancelBubble = true 取消事件冒泡</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a&#x27;</span>)<br>&#125;)<br>b.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b&#x27;</span>)<br>&#125;)<br>c.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e.bubbles)<br>    e.stopPropagation() <span class="hljs-comment">//或者 e.cancelbubbles = true</span><br> e.stopImmediatePropagation()<br>&#125;)<br>c.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;c&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>点击红色方块(c元素)，只会输出 true</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Object.prototype.toString实现myTypeof</title>
    <link href="/dylan/2021/11/26/typeof/"/>
    <url>/dylan/2021/11/26/typeof/</url>
    
    <content type="html"><![CDATA[<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>除了 null、undefined 不能使用 toString 方法外，其他数据类型都可以使用 toString 方法，实际上，这个 toString 方法是当前引用对象的方法，将传入 toString 的参数转为 string 类型并返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>.toString())   <span class="hljs-comment">//123</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-number">123</span>).toString())   <span class="hljs-comment">//123 不加括号报错，加括号是为了求值？</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString())  <span class="hljs-comment">//当前时间</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>().toString())    <span class="hljs-comment">///(?:)/</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;.toString())    <span class="hljs-comment">//function()&#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span>.toString())   <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(&#123;<span class="hljs-number">1</span>:<span class="hljs-number">1</span>&#125;.toString())   <span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure><p>我的理解：根据最后一条输出结果判定，toString 方法来自 Object 原型</p><h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString"></a>Object.prototype.toString</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-string">&#x27;123&#x27;</span>))   <span class="hljs-comment">//[object String]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">123</span>))    <span class="hljs-comment">//[object Number]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;))   <span class="hljs-comment">//[object Function]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">false</span>))  <span class="hljs-comment">//[object Boolean]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())) <span class="hljs-comment">//[object Date]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>)) <span class="hljs-comment">//[object RegExp]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(&#123;&#125;)) <span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure><p>可以利用 Object.prototype.toString 写一个 myTypeof</p><h2 id="扩展typeof"><a href="#扩展typeof" class="headerlink" title="扩展typeof"></a>扩展typeof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTypeof</span>(<span class="hljs-params">val</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">typeof</span> val<br>    <span class="hljs-keyword">let</span> temp = &#123;<br>        <span class="hljs-string">&quot;[object Function]&quot;</span>:<span class="hljs-string">&quot;Function&quot;</span>,<br>        <span class="hljs-string">&quot;[object Date]&quot;</span>:<span class="hljs-string">&quot;Date&quot;</span>,<br>        <span class="hljs-string">&quot;[object RegExp]&quot;</span>:<span class="hljs-string">&quot;RegExp&quot;</span>,<br>        <span class="hljs-string">&quot;[object Array]&quot;</span>:<span class="hljs-string">&quot;Array&quot;</span>,<br>        <span class="hljs-string">&quot;[object Object]&quot;</span>:<span class="hljs-string">&quot;Object&quot;</span><br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(val===<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val===<span class="hljs-literal">undefined</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;undefined&quot;</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(res === <span class="hljs-string">&quot;object&quot;</span>)&#123;<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">Object</span>.prototype.toString.call(val)<br>        <span class="hljs-keyword">return</span> (temp[str])<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-literal">undefined</span>))    <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-literal">null</span>)) <span class="hljs-comment">//null</span><br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-number">123</span>))  <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(myTypeof(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()))   <span class="hljs-comment">//Date</span><br><span class="hljs-built_in">console</span>.log(myTypeof([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]))    <span class="hljs-comment">//Array</span><br><span class="hljs-built_in">console</span>.log(myTypeof(&#123;<span class="hljs-number">1</span>:<span class="hljs-number">2</span>&#125;))    <span class="hljs-comment">//Object</span><br></code></pre></td></tr></table></figure><p>类型没写完，思路就这样。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="/dylan/2021/11/23/clone/"/>
    <url>/dylan/2021/11/23/clone/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对象在内存中的存储方式与基本类型不一样，储存对象内存会单独开辟出一个堆，对象名指向这个堆的地址，到达一种引用的效果，而传统的<code>a = b</code> 如果是对象的话，只会拷贝对象的地址，a 和 b 指向的是同一个地址，从而改变对象 a 的值，b 的值也会发生改变，起不了拷贝作用。</p><h2 id="浅拷贝（对象只有一层）"><a href="#浅拷贝（对象只有一层）" class="headerlink" title="浅拷贝（对象只有一层）"></a>浅拷贝（对象只有一层）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>       <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>       <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">simpleClone</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>       <span class="hljs-keyword">let</span> cloneObj = &#123;&#125;<br>       <span class="hljs-comment">//es3</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj)&#123;<br>           cloneObj[i] = obj[i]<br>       &#125;<br>       <span class="hljs-comment">//es6</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [key,value] <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.entries(obj))&#123;<br>           cloneObj[key] = value<br>       &#125;<br>       <span class="hljs-comment">//es5</span><br>       <span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>)</span>&#123;<br>           <span class="hljs-comment">// cloneObj[key] = obj[key]</span><br>           <span class="hljs-keyword">var</span> des = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj,key) <span class="hljs-comment">//属性描述符</span><br>           <span class="hljs-built_in">Object</span>.defineProperty(cloneObj,key,des) <span class="hljs-comment">//定义对象属性</span><br>       &#125;)<br>       <span class="hljs-keyword">return</span> cloneObj<br>   &#125;<br>   <span class="hljs-keyword">let</span> newObj = simpleClone(obj)<br>   obj.a = <span class="hljs-number">3</span><br>   <span class="hljs-built_in">console</span>.log(newObj)<span class="hljs-comment">//结果为&#123;a:1,b:2&#125;</span><br></code></pre></td></tr></table></figure><h2 id="深拷贝（对象有多层）"><a href="#深拷贝（对象有多层）" class="headerlink" title="深拷贝（对象有多层）"></a>深拷贝（对象有多层）</h2><p>简易版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>:&#123;<br>        <span class="hljs-attr">c</span>:<span class="hljs-number">3</span>,<br>        <span class="hljs-attr">d</span>:&#123;<br>            <span class="hljs-attr">e</span>:<span class="hljs-number">4</span><br>        &#125;,<br>    &#125;,<br>    <span class="hljs-attr">f</span>:<span class="hljs-number">8</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> cloneObj = &#123;&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj[i] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[i]!==<span class="hljs-literal">null</span>)&#123;<br>            cloneObj[i] = deepClone(obj[i])<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cloneObj[i] = obj[i]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cloneObj<br>&#125;<br><span class="hljs-keyword">let</span> newObj = deepClone(obj)<br>obj.b.c = <span class="hljs-number">7</span><br><span class="hljs-built_in">console</span>.log(newObj)<br></code></pre></td></tr></table></figure><p>完整版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>,<br>        <span class="hljs-attr">b</span>: &#123;<br>            <span class="hljs-attr">c</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">d</span>: &#123;<br>                <span class="hljs-attr">e</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-built_in">Symbol</span>(<span class="hljs-number">3</span>)]<br>            &#125;,<br>        &#125;,<br>        <span class="hljs-attr">f</span>: <span class="hljs-number">4</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> getType = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(obj);<br><br>    <span class="hljs-keyword">const</span> isObject = <span class="hljs-function">(<span class="hljs-params">target</span>) =&gt;</span> (<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;function&#x27;</span>) &amp;&amp; target !== <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">const</span> canTraverse = &#123;<br>        <span class="hljs-string">&#x27;[object Map]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Set]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Array]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Object]&#x27;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;[object Arguments]&#x27;</span>: <span class="hljs-literal">true</span>,<br>    &#125;;<br>    <span class="hljs-keyword">const</span> mapTag = <span class="hljs-string">&#x27;[object Map]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> setTag = <span class="hljs-string">&#x27;[object Set]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> boolTag = <span class="hljs-string">&#x27;[object Boolean]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> numberTag = <span class="hljs-string">&#x27;[object Number]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> stringTag = <span class="hljs-string">&#x27;[object String]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> symbolTag = <span class="hljs-string">&#x27;[object Symbol]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> dateTag = <span class="hljs-string">&#x27;[object Date]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> errorTag = <span class="hljs-string">&#x27;[object Error]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> regexpTag = <span class="hljs-string">&#x27;[object RegExp]&#x27;</span>;<br>    <span class="hljs-keyword">const</span> funcTag = <span class="hljs-string">&#x27;[object Function]&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> handleRegExp = <span class="hljs-function">(<span class="hljs-params">target</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; source, flags &#125; = target;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> target.constructor(source, flags);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> handleFunc = <span class="hljs-function">(<span class="hljs-params">func</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 箭头函数直接返回自身</span><br>        <span class="hljs-keyword">if</span> (!func.prototype) <span class="hljs-keyword">return</span> func;<br>        <span class="hljs-keyword">const</span> bodyReg = <span class="hljs-regexp">/(?&lt;=&#123;)(.|\n)+(?=&#125;)/m</span>;<br>        <span class="hljs-keyword">const</span> paramReg = <span class="hljs-regexp">/(?&lt;=\().+(?=\)\s+&#123;)/</span>;<br>        <span class="hljs-keyword">const</span> funcString = func.toString();<br>        <span class="hljs-comment">// 分别匹配 函数参数 和 函数体</span><br>        <span class="hljs-keyword">const</span> param = paramReg.exec(funcString);<br>        <span class="hljs-keyword">const</span> body = bodyReg.exec(funcString);<br>        <span class="hljs-keyword">if</span> (!body) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (param) &#123;<br>            <span class="hljs-keyword">const</span> paramArr = param[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(...paramArr, body[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(body[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> handleNotTraverse = <span class="hljs-function">(<span class="hljs-params">target, tag</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> Ctor = target.constructor;<br>        <span class="hljs-keyword">switch</span> (tag) &#123;<br>            <span class="hljs-keyword">case</span> boolTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">Boolean</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> numberTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">Number</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> stringTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">String</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> symbolTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(<span class="hljs-built_in">Symbol</span>.prototype.valueOf.call(target));<br>            <span class="hljs-keyword">case</span> errorTag:<br>            <span class="hljs-keyword">case</span> dateTag:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Ctor(target);<br>            <span class="hljs-keyword">case</span> regexpTag:<br>                <span class="hljs-keyword">return</span> handleRegExp(target);<br>            <span class="hljs-keyword">case</span> funcTag:<br>                <span class="hljs-keyword">return</span> handleFunc(target);<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Ctor(target);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> deepClone = <span class="hljs-function">(<span class="hljs-params">target, map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isObject(target))<br>            <span class="hljs-keyword">return</span> target;<br>        <span class="hljs-keyword">let</span> type = getType(target);<br>        <span class="hljs-keyword">let</span> cloneTarget;<br>        <span class="hljs-keyword">if</span> (!canTraverse[type]) &#123;<br>            <span class="hljs-comment">// 处理不能遍历的对象</span><br>            <span class="hljs-keyword">return</span> handleNotTraverse(target, type);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 这波操作相当关键，可以保证对象的原型不丢失！</span><br>            <span class="hljs-keyword">let</span> ctor = target.constructor;<br>            cloneTarget = <span class="hljs-keyword">new</span> ctor();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (map.get(target))<br>            <span class="hljs-keyword">return</span> target;<br>        map.set(target, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">if</span> (type === mapTag) &#123;<br>            <span class="hljs-comment">//处理Map</span><br>            target.forEach(<span class="hljs-function">(<span class="hljs-params">item, key</span>) =&gt;</span> &#123;<br>                cloneTarget.set(deepClone(key, map), deepClone(item, map));<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (type === setTag) &#123;<br>            <span class="hljs-comment">//处理Set</span><br>            target.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                cloneTarget.add(deepClone(item, map));<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-comment">// 处理数组和对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-keyword">if</span> (target.hasOwnProperty(prop)) &#123;<br>                cloneTarget[prop] = deepClone(target[prop], map);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cloneTarget;<br>    &#125;<br>    <span class="hljs-keyword">let</span> newObj = deepClone(obj)<br>    <span class="hljs-built_in">console</span>.log(newObj)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包（二）</title>
    <link href="/dylan/2021/11/22/closure2/"/>
    <url>/dylan/2021/11/22/closure2/</url>
    
    <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>定义：在一定时间间隔内，将多次触发变为一次触发，类似技能打断施法重新读条🤭</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ipt&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ipt&#x27;</span>)<br>ipt.addEventListener(<span class="hljs-string">&#x27;input&#x27;</span>,debounce(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;,<span class="hljs-number">2000</span>))<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn,delay</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(timer)&#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>        &#125;<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            fn()<br>        &#125;,delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>定义：一段时间间隔内只执行一次，类似技能冷却🤭</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ipt&#x27;</span>)<br>ipt.addEventListener(<span class="hljs-string">&#x27;input&#x27;</span>, throttle(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;, <span class="hljs-number">2000</span>))<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn()<br>            timer = <span class="hljs-literal">null</span><br>        &#125;, delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>防抖(debounce)<br>（1）search搜索联想，用户在不断输入值时，用防抖来节约请求资源。<br>（2）window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li><li>节流(throttle)<br>（1）鼠标不断点击触发，mousedown(单位时间内只触发一次)。<br>（2）监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断。</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包（一）</title>
    <link href="/dylan/2021/11/21/closure1/"/>
    <url>/dylan/2021/11/21/closure1/</url>
    
    <content type="html"><![CDATA[<h2 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么"></a>闭包是什么</h2><p>犀牛书：函数对象可以通过作用域链相互关联起来，函数体内部的变量可以保存在函数作用域内，这种特性在计算机科学文献中称为“闭包”。</p><p>红宝书：闭包是指有权访问另一个函数作用域中的变量的函数。</p><p>你不知道的 JavaScript：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p><p>MDN：一个函数和对其周围状态（词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包。</p><p>个人理解：函数的执行，导致函数被定义，并抛出函数（每本书理解不一致）。</p><h2 id="闭包的常见形式"><a href="#闭包的常见形式" class="headerlink" title="闭包的常见形式"></a>闭包的常见形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure1</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(n)&#125;<br>   &#125;<br>   closure1()()  <span class="hljs-comment">//0</span><br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure2</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> n = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>)&#125;<br>       <span class="hljs-keyword">return</span> n<br>   &#125;<br>   closure2()()  <span class="hljs-comment">//0</span><br><br>   <span class="hljs-keyword">var</span> a<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure3</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span><br>       a = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">console</span>.log(b)<br>       &#125;<br>   &#125;<br>   closure3()  <span class="hljs-comment">//0</span><br>   a()<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure4</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">var</span> n = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-keyword">return</span> b<br>       &#125;<br>       a(n)<br>   &#125;<br>   closure4()  <span class="hljs-comment">//0</span><br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closure5</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">var</span> arr = []<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>           arr[i] = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>) </span>&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">console</span>.log(j)<br>               &#125;<br>           &#125;)(i)<br>       &#125;<br>       <span class="hljs-keyword">return</span> arr<br>   &#125;<br>   <span class="hljs-keyword">var</span> doClosure5 = closure5()<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>       doClosure5[j]() <br>   &#125;<span class="hljs-comment">//0,1,2,3,4,5,6,7,8,9</span><br><br>   <span class="hljs-keyword">var</span> doClosure6 = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-keyword">return</span> ++count<br>       &#125;<br>   &#125;)()<br>   <span class="hljs-built_in">console</span>.log(doClosure6())  <span class="hljs-comment">//1</span><br>   <span class="hljs-built_in">console</span>.log(doClosure6())  <span class="hljs-comment">//2</span><br>   <span class="hljs-built_in">console</span>.log(doClosure6())  <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>闭包会产生内存泄漏，使用闭包产生的变量会一直存在内存当中，不会被垃圾回收机制回收，不应当大量使用闭包。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片懒加载</title>
    <link href="/dylan/2021/11/20/lazyImg/"/>
    <url>/dylan/2021/11/20/lazyImg/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>offsetTop<br>元素到顶部到 offsetParent 顶部的距离</li><li>offsetParent<br>距离元素最近的一个具有定位的父级元素，若父级元素都不符合条件，则 offsetParent 为 body</li><li>clientHeight<br>元素宽高（height+padding）</li><li>scrollTop<br>Y轴的滚动条</li></ol><p>可以得出当 scrollTop + clientHeight &gt; offsetTop（距离body顶部）时，视当前元素在可视区域，而此时再为 img 的 src 属性赋值，请求才会发出，从而达到图片懒加载的效果。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/1.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/2.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/3.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/4.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/5.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/6.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/7.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/8.png&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/9.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.img</span> <span class="hljs-selector-tag">img</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;<br>        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eeeeee</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> imgs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTop</span>(<span class="hljs-params">e</span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> H = e.offsetTop<br>           <span class="hljs-keyword">while</span> (e = e.offsetParent) &#123;<br>                H += e.offsetTop<br>           &#125;<br>           <span class="hljs-keyword">return</span> H<br>      &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazyImg</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> H = <span class="hljs-built_in">document</span>.documentElement.clientHeight <br>      <span class="hljs-keyword">var</span> S = <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imgs.length; i++) &#123;<br>           <span class="hljs-keyword">if</span> (H + S &gt; getTop(imgs[i])&amp;&amp;!imgs[i].src) &#123;<br>                 imgs[i].src = imgs[i].getAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>)<br>           &#125;<br>      &#125;<br>&#125;<br>        <br><span class="hljs-built_in">window</span>.onload = <span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      lazyImg(imgs)<br>&#125;<br></code></pre></td></tr></table></figure><p>代码比较简单，可以优化，比如 onload 时设置 scrollTop 为 0，给 lazyImg 添加防抖函数，但其核心思想在于只有图片元素进入视口时才进行加载。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超级好看的 css 样式</title>
    <link href="/dylan/2021/11/18/button/"/>
    <url>/dylan/2021/11/18/button/</url>
    
    <content type="html"><![CDATA[<h2 id="倒影效果"><a href="#倒影效果" class="headerlink" title="倒影效果"></a>倒影效果</h2><p><img src="/dylan/imgs/button/1.gif"></p><p>HTML:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn_family btn_family1&quot;</span>&gt;<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn1&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn2&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn3&quot;</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn4&quot;</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn5&quot;</span>&gt;</span>按钮5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>CSS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs javascript">body &#123;<br>       background-color: black;<br>   &#125;<br><br>   .btn_family &#123;<br>       <span class="hljs-attr">display</span>: flex;<br>       justify-content: space-between;<br>       padding: 50px;<br>   &#125;<br><br>   .btn &#123;<br>       line-height: 100px;<br>       text-align: center;<br>       color: white;<br>       width: 200px;<br>       height: 100px;<br>       border-radius: 10px;<br>       background-color: black;<br>       -webkit-box-reflect: below 16px -webkit-linear-gradient(transparent, transparent <span class="hljs-number">30</span>%, rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.6</span>));<br>   &#125;<br>   .btn1&#123;<br>       <span class="hljs-attr">color</span>: #d71345;<br>   &#125;<br>   .btn2&#123;<br>       <span class="hljs-attr">color</span>: #f36c21;<br>   &#125;<br>   .btn3&#123;<br>       <span class="hljs-attr">color</span>: #ffd400;<br>   &#125;<br>   .btn4&#123;<br>       <span class="hljs-attr">color</span>: #65c294;<br>   &#125;<br>   .btn5&#123;<br>       <span class="hljs-attr">color</span>: #33a3dc;<br>   &#125;<br>   .btn:hover&#123;<br>       <span class="hljs-attr">color</span>: white;<br>   &#125;<br>   .btn1:hover &#123;<br>       background-color: #d71345;<br>       box-shadow: 0px 0px 10px 3px #d71345;<br>   &#125;<br><br>   .btn2:hover &#123;<br>       background-color: #f36c21;<br>       box-shadow: 0px 0px 10px 3px #f36c21;<br>   &#125;<br><br>   .btn3:hover &#123;<br>       background-color: #ffd400;<br>       box-shadow: 0px 0px 10px 3px #ffd400;<br>   &#125;<br><br>   .btn4:hover &#123;<br>       background-color: #65c294;<br>       box-shadow: 0px 0px 10px 3px #65c294;<br>   &#125;<br><br>   .btn5:hover &#123;<br>       background-color: #33a3dc;<br>       box-shadow: 0px 0px 10px 3px #33a3dc;<br>   &#125;<br><br>   div &#123;<br>       <span class="hljs-attr">position</span>: relative;<br>   &#125;<br><br>   .btn1::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #d71345;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn2::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #f36c21;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn3::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #ffd400;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn4::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #65c294;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   .btn5::before &#123;<br>       <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>       position: absolute;<br>       top: <span class="hljs-number">0</span>;<br>       left: <span class="hljs-number">0</span>;<br>       right: <span class="hljs-number">0</span>;<br>       bottom: <span class="hljs-number">0</span>;<br>       border: 2px solid #33a3dc;<br>       animation: clippath 2s infinite linear;<br>       border-radius: 10px;<br>   &#125;<br>   @keyframes clippath &#123;<br><br>       <span class="hljs-number">0</span>%,<br>       <span class="hljs-number">100</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">95</span>% <span class="hljs-number">0</span>);<br>       &#125;<br><br>       <span class="hljs-number">25</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">0</span> <span class="hljs-number">95</span>% <span class="hljs-number">0</span> <span class="hljs-number">0</span>);<br>       &#125;<br><br>       <span class="hljs-number">50</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">95</span>% <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>);<br>       &#125;<br><br>       <span class="hljs-number">75</span>% &#123;<br>           clip-path: inset(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">95</span>%);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="拟态"><a href="#拟态" class="headerlink" title="拟态"></a>拟态</h2><p><img src="/dylan/imgs/button/2.png"></p><p>HTML：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;Hello world&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">body &#123;<br>       <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>       width: 100vw;<br>       height: 100vh;<br>       background-color: #55b9f3;<br>       display: flex;<br>       align-items: center;<br>       justify-content: center;<br>   &#125;<br><br>   .btn &#123;<br>       <span class="hljs-attr">width</span>: 200px;<br>       height: 200px;<br>       line-height: 200px;<br>       text-align: center;<br>       color: white;<br>       border-radius: 50px;<br>       background: #55b9f3;<br>       box-shadow: 20px 20px 60px #489dcf,<br>           -20px -20px 60px #62d5ff;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="毛玻璃"><a href="#毛玻璃" class="headerlink" title="毛玻璃"></a>毛玻璃</h2><p><img src="/dylan/imgs/button/3.png"></p><p>HTML:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;Hello world&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">body &#123;<br>       <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>       width: 100vw;<br>       height: 100vh;<br>       background: url(<span class="hljs-string">&#x27;./4.png&#x27;</span>);<br>       background-repeat: no-repeat;<br>       background-size: 100vw 100vh;<br>       background-position: center center;<br>       display: flex;<br>       align-items: center;<br>       justify-content: center;<br>   &#125;<br><br>   .btn &#123;<br>       <span class="hljs-attr">padding</span>: 40px 30px;<br>       font-size: 24px;<br>       border-radius: 12px;<br>       background-color: rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">.2</span>);<br>       backdrop-filter: blur(15px);<br>       box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">0</span> 10px #<span class="hljs-number">333</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>setTimeout、setInterval(二)</title>
    <link href="/dylan/2021/11/17/settimeout2/"/>
    <url>/dylan/2021/11/17/settimeout2/</url>
    
    <content type="html"><![CDATA[<h2 id="使用setInterval实现setTimeout"><a href="#使用setInterval实现setTimeout" class="headerlink" title="使用setInterval实现setTimeout"></a>使用setInterval实现setTimeout</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mySetInterval</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        fn()<br>        <span class="hljs-built_in">clearInterval</span>(timer)<br>    &#125;, delay)<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br>mySetInterval(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">888</span>), <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h2 id="使用setTimeout实现setInterval"><a href="#使用setTimeout实现setInterval" class="headerlink" title="使用setTimeout实现setInterval"></a>使用setTimeout实现setInterval</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mySetTimout</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">const</span> interval = <span class="hljs-function">() =&gt;</span> &#123;<br>        fn()<br>        timer = <span class="hljs-built_in">setTimeout</span>(interval, delay)<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(interval, delay)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">cancel</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">const</span> &#123; cancel &#125; = mySetTimout(<span class="hljs-function">() =&gt;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">888</span>), <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        cancel()<br>&#125;, <span class="hljs-number">4000</span>)<br></code></pre></td></tr></table></figure><h2 id="requestAnimationFrame使用"><a href="#requestAnimationFrame使用" class="headerlink" title="requestAnimationFrame使用"></a>requestAnimationFrame使用</h2><p>requestAnimationFrame 是浏览器用于定时循环操作的一个接口，是按帧对页面进行重绘，效果会比 setInterval 好，因为 setInterval 是异步任务，当同步任务执行时间大于 setInterval 的时间间隔时，setInterval 便不会按照时间间隔执行，setInterval 的执行是时间间隔一到便放在执行栈上执行，js 是单线程，当执行栈上还有任务时，setInterval 的回调函数会等待执行，而 requestAnimationFrame 是根据系统的时间间隔执行，也就是帧。</p><p>下面分别使用 setTimeout 、setInterval 、requestAnimationFrame 实现进度条例子</p><p>html：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;time&quot;</span> style=<span class="hljs-string">&quot;width: 0px;height: 20px;line-height: 20px;background-color: red;&quot;</span>&gt;<span class="hljs-number">0</span>%&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>setInterval版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">time.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(time.style.width)&lt;<span class="hljs-number">300</span>)&#123;<br>            time.style.width = <span class="hljs-built_in">parseInt</span>(time.style.width) + <span class="hljs-number">3</span> + <span class="hljs-string">&quot;px&quot;</span><br>            time.innerHTML = <span class="hljs-built_in">parseInt</span>(time.style.width)/<span class="hljs-number">3</span> + <span class="hljs-string">&quot;%&quot;</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">clearInterval</span>(timer)<br>        &#125;<br>    &#125;,<span class="hljs-number">16</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>setTimeout版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">time.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(time.style.width)&lt;<span class="hljs-number">300</span>)&#123;<br>            time.style.width = <span class="hljs-built_in">parseInt</span>(time.style.width) + <span class="hljs-number">3</span> + <span class="hljs-string">&quot;px&quot;</span><br>            time.innerHTML = <span class="hljs-built_in">parseInt</span>(time.style.width)/<span class="hljs-number">3</span> + <span class="hljs-string">&quot;%&quot;</span><br>            timer = <span class="hljs-built_in">setTimeout</span>(fn, <span class="hljs-number">16</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">clearInterval</span>(timer)<br>        &#125;<br>    &#125;,<span class="hljs-number">16</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>requestAnimationFrame版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">time.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> timer = requestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">parseInt</span>(time.style.width)&lt;<span class="hljs-number">300</span>)&#123;<br>            time.style.width = <span class="hljs-built_in">parseInt</span>(time.style.width) + <span class="hljs-number">3</span> + <span class="hljs-string">&quot;px&quot;</span><br>            time.innerHTML = <span class="hljs-built_in">parseInt</span>(time.style.width)/<span class="hljs-number">3</span> + <span class="hljs-string">&quot;%&quot;</span><br>            timer = requestAnimationFrame(fn);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cancelAnimationFrame(timer)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>setTimeout、setInterval(一)</title>
    <link href="/dylan/2021/11/16/settimeout1/"/>
    <url>/dylan/2021/11/16/settimeout1/</url>
    
    <content type="html"><![CDATA[<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>特性：</p><ol><li>几毫秒后执行一次</li><li>最小时间间隔4ms</li><li>返回数字标识</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//1s后打印1</span><br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>回调函数也可以换成字符串，原理是浏览器解析了两次（不建议使用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;console.log(1)&quot;</span>,<span class="hljs-number">1000</span>) <span class="hljs-comment">//1s后打印1</span><br></code></pre></td></tr></table></figure><p>虽然最小时间间隔为4ms，但浏览器还是会根据时间大小打印，小于1ms则会按1ms执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer1 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> timer3 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>) <br>&#125;,<span class="hljs-number">3</span>)<br><span class="hljs-keyword">var</span> timer4 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>) <span class="hljs-comment">//</span><br>&#125;,<span class="hljs-number">0.1</span>)<br><span class="hljs-keyword">var</span> timer5 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>)<br>&#125;,<span class="hljs-number">0.2</span>)<br><span class="hljs-keyword">var</span> timer6 = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>)<br>&#125;,<span class="hljs-number">0.3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>打印顺序为：1 4 5 6 2 3</p></blockquote><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>特性：</p><ol><li>间隔几毫秒持续执行</li><li>最小时间间隔为10ms</li><li>返回数字标识</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//每隔1s执行一次</span><br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>其他特性与 <code>setTimeout</code> 类似</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ol><li><code>clearTimeout()</code> 方法可以清除 Interval，同理，<code>clearInterval()</code>方法也可以清除 Timeout（不建议，会造成语义歧义）</li><li>浏览器的刷新频率是 <code>60HZ</code> ，每秒屏幕的刷新次数为 <code>1000/60 ≈ 16.67</code>，即建议在使用 setInterval 实现动画的时候，最小时间间隔为16ms或17ms，这样会使动画看上去更丝滑。</li><li>setTimeout 与 setInterval 回调函数里的 this 都是指向window，改变 this 指向可以使用 apply 、call 、bind</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端三大登陆方式</title>
    <link href="/dylan/2021/11/14/login/"/>
    <url>/dylan/2021/11/14/login/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTTP 是无状态协议，每次和后端重新建立连接的话，后端无法判断请求是否每次来自于同一个用户，所以诞生了 cookie，会随 HTTP 请求一起发送</p><p>cookie 携带了用户信息，但后端还需要验证，得通过 session 对象。而 session 存储了一些用户信息，存在后端是避免前端存储敏感数据。通常存在缓存里，比如 jvm 本地缓存、redis 分布式缓存</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul><li>首次登录：用户输入账号密码，前端发 HTTP 请求，后端验证时会创建 sessionId，并保存 sessionId 和 session 的映射关系，然后通过 Set-Cookie 头将 sessionId 种到 Cookie 中，存到前端</li><li>后续登录：请求携带包含了 sessionId 的 cookie 到后端，后端比较 sessionId 即可判断是哪个用户发的请求</li></ul><p>缺点：服务端存储了大量 session，访问量增大时，服务器压力大，维护成本高。</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><blockquote><p>token 解决了 session 存在的问题，因为 token 保存在前端</p></blockquote><p>token 是后端生成的一串字符串，第一次访问时后端生成 token，后续每次访问都要这个 token 进行验证。</p><p>JWT（JSON Web Token）：由三部分组成：Header（头部）Payload（负载）Signature（签名）</p><p>token 可以存放在 cookie 里面，最好的方式是放在 Authorizatoin 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Authorization: Bearer &lt;token&gt; <br></code></pre></td></tr></table></figure><p>优点：<br>避开同源策略、避免 CSRF 攻击、token 无状态，多个服务器可共享</p><p>缺点：<br>后端无法作废 token ，只能等 token 自动作废</p><h2 id="SSO（浅析）"><a href="#SSO（浅析）" class="headerlink" title="SSO（浅析）"></a>SSO（浅析）</h2><p>首次登录：<br>用户首次访问网站 a.com 页面，未登录则携带地址参数重定向到 sso 认证中心，用户输入账号密码验证成功，则认证中心生成令牌 token 通过 Set-Cookie 种入 cookie，返回 a.com<br>a.com 收到 token 后会再去认证中心确认一次是否为真（防篡改），为真则登录成功，同时后端会将登陆信息写入 cookie 返回给前端，此时前端保存了 a.com 和 sso 的登录态</p><p>后续登陆：<br>若用户访文 a.com 下的页面，则会直接登录成功<br>若用户访问 b.com，cookie 被携带跳转到认证中心，会检测出已登录状态，则直接下发 token 并返回 b.com，实现登录</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cookie-Storage 笔记</title>
    <link href="/dylan/2021/11/12/cookie-storage/"/>
    <url>/dylan/2021/11/12/cookie-storage/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code> 都是浏览器数据储存的方案，indexedDB、Web SQ（从来没用过、前端数据库？）</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><code>cookie</code> 是浏览器保存到用户电脑上的一个文本，用户通过 http 请求服务器，服务器将一些字典的减值对返回给客户端浏览器，并加上一些限制条件，在条件符合时用户再次访问服务器时，<code>cookie</code> 通过请求头完整的带回给服务器，服务器根据 <code>cookie</code> 信息判断不同的用户，这里涉及到 <code>cookie</code> 与 <code>session</code> ，<code>session</code> 是储存在服务器数据库的，不做太多叙述，大致原理是服务器通过 <code>cookie</code> 找到对应的 <code>session</code> 用来保存用户状态。</p><p>cookie 分类</p><p>会话级别：就是在浏览器关闭之后 <code>cookie</code> 就会失效。<br>持久级别：保存在硬盘，只要设置了过期时间就是。</p><p>cookie 属性</p><p>Name=Value 键值对：Name不能和其他属性相同<br>Expires 过期时间<br>Max-Age 有效期，优先级大于 Expires<br>Domain 生成 <code>cookie</code> 的域名空间<br>Path 这个 <code>cookie</code> 是在系统哪个文件路径下生成的<br>Secure 加密设置，设置之后只能在 SSH 连接环境下才能回传这个cookie 属性</p><p>cookie 创建</p><p>Set-Cookie:value [;expires=expires] [;domain=domain] [;path=path] [;secure]</p><h2 id="sessionStorage与localStorage"><a href="#sessionStorage与localStorage" class="headerlink" title="sessionStorage与localStorage"></a>sessionStorage与localStorage</h2><p><code>sessionStorage</code>：将数据保存在session对象中。所谓 session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session 对象可以用来保存在这段时间内所要求保存的任何数据。</p><p><code>localStorage</code>：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p><p>这两者的区别在于，<code>sessionStorage</code> 为临时保存，而 <code>localStorage</code> 为永久保存。</p><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sessionStorage.setItem(<span class="hljs-string">&#x27;name&#x27;</span>,data) <span class="hljs-comment">//创建</span><br>sessionStorage.getItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//获取</span><br>sessionStorage.removeItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//删除</span><br>sessionStorage.clear() <span class="hljs-comment">//清空所有</span><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;name&#x27;</span>,data) <span class="hljs-comment">//创建</span><br><span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//获取</span><br><span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//删除</span><br><span class="hljs-built_in">localStorage</span>.clear() <span class="hljs-comment">//清空所有</span><br></code></pre></td></tr></table></figure><h2 id="cookie、WebStorage区别"><a href="#cookie、WebStorage区别" class="headerlink" title="cookie、WebStorage区别"></a>cookie、WebStorage区别</h2><ol><li>储存空间：<code>cookie</code> 为4k，<code>WebStorage</code> 为5M</li><li>生命周期：<code>cookie</code> 指定过期时间，<code>sessionStorage</code> 页面会话期间可用，<code>localStorage</code> 永久有效，除非手动删除。</li><li>通信：<code>cookie</code> 每次请求都会携带，<code>WebStorage</code> 不会。</li><li>易用性：<code>cookie</code> 需要自己封装 setCookie、getCookie，<code>WebStorage</code> 有原生 API，可以通过 stringify 和 parse 储存数组与对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现 new 笔记</title>
    <link href="/dylan/2021/11/10/new/"/>
    <url>/dylan/2021/11/10/new/</url>
    
    <content type="html"><![CDATA[<h2 id="new的过程"><a href="#new的过程" class="headerlink" title="new的过程"></a>new的过程</h2><ol><li>创建一个空对象</li><li>将空对象的原型指向构造函数的原型</li><li>将这个空对象的 this 指向为构造函数</li></ol><h2 id="实现new"><a href="#实现new" class="headerlink" title="实现new"></a>实现new</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>,<span class="hljs-number">0</span>)  <br><span class="hljs-keyword">let</span> <span class="hljs-title">constructor</span> = <span class="hljs-title">args</span>.<span class="hljs-title">shift</span>(<span class="hljs-params"></span>)                    <br><span class="hljs-title">let</span> <span class="hljs-title">content</span> = &#123;&#125;                                    <br>content.__proto__ = <span class="hljs-title">constructor</span>.<span class="hljs-title">prototype</span>           <br><span class="hljs-title">constructor</span>.<span class="hljs-title">apply</span>(<span class="hljs-params">content,args</span>)                  <br><span class="hljs-title">return</span> <span class="hljs-title">content</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>let args = Array.prototype.slice.call(arguments,0)</code>   arguments 是一个伪数组，没有数组的一些原型方法，这段代码的意思是让 arguments 借调 Array 的原型方法 slice 返回原数组，使 arguments 成为了一个真数组</p><p><code>let constructor = args.shift()</code> 现在的 constructor 实际上就是传入的构造函数，注意 shift 方法会改变原数组，所以剩下的 args 里面都是参数</p><p><code>content.__proto__ = constructor.prototype</code> 将空对象的原型指向构造函数的原型</p><p><code>constructor.apply(content,args)</code> 改变空对象的 this 指向为构造函数</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>,<span class="hljs-number">0</span>)  <br>    <span class="hljs-keyword">let</span> <span class="hljs-title">constructor</span> = <span class="hljs-title">args</span>.<span class="hljs-title">shift</span>(<span class="hljs-params"></span>)                    <br>    <span class="hljs-title">let</span> <span class="hljs-title">content</span> = &#123;&#125;                                    <br>    content.__proto__ = <span class="hljs-title">constructor</span>.<span class="hljs-title">prototype</span>         <br>    <span class="hljs-title">constructor</span>.<span class="hljs-title">apply</span>(<span class="hljs-params">content,args</span>)                    <br><span class="hljs-title">return</span> <span class="hljs-title">content</span><br>&#125;<br><span class="hljs-title">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br><span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> b = myNew(Person,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(a)<br><span class="hljs-built_in">console</span>.log(b)<br></code></pre></td></tr></table></figure><p><img src="/dylan/imgs/new/1.png" alt="图1"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写apply、call、bind 笔记</title>
    <link href="/dylan/2021/11/10/apply-call-bind/"/>
    <url>/dylan/2021/11/10/apply-call-bind/</url>
    
    <content type="html"><![CDATA[<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>call 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br>foo(); <span class="hljs-comment">// 1 </span><br>foo.call(obj,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);  <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>给 foo 函数绑定 call 方法，将 foo 函数里的 this 指向 obj ，所以<code>foo.call(obj,3,4)</code>输出结果为2</p><p>特点：</p><p>1.参数传递以逗号隔开</p><p>2.立即执行</p><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>call 方法与 apply 类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br>foo(); <span class="hljs-comment">// 1 </span><br>foo.apply(obj,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]);  <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>特点：</p><p>1.参数传递以数组的形式</p><p>2.立即执行</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind 方法创建一个新的函数，也可以说是当前调用bind方法的函数的一个引用，这个函数的 this 被绑定为 bind 方法的第一个参数，其余参数为这个新函数的实参。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">var</span> bar=foo.bind(obj,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>bar(); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>当我们使用 bind 方法创建一个新函数，这个新函数再使用 call 或者 apply 来更改 this 绑定时，还是以 bind 绑定的 this 为准。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.value)<br>&#125;<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">var</span> o=&#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">var</span> bar=foo.bind(obj,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>bar.call(o); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>相同点：</p><ol><li>都会更改this的绑定</li></ol><p>不同点：</p><ol><li>call 和 apply 会立即执行函数，bind 不会。</li><li>apply 方法的传参格式为数组，call 和 bind 不是。</li></ol><h2 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> name = <span class="hljs-number">1</span><br>    Function.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ctx, <span class="hljs-rest_arg">...args</span>)</span> </span>&#123;<br>        let fn = Symbol(<span class="hljs-number">1</span>)<br>        ctx[fn] = <span class="hljs-keyword">this</span><br>        ctx[fn](...args)<br>        <span class="hljs-keyword">delete</span> ctx[fn]<br>    &#125;<br>    Function.prototype.myApply = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ctx, args = [])</span> </span>&#123;<br>        let fn = Symbol(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span>(args&amp;&amp;!(args <span class="hljs-keyword">instanceof</span> Array))&#123;<br>            <span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;参数不是数组&#x27;</span>)<br>        &#125;<br>        ctx[fn] = <span class="hljs-keyword">this</span><br>        ctx[fn](...args)<br>        <span class="hljs-keyword">delete</span> ctx[fn]<br>    &#125;<br>    Function.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ctx, <span class="hljs-rest_arg">...args1</span>)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (...args2)=&gt;&#123;<br>            let fn = Symbol(<span class="hljs-number">1</span>)<br>            ctx[fn] = <span class="hljs-keyword">this</span><br>            ctx[fn](...args1.concat(args2))<br>            <span class="hljs-keyword">delete</span> ctx[fn]<br>        &#125;<br>    &#125;<br>    obj2 = &#123;<br>        name: <span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> </span>&#123;<br>        console.log(<span class="hljs-keyword">this</span>.name, ...args)<br>    &#125;<br>    show(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">// 1 1 2 3</span><br>    show.myCall(obj2, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">// 2 1 2 3</span><br>    show.myApply(obj2, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-comment">// 2 1 2 3</span><br>    show.myBind(obj2, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)()<span class="hljs-comment">// 2 1 2 3</span><br></code></pre></td></tr></table></figure><p><code>let fn = Symbol(1)</code> 的作用是为了避免覆盖，保证 fn 属性的唯一性，myApply 需要判断传入的参数是否为数组形式，myBind 需要返回一个函数，因为 bind 不是立即执行的，最后需要 <code>delete ctx[fn]</code> </p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFC 笔记</title>
    <link href="/dylan/2021/11/08/BFC/"/>
    <url>/dylan/2021/11/08/BFC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、BFC概念"><a href="#一、BFC概念" class="headerlink" title="一、BFC概念"></a>一、BFC概念</h2><p>BFC  即  Block Formatting Contexts (块级格式化上下文)，<strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部（BFC的子元素不会影响BFC外部的元素）。</p><h2 id="二、触发BFC条件"><a href="#二、触发BFC条件" class="headerlink" title="二、触发BFC条件"></a>二、触发BFC条件</h2><ul><li><p>body 根元素</p></li><li><p>浮动元素：float 除 none 以外的值</p><p><code>float:left;</code> 左浮动 </p><p><code>float:right;</code>  右浮动</p><p><code>float:inherit;</code>  继承父元素float属性</p></li><li><p>绝对定位元素：position (absolute、fixed)</p><p><code>position:absolute;</code> 绝对定位相对于static以外的第一个父元素 </p><p><code>position:fixed;</code>  相对浏览器定位</p></li><li><p>display 为 inline-block、table-cells、flex</p><p><code>dispaly:inline-block;</code> 行内块元素 </p><p><code>display:table-cell;</code> 此元素会作为一个表格单元格显示</p><p><code>display:flex;</code>  弹性布局  </p></li><li><p>overflow 除了 visible 以外的值 (hidden、auto、scroll)</p><p><code>overflow:hidden;</code> 内容会被修剪，并且其余内容是不可见的</p><p><code>overflow:scroll;</code> 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</p><p><code>overflow:auto;</code> 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</p><p><code>overflow:inherit;</code> 规定应该从父元素继承 overflow 属性的值。</p></li></ul><h2 id="三、BFC解决的问题"><a href="#三、BFC解决的问题" class="headerlink" title="三、BFC解决的问题"></a>三、BFC解决的问题</h2><h4 id="1-margin重合"><a href="#1-margin重合" class="headerlink" title="1.margin重合"></a>1.margin重合</h4><p>代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.father</span>&#123;</span><br><span class="css">        <span class="hljs-comment">/* overflow: hidden; */</span></span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>box1 与 box2 中间并不会间距 40px，而是20px，加入 BFC 之后 box1 与 box2 明显间隔 40px。</p><p>图1加入BFC之前，图2加入BFC之后</p><p><img src="/dylan/imgs/BFC/1.png" alt="图1"><img src="/dylan/imgs/BFC/2.png" alt="图2"></p><h4 id="2-margin塌陷"><a href="#2-margin塌陷" class="headerlink" title="2.margin塌陷"></a>2.margin塌陷</h4><p>代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.father</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="css">        <span class="hljs-comment">/* overflow: hidden; */</span></span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>给的是box1 <code>margin-top:50px</code> 而 father 受到了box1 <code>margin-top:50px</code> 的影响，也向下偏移，给father撤销 overflow 注释后，father 位置不变，box1 向下移50px。</p><p>图3加入BFC之前，图4加入BFC之后</p><p><img src="/dylan/imgs/BFC/3.png" alt="图3"><img src="/dylan/imgs/BFC/4.png" alt="图4"></p><h4 id="3-高度坍塌"><a href="#3-高度坍塌" class="headerlink" title="3.高度坍塌"></a>3.高度坍塌</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-comment">/* background-color: brown; */</span></span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.father</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="css">        <span class="hljs-comment">/* overflow: hidden; */</span></span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid black;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父元素没有设置高度，而 box1 依旧存在与 father 标签里面，可看不见父元素的背景色，说明父元素的高度受子元素的影响。</p><p>图5加入 BFC 之前，图6加入 BFC 之后</p><p><img src="/dylan/imgs/BFC/5.png" alt="图5"><img src="/dylan/imgs/BFC/6.png" alt="图6"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid博客搭建</title>
    <link href="/dylan/2021/11/03/createBlog/"/>
    <url>/dylan/2021/11/03/createBlog/</url>
    
    <content type="html"><![CDATA[<p class="note note-info">大学还没毕业就很喜欢 Hexo 的 Fluid 主题，那时候实习公司项目用的 React+TS，想着用 React 写一个，为了搭博客自己还去学了 express （当时菜的一批，啥都存数据库），照着 Fluid 的 UI 写了个博客系统，后来服务器过期了，这几天想着用 github 部署下，现在文章用 markdown 写了。</p><p>这里记录下我搭博客的过程。</p><p>准备工作：</p><p>（1）github 仓库，（2）node 环境，（3） hexo 安装</p><p>github 仓库和 node 环境不做介绍</p><p>hexo 安装命令为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>hexo 初始化命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo init myblog<br></code></pre></td></tr></table></figure><p>博客初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd myblog<span class="hljs-comment">//进入myblog文件夹</span><br>npm i<br></code></pre></td></tr></table></figure><h2 id="一、博客搭建"><a href="#一、博客搭建" class="headerlink" title="一、博客搭建"></a>一、博客搭建</h2><h3 id="1-选择主题"><a href="#1-选择主题" class="headerlink" title="1.选择主题"></a>1.选择主题</h3><p>hexo 官网有很多主题，我主要以 Fluid 为例，每个主题 github 上都有描述文档，建议翻墙进 github （官网老崩），Fluid ：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>照着描述文档一步一步配置主题，我是下载的文件导入（官网建议npm直接安装），重点于你的 themes 文件夹下需要有 fluid 文件夹</p><p><img src="/dylan/imgs/createBlog/2021-11-3-1.png"></p><p>在根目录文件下<code>_config.yml</code>，不是 fluid 文件夹里的，修改主题配置：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br></code></pre></td></tr></table></figure><p>之后使用 hexo 命令生成静态文件，启动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g<span class="hljs-comment"># 生成静态文件，你发现文件夹多了public文件</span><br>hexo s<span class="hljs-comment"># 不出意外 localhost:4000 可以浏览你的博客了</span><br></code></pre></td></tr></table></figure><h3 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2.主题配置"></a>2.主题配置</h3><p>这时你就需要进入 fluid 文件夹里的 <code>_config.yml</code> 了，你会发现里面一大堆注释教你怎么配置主题，主要是留言板和浏览量配置比较绕，这留言板我选的是 <a href="https://valine.js.org/">valine</a> ，浏览量是 <a href="https://console.leancloud.cn/apps">leancloud</a> ，两个都是fluid内置的。</p><p>(1)留言板：</p><p>开启评论插件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br></code></pre></td></tr></table></figure><p>valine配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">valine:</span><br><span class="hljs-symbol">appId:</span><span class="hljs-meta"># 你leancloud注册完，在设置-&gt;应用凭证</span><br><span class="hljs-symbol">appKey:</span><span class="hljs-meta"># 同上</span><br></code></pre></td></tr></table></figure><p><img src="/dylan/imgs/createBlog/2021-11-3-2.png"></p><p>开启浏览量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">statistics:<br><span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br><span class="hljs-built_in">source</span>: <span class="hljs-string">&quot;leancloud&quot;</span><br></code></pre></td></tr></table></figure><p>leancloud配置:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">leancloud:</span><br><span class="hljs-symbol">    app_id:</span> <span class="hljs-comment">//同上</span><br><span class="hljs-symbol">    app_key:</span> <span class="hljs-comment">//同上</span><br></code></pre></td></tr></table></figure><p>剩下的图片，文字配置都很简单</p><h2 id="二、博客部署"><a href="#二、博客部署" class="headerlink" title="二、博客部署"></a>二、博客部署</h2><h3 id="1-github-Pages域名"><a href="#1-github-Pages域名" class="headerlink" title="1.github Pages域名"></a>1.github Pages域名</h3><p>github 仓库的创建网上一大推，顺便给个 <a href="https://wiki.jikexueyuan.com/project/github-basics/creat-new-repo.html">https://wiki.jikexueyuan.com/project/github-basics/creat-new-repo.html</a></p><p>你可以创建好仓库不用关联你的本地文件，不过 <a href="https://blog.csdn.net/qq_36667170/article/details/79094257">SSH</a> 需要配置好</p><p>进入你的 github 仓库 -&gt; settings  -&gt; GitHub Pages </p><p><img src="/dylan/imgs/createBlog/2021-11-3-3.png"></p><p>一开始我以为只能部署一个项目，因为每个人的 github 账号的的根目录都是: xxx.github.io，后来我发现只需要在域名后边加一个路由就行，比如我的：xxx.github.io/dylan </p><h3 id="2-部署"><a href="#2-部署" class="headerlink" title="2.部署"></a>2.部署</h3><p>进入根目录文件下的 <code>_config.yml</code> ，再提醒一次，不是 fluid ，是根目录！</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/sansui-d/dylan.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>别忘记了 <code>.git</code> ，之后安装部署命令 deploy-git </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><span class="hljs-comment">//简写 hexo g</span><br>hexo deploy<span class="hljs-comment">//简写 hexo d</span><br></code></pre></td></tr></table></figure><p>完成之后，你的博客就可以用 github Pages 打开了</p><h2 id="三、最后"><a href="#三、最后" class="headerlink" title="三、最后"></a>三、最后</h2><p>博客搭好了当然就该写博客啦</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">n</span> <span class="hljs-string">&quot;我的第一个博客&quot;</span><br></code></pre></td></tr></table></figure><p>找到你的 <code>我的第一个博客.md</code> 文件开始卷吧，推荐一款 markdown 编写工具 <a href="https://www.typora.io/">Typora</a></p>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
